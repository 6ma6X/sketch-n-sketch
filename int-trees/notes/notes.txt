
------------------------------------------------------------------------------

-- import Parser.Number as PN
-- import Parser ((<|>),(<$>),(*>),(<*))
-- import Parser as P
--   -- TODO ugh, adding "import List ((::))" to several library files:
--   --   elm-stuff/packages/TheSeamau5/elm-random-extra/1.1.0/src/Random/Extra.elm
--   --   elm-stuff/packages/TheSeamau5/elm-random-extra/1.1.0/src/Random/String.elm
--   --   elm-stuff/packages/Dandandan/parser/5.0.1/Parser.elm

- with Dandandan/Parser, failing with "p is undefined" JS error when
  recursively calling parsers
- same issue even when using recursively
- implemented OurParser from scratch in same style, same issue.
- solution: need to wrap recursively around _definition_ of parseVal,
  not _call_ to parseVal... figure out why...

- adding thunks, rather than using recursively, leads to "too much recursion"
  rather than undefined error. so stick with lazy...

- sprinkly recursively in a couple more places...

------------------------------------------------------------------------------
Concrete Syntax

         (\x e)
   (\(x y z) e)  ===  (\x (\y (\z e)))      -- keep sugar around in AST

        (e1 e2)
  (e1 e2 e3 e4)  ===  (((e1 e2) e3) e4)     -- keep sugar

  -- list literal (exactly n elements)
  [e1 ... en]

  -- "multi-cons" (n elements plus rest)
  [e1 ... en | e ]  ===  [e1 | [e2 | [ ... | e ] ... ] ]

