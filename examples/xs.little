; Xs
;
; After David Maulsby p591 in "Watch What I Do: Programming by Demonstration" Appendix B. 1993.
;
; Design decisions:
;   - top left n boxWidth or top left w boxWidth or top left w n or cx cy n boxWidth (below) or cx cy r boxWidth or cx cy r n or BB boxWidth or BB n
;   - boxes square or rectangular (relevant to several of the above)
;   - n ∈ {1,2,3,4,...} (below) or n ∈ {1,3,5,7,...}
;   - colors global (below) or per function call
;

(def X (\(cx cy n boxWidth)
  (let [centerColor descendingColor ascendingColor] [438 32 240]
  (let square (\(cx cy color)
    [ (squareByCenter color cx cy boxWidth) ])
  (let drawLevel (\i
    (if (= i 0)
      (square cx cy centerColor)
      (let offset (* i boxWidth)
        (concat [(square (- cx offset) (- cy offset) descendingColor)
                 (square (+ cx offset) (+ cy offset) descendingColor)
                 (square (- cx offset) (+ cy offset) ascendingColor)
                 (square (+ cx offset) (- cy offset) ascendingColor)]))))
    (concatMap drawLevel (zeroTo n)))))
  ))

(blobs [
  (X 200 250 3{1-6} 50)
])