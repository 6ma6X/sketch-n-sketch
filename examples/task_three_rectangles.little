
(def rect1
  (let [fill x y w h] ["red" 30 30 50 70]
    (rect fill x y w h)))

(def rect2
  (let [fill x y w h] ["green" 109 53 50 70]
    (rect fill x y w h)))

(def rect3
  (let [fill x y w h] ["blue" 192 35 50 70]
    (rect fill x y w h)))

(def main
  (draw [ rect1 rect2 rect3 ]))


; The final program should look something like:
;
;   (def rect_50_70 (\(fill x y)
;     (let [w h] [50 70]
;       (rect fill x y w h))))
;
;   (def rect1
;     (rect_50_70 "red" 30 30))
;
;   (def rect2
;     (rect_50_70 "green" 109 53))
;
;   (def rect3
;     (rect_50_70 "blue" 192 35))
;
;   (def main
;     (draw [ rect1 rect2 rect3 ]))
; <!-- PROSE --> <p>PLACEHOLDER INSTRUCTIONS</p><p>Goals:</p><ul><li>The three rectangle definitions share a lot of identical code. Create a function <code>rect_50_70</code> that generates a <code>50</code> x <code>70</code> rectangle given color and position arguments, and define <code>rect1</code>, <code>rect2</code>, and <code>rect3</code> in terms of <code>rect_50_70</code>.</li></ul>
