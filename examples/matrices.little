; Definitions for 2D matrices and transform application
;
(def [theta tx ty] [(/ 3.14159! 4) 75 75])
(defrec rmult_ (\(r v) (case [r v]
  ([ [] x ] 0)
  ([ x [] ] 0)
  ([ [a | aa] [b | bb] ] (+ (* a b) (rmult_ aa bb))))))
(defrec mmult (\(m v) (case m
  ([] [])
  ([r|rest] (if (= (len r) (len v)) (cons (rmult_ r v) (mmult rest v)) [])))))
(defrec toPts (\l (case l
  ([] [])
  ([ [x y k] | rest ] (cons [x y] (toPts rest))))))
(defrec toPath_ (\l (case l
  ([] [])
  ([ [x y] | rest ] (append [ 'L' x y ] (toPath_ rest))))))
(def toPath (\l (case l
  ([] [])
  ([ [x1 y1] | rest ] (path 'lightblue' 'gray' 1 (append [ 'M' x1 y1 | (toPath_ rest)] ['Z']))))))
(def id [ [1 0 0] [0 1 0] [0 0 1] ])
(def translatert (map (mmult [ [1 0 tx] [0 1 0] [0 0 1]]))
(def translatedn (map (mmult [ [1 0 0] [0 1 ty] [0 0 1]])))
(def rotate (map (mmult [ [(cos theta) (* -1 (sin theta)) 0] [(sin theta) (cos theta) 0] [0 0 1]])))
(def ps [ [-25 -25 1] [-25 25 1] [25 25 1] [25 -25 1] ])
(def square1 (toPath (toPts (translatert ps))))
(def square2 (toPath (toPts (map (mmult translate) ps))))
(def rotsquare (toPath (toPts (map (mmult rotate) (map (mmult translate) (map (mmult translate) ps))))))
(svg [square1 square2 rotsquare])