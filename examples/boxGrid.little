
; Grid pattern with three adjustable sliders:
;  - 2d slider for number of rows/columns
;  - enumeration slider for shape kind
;  - slider for number of colors
;
; Also try toggling to Color zones.

; parameters
(def [x0 y0 w h boxSize] [30! 100! 300! 300! 50!])
(def allColors [0 100 200 300 450])
(def seedRows 1.5)
(def seedCols 2.5)
(def seedNumColors 1.5)
(def seedShapeKind 0.5)

; derived values
(def [xw yh] [(+ x0 w) (+ y0 h)])
(def sep (+ boxSize 10!))
(def halfBoxSize (/ boxSize 2!))

(def [ [ cols rows ] boxSlider ] 
  (let pad 10!
  (xySlider
    (- x0 pad) (+ xw pad)
    (- y0 pad) (+ yh pad)
    0! (/ w sep)
    0! (/ h sep)
    '' ''
    seedCols seedRows)))

(def [numColors numColorsSlider]
  (hSlider true 20! 100! 30! 1! 5! '#Colors = ' seedNumColors))

(def [shapeKind shapeKindSlider]
  (enumSlider 220! 300! 30! ['Box' 'Dot' 'Star'] '' seedShapeKind))

(def shapes
  (let indices (cartProd (range 0! (- cols 1!)) (range 0! (- rows 1!)))
  (let drawShape (\[i j]
    (let shape
      (let c (nth allColors (mod (- i j) numColors))
      (let x (+ x0 (mult i sep))
      (let y (+ y0 (mult j sep))
      (let [cx cy] [(+ x halfBoxSize) (+ y halfBoxSize)]
      (case shapeKind
        ('Box'  (square c x y boxSize))
        ('Dot'  (circle c cx cy halfBoxSize))
        ('Star' (nStar c 'none' 0! 4! halfBoxSize 10! 0! cx cy))
        ( else  (circle 'none' 0! 0! 0!)))))))
    (if (and (= i (- cols 1!)) (< j numColors))
        shape
        (addAttr shape ['ZONES' 'none']))))
  (map drawShape indices))))

(svg (concat [ 
  shapes
  boxSlider
  numColorsSlider
  shapeKindSlider
]))
