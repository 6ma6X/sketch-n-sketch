; A grid of boxes that can be enlarged with a slider

(def xySlider
  (\(xStart xEnd yStart yEnd xMin xMax yMin yMax xCaption yCaption xCur yCur)
    (let [rCorner wEdge rBall] [4! 3! 10!]
    (let [xDiff yDiff xValDiff yValDiff] [(- xEnd xStart) (- yEnd yStart) (- xMax xMin) (- yMax yMin)]
    (let xBall (+ xStart (* xDiff (/ (- xCur xMin) xValDiff)))
    (let yBall (+ yStart (* yDiff (/ (- yCur yMin) yValDiff)))
    (let cBall 'black'
    (let xVal (ceiling (clamp xMin xMax xCur))
    (let yVal (ceiling (clamp yMin yMax yCur))
    (let myLine (\(x1 y1 x2 y2) (line 'black' wEdge x1 y1 x2 y2))
    (let myCirc (\(x0 y0) (circle 'black' x0 y0 rCorner))
    (let shapes
      [ (myLine xStart yStart xEnd yStart)
        (myLine xStart yStart xStart yEnd)
        (myLine xStart yEnd xEnd yEnd)
        (myLine xEnd yStart xEnd yEnd)
        (myCirc xStart yStart)
        (myCirc xStart yEnd)
        (myCirc xEnd yStart)
        (myCirc xEnd yEnd)
        (circle cBall xBall yBall rBall)
        (text (- (+ xStart (/ xDiff 2)) 40) (+ yEnd 20) (+ xCaption (toString xVal)))
        (text (+ xEnd 10) (+ yStart (/ yDiff 2)) (+ yCaption (toString yVal))) ]
    [ [ xVal yVal ] shapes ]
))))))))))))

; parameters
(def [x0 y0 w h boxSize] [30! 30! 300! 300! 50!])
(def seedRows 1.5)
(def seedCols 2.5)

; derived values
(def [xw yh] [(+ x0 w) (+ y0 h)])
(def sep (+ boxSize 10!))

(def [ [ cols rows ] boxSlider ] 
  (let pad 10!
  (xySlider
    (- x0 pad) (+ xw pad)
    (- y0 pad) (+ yh pad)
    0! (/ w sep)
    0! (/ h sep)
    '' ''
    seedCols seedRows)))

(svg 
  (append
    (map
      (\[i j] (square 40 (+ x0 (mult i sep)) (+ y0 (mult j sep)) boxSize))
      (cartProd (range 0! (- cols 1!)) (range 0! (- rows 1!))))
    boxSlider))
