
; Interactive charts that show results from user study:
; http://ravichugh.github.io/sketch-n-sketch/blog/03-user-study-videos.html

; counts: [ A/B C/A C/B CI-Intervals ]

(def ferrisCounts [
  [ 3 14  2  5  1 ]
  [ 0  3  1 11 10 ]
  [ 1  3  4  9  8 ]
  [ [-0.92 0.01] [0.59 1.47] [0.25 1.23] ]
])

(def keyboardCounts [
  [ 0  5  3 10  7 ]
  [ 0  1  5 14  5 ]
  [ 0  2  2  9 12 ]
  [ [0.26 1.18] [0.59 1.21] [0.73 1.57] ]
])

(def tesselationCounts [
  [ 0  7  9  6  3 ]
  [ 1  0  8 11  5 ]
  [ 1  0  4 13  7 ]
  [ [-0.20 0.64] [0.34 1.10] [0.53 1.32] ]
])

(def maxDataPoint 14!)

(def sum (\ns
  (foldr
    (\([weight n] acc) (+ (* n weight) acc))
    0 (zip [0 1 2 3 4] ns))))

(def [iRot jRot kRot]                   [0! -120! 120!])
(def [iRevCounts jRevCounts kRevCounts] [id id reverse])
(def [iRevAvg jRevAvg kRevAvg]          [id id (\n (+ (neg (- n 2!)) 2!))])
(def [iRevBound jRevBound kRevBound]    [(\n (+ 2! n)) (\n (+ 2! n)) (\n (+ 2! (neg n)))])

(def numUsers 25!)
(def numBins 5!)
(def slices (- numBins 0!))
(def shift  (\idx (+ idx 0.5!)))

(def sideLen 90{20-200})
(def sidePad 13!{0-50})
(def tickLen 5!{1-10})
(def edgeWidth 1!{0-4})
(def levelWidth 1.0!{0.0-2.1})
(def dotSize 5!{3-10})
(def barSize 16!{1-20})
(def intWidth 8!{1-30})
(def intTicks 0!{-3-15})
(def fontSize 20!{10-40})
(def showAvgs (let showAvgs_ 0.7{0.1-1.0} (< showAvgs_ 0.5!)))
(def showTicks (let showTicks_ 0.7{0.1-1.0} (< showTicks_ 0.5!)))

(def [aUp   aLeft]  [-5!{-20-50}  25!{0-50}])
(def [bUp   bRight] [aUp          98!{0-150}])
(def [cDown cLeft]  [115!{50-200} 10!{0-30}])

(def halfLen (/ sideLen 2!))

(def tri (\(cx cy [iCounts jCounts kCounts ciIntervals])
  (let [iSum jSum kSum] (map sum [iCounts jCounts kCounts])
  (let [iAvg jAvg kAvg] [(/ iSum numUsers) (/ jSum numUsers) (/ kSum numUsers)]
  (let [iBounds jBounds kBounds] ciIntervals
  (let x0    (- cx halfLen)
  (let x1    (+ cx halfLen)
  (let y     (- cy (* (+ sideLen (* 2! sidePad)) (/ (sqrt 3!) 6!)))
  (let dx    (/ (- x1 x0) slices)
  (let xi    (\i (+ x0 (* (shift i) dx)))
  (let yn    (\n (- y (* n tickLen)))
  (let edge  (line 'gray' edgeWidth)
  (let tick  (\x (circle 'gray' x y 3!))
  (let bar   (line 'lightblue' barSize)
  (let dot   (\x (circle 'goldenrod' x y dotSize))
  (let level (\i (let yLevel (- y (* i tickLen))
                 (line 'white' levelWidth x0 yLevel x1 yLevel)))
  (let label (\(x y s)
    (addAttr (text x y s) ['font-size' (+ (toString fontSize) 'pt')]))
  (let edges
    [ (rotate (edge x0 y x1 y) iRot cx cy)
      (rotate (edge x0 y x1 y) jRot cx cy)
      (rotate (edge x0 y x1 y) kRot cx cy)
    ]
  (let tickmarks
    (let foo (\rot
      (map (\i (rotate (tick (+ (+ x0 (/ dx 2!)) (* i dx))) rot cx cy))
           (zeroTo slices)))
    (concatMap foo [iRot jRot kRot]))
  (let levels
    (let foo (\rot
      (map (\i (rotate (level i) rot cx cy))
           (range 1! maxDataPoint)))
    (concatMap foo [iRot jRot kRot]))
  (let averages
    [ (rotate (dot (xi (iRevAvg iAvg))) iRot cx cy)
      (rotate (dot (xi (jRevAvg jAvg))) jRot cx cy)
      (rotate (dot (xi (kRevAvg kAvg))) kRot cx cy)
    ]
  (let intervals
    (let draw (\(revBound [ciMin ciMax] rot)
      [ (rotate (line 'red' intWidth
           (xi (revBound ciMin)) (- y (* intTicks tickLen))
           (xi (revBound ciMax)) (- y (* intTicks tickLen))) rot cx cy) ])
    (concat [
      (draw iRevBound iBounds iRot)
      (draw jRevBound jBounds jRot)
      (draw kRevBound kBounds kRot)
    ]))
  (let labels
    [ (label (- x0 aLeft) (- y aUp) 'A')
      (label (+ x0 bRight) (- y bUp) 'B')
      (label (- (+ x0 (/ (- x1 x0) 2!)) cLeft) (+ y cDown) 'C')
    ]
  (concat [
    (flip mapi (iRevCounts iCounts) (\[i n]
      (rotate (bar (xi i) y (xi i) (yn n)) iRot cx cy)))
    (flip mapi (jRevCounts jCounts) (\[i n]
      (rotate (bar (xi i) y (xi i) (yn n)) jRot cx cy)))
    (flip mapi (kRevCounts kCounts) (\[i n]
      (rotate (bar (xi i) y (xi i) (yn n)) kRot cx cy)))
    levels
    edges
    intervals
    (if showTicks tickmarks [])
    (if showAvgs averages [])
    labels
  ]
))))))))))))))))))))))))

(def [cx0 cy0] [180!{0-200} 130!{0-200}])
(def sep 216!{100-300})

(svg (concat
  (mapi
    (\[i countsi] (tri cx0 (+ cy0 (* i sep)) countsi))
    [ferrisCounts keyboardCounts tesselationCounts])))
