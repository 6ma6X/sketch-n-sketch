; Replace Terminals With Workstations
;
; A Demo of Kurlander's graphical search and replace.
; David Kurlander p573,pp275-277 in "What What I Do: Programming by Demonstration" Appendix B. 1993.
;
; Design decisions:
;   - x y w h or left top right bot (below) for workstation display and pillar
;   - how to encode the equalization of the centerpoints of the keyboard, pillar, and display (used "Make Equal" version 1 below)
;   - how to parameterize the design into a function: x y (below) or x y size or left top right bot
;   - whether to parameterize any other details (e.g. screen color)
;   - how to implement the x y offset: map and add in each location (below) or prelude SVG translate function (not implemented yet)
;


(def terminal (\(x y)
  (let origin [x y]
  (let offset (vec2DPlus origin) ; second point unapplied
  (let body
    (let pts [[-9 154] [76 166] [150 136] [146 14] [54 6] [36 15] [38 117]]
    (let [color strokeColor strokeWidth] [454 360 2]
      [ (rawPolygon color strokeColor strokeWidth (map offset pts) 0) ]))

  (let keyboard
    (let pts [[15 147] [46 124] [102 131] [69 154]]
    (let [color strokeColor strokeWidth] [462 360 2]
      [ (rawPolygon color strokeColor strokeWidth (map offset pts) 0) ]))

  (let screen
    (let pts [[55 88] [54 32] [108 38] [109 94]]
    (let [color strokeColor strokeWidth] [103 360 2]
      [ (rawPolygon color strokeColor strokeWidth (map offset pts) 0) ]))

  (concat [ body keyboard screen ]))))))))


(def workstation (\(x y)
  (let origin [x y]
  (let offset (vec2DPlus origin) ; second point unapplied
  (let [polygon14_pts_k4862 rect11_bounds_left rect11_bounds_right] [71 104 148]
  (let k4859 (- (+ rect11_bounds_left rect11_bounds_right) polygon14_pts_k4862)
  (let rect12_bounds_left 46
  (let right' (- (+ rect11_bounds_left rect11_bounds_right) rect12_bounds_left)

  (let displayPillar
    (let bounds @ [left top right bot] [(+ x rect11_bounds_left) (+ y 115) (+ x rect11_bounds_right) (+ y 151)]
    (let color 364
      [ (rectangle color 360 0 0 bounds) ]))

  (let display
    (let bounds @ [left top right bot] [(+ x rect12_bounds_left) (+ y 14) (+ x right') (+ y 110)]
    (let color 110
      [ (rectangle color 360 15 0 bounds) ]))

  (let keyboard
    (let pts_k4861 150
    (let pts_k4855 178
    (let pts [[polygon14_pts_k4862 pts_k4861] [k4859 pts_k4861] [201 pts_k4855] [53 pts_k4855]]
    (let [color strokeColor strokeWidth] [460 360 5]
      [ (rawPolygon color strokeColor strokeWidth (map offset pts) 0) ]))))

  (let mouseCord
    (let [strokeColor strokeWidth color] [369 1 'none']
    (let [x0 y0] [21 159]
    (let d ['M' (+ x x0) (+ y y0) 'L' (+ x 36) (+ y 144) 'L' (+ x 69) (+ y 137) 'L' (+ x 100) (+ y 134) 'L' (+ x 133) (+ y 136)]
      [ (rawPath color strokeColor strokeWidth d 0) ])))

  (let mouseBody
    (let pts [[-5 176] [12 158] [28 158] [18 177]]
    (let [color strokeColor strokeWidth] [462 360 2]
      [ (rawPolygon color strokeColor strokeWidth (map offset pts) 0) ]))

  (let mouseButton
    (let pts [[10 165] [14 161] [23 161] [18 166]]
    (let [color strokeColor strokeWidth] [364 360 2]
      [ (rawPolygon color strokeColor strokeWidth (map offset pts) 0) ]))

  (concat [ displayPillar display keyboard mouseCord mouseBody mouseButton ])))))))))))))))

(def terminalsOrWorkstations 0!{0-1})
(def terminalOrWorkstation
  (if (< terminalsOrWorkstations 0.5!) terminal workstation))

(blobs [
  (terminalOrWorkstation 0 0)
  (terminalOrWorkstation 300 200)
  (terminalOrWorkstation 200 300)
  (terminalOrWorkstation 400 400)
])