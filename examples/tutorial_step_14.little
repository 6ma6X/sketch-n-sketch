
(def redSquare
  (\(x y w)
    (rect "salmon" x y w w)))

(def main
  (draw
    [(redSquare 200 250 80)
     (redSquare 200 100 30)
     (redSquare 200 400 150)]))
; <!-- PROSE --> <p>Let's say we've now coded up a nice piece of art using our newly-defined function:</p><p>However, we now want to change how the redSquare function is called; instead of the size of the square being the last argument that we pass in, we'd prefer if it were the first.</p><p>To do this, we can use the Reorder Arguments tool.</p><ul class="_123"><li class="_1">Text-Select Mode (right-click menu): <br><br> Text-select the argument w in the list of arguments after the backslash in the redSquare function definition. Right click the editor and select Reorder Arguments from the pop-up menu. Click on the target position that lies before the first argument (x) and after the opening parenthesis of the argument list. Click on the single option from the results list.</li><li class="_2">Text-Select Mode (Code Tools menu): <br><br> Text-select the argument w in the list of arguments after the backslash in the redSquare function definition. Select Reorder Arguments from the Code Tools menu. Click on the target position that lies before the first argument (x) and after the opening parenthesis of the argument list. Click on the single option from the results list.</li><li class="_3">Box-Select Mode: <br><br> Hold down the Shift key and click on the argument w in the list of arguments after the backslash in the redSquare function definition. Then, click on the target position that lies before the first argument (x) and after the opening parenthesis of the argument list. Release the Shift key. Under the Create Function tool in the pop-up menu, select the single option from the results list.</li></ul><p>EXERCISE: Perform the transformation with each of the three interactions. Use Undo after each to reset the program.</p>
