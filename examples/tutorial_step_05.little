
(def nums
  (let one 1
    [one "two" one "two"]))

(def main
  (draw [(show nums)]))
; <!-- PROSE --> <p>In addition to top-level definitions, local variables can be created using a different keyword called <code>let</code>. For example, within the <code>nums</code> definition, we can define the local variable <code>one</code> to hold the value <code>1</code>, and then refer to that value with the name <code>one</code> in the rest of the let-expression.</p><p>The syntax for a let definition is <code>(let x e1 e2)</code>, which says &quot;let <code>x</code> refer to <code>e1</code> when evaluating <code>e2</code>&quot;. Notice how parentheses surround the entire let definition.</p><p>The binding of <code>x</code> is only in scope in the expression <code>e2</code>. For example, the <code>one</code> variable in this code is not in scope outside of the <code>nums</code> definition.</p><h3 id="exercises">Exercises</h3><ol style="list-style-type: decimal"><li><p>Try referencing the <code>one</code> variable outside the <code>nums</code> definition.</p></li><li><p>Tuple patterns can be used in let definitions. Define the tuple pattern <code>[one two]</code> to be <code>[1 2]</code> inside <code>nums</code>.</p></li></ol>
