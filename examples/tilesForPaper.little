
; Drag some "filter tokens" from the right over the grid.
; Toggle between positive/negative filtering.

(def [x0 y0 w h boxSize] [130! 100! 300! 300! 50!])
(def allColors [454 100 200 300 450])
(def seedRows 4.375)
(def seedCols 4.3125)
(def seedNumColors 1)
(def seedShapeKind 2.6025)
(def seedFilterKind 0.75)

; derived values
(def [xw yh] [(+ x0 w) (+ y0 h)])
(def sep (+ boxSize 10!))
(def halfBoxSize (/ boxSize 2!))

(def [ [ cols rows ] boxSlider ]
  (let pad 10!
  (xySlider
    (- x0 pad) (+ xw pad)
    (- y0 pad) (+ yh pad)
    0! (/ w sep)
    0! (/ h sep)
    '' ''
    seedCols seedRows)))

(def [numColors numColorsSlider]
  (hSlider true 20! 100! 30! 1! 5! '#Colors = ' seedNumColors))

(def [shapeKind shapeKindSlider]
  (enumSlider 130! 210! 30! ['Box' 'Dot' 'Star'] '' seedShapeKind))

(def [posFilter filterKindSlider]
  (button 280! 30! 'PosNeg = ' seedFilterKind))

(def tokens
  (let [x0 y0] [400! 50!]
  (let shift (\(dx dy) [(+ x0 dx) (+ y0 dy)])
  (map (\[x y] (ghost (circle (if posFilter 'green' 'red') x y 10!)))
       [(shift -122  252)
        (shift -347  190)
        (shift -240  194)
        (shift -130 191)
        (shift -130 136)
        (shift -309 125)
        (shift -313 81)
        (shift -308 166)
        (shift -7 187)
        (shift -352 124)
       ]))))

(def isCovered (\(cx cy)
  (let checkX (between (- cx halfBoxSize) (+ cx halfBoxSize))
  (let checkY (between (- cy halfBoxSize) (+ cy halfBoxSize))
  (let centers (map (\tok [(lookupAttr tok 'cx') (lookupAttr tok 'cy')]) tokens)
  (some (\[x y] (and (checkX x) (checkY y))) centers)
 )))))

(def shapes
  (let indices (cartProd (range 0! (- cols 1!)) (range 0! (- rows 1!)))
  (let drawShape (\[i j]
    (let shape
      (let c (nth allColors (mod (- i j) numColors))
      (let x (+ x0 (mult i sep))
      (let y (+ y0 (mult j sep))
      (let [cx cy] [(+ x halfBoxSize) (+ y halfBoxSize)]
      ; TODO boolean patterns?
      (let covered (isCovered cx cy)
      (if (or (and posFilter (not covered))
              (and (not posFilter) covered)) (circle 'none' 0! 0! 0!)
      (case shapeKind
        ('Box'  (square c x y boxSize))
        ('Dot'  (circle c cx cy halfBoxSize))
        ('Star' (nStar c 'none' 0! 4! halfBoxSize 10! 0! cx cy))
        ( else  (circle 'none' 0! 0! 0!)))))))))
    (if (and (= i (- cols 1!)) (< j numColors))
        shape
        (addAttr shape ['ZONES' 'none']))))
  (map drawShape indices))))

(svg (concat [
  shapes
  boxSlider
  ; numColorsSlider
  shapeKindSlider
  filterKindSlider
  tokens
]))
