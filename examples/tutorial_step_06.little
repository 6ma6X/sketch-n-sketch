
(def triplicate (\x [x x x]))

(def triplicate2 (\(x y) [x y x y x y]))

(def main
  (draw [(show (triplicate 3))]))
; <!-- PROSE --> <p>The syntax for a function expression is <code>(\x e)</code>, which defines a function that takes an argument <code>x</code> and returns the expression <code>e</code>.</p><p>The syntax for a multi-argument function is <code>(\(x1 x2 x3 ...) e)</code>. Notice the parentheses surrounding the list of arguments.</p><p>For example, the function <code>triplicate</code> takes a single argument <code>x</code> (and returns a list that repeats <code>x</code> three times), and <code>triplicate2</code> takes two arguments. To call any function, the function name and its argument are separated by a space, and the entire call is surrounded by parentheses.</p><h3 id="exercises">Exercises</h3><ol style="list-style-type: decimal"><li><p>Rename the argument of <code>triplicate</code> to something else and re-run.</p></li><li><p>Add the function call <code>(triplicate2 3 4)</code> in the <code>main</code> expression.</p></li><li><p>Call <code>triplicate2</code> with too many arguments. You'll see a run-time error.</p></li><li><p>Call <code>triplicate2</code> with too few arguments. You won't get a run-time error, but the result shown will be <code>&lt;fun&gt;</code> (a function that is waiting for the rest of its arguments).</p></li></ol>
