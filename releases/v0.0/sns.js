var Elm = Elm || { Native: {} };
Elm.Array = Elm.Array || {};
Elm.Array.make = function (_elm) {
   "use strict";
   _elm.Array = _elm.Array || {};
   if (_elm.Array.values)
   return _elm.Array.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Array",
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Native$Array = Elm.Native.Array.make(_elm);
   var append = $Native$Array.append;
   var length = $Native$Array.length;
   var slice = $Native$Array.slice;
   var set = $Native$Array.set;
   var get = F2(function (i,
   array) {
      return _U.cmp(0,
      i) < 1 && _U.cmp(i,
      $Native$Array.length(array)) < 0 ? $Maybe.Just(A2($Native$Array.get,
      i,
      array)) : $Maybe.Nothing;
   });
   var push = $Native$Array.push;
   var empty = $Native$Array.empty;
   var filter = F2(function (isOkay,
   arr) {
      return function () {
         var update = F2(function (x,
         xs) {
            return isOkay(x) ? A2($Native$Array.push,
            x,
            xs) : xs;
         });
         return A3($Native$Array.foldl,
         update,
         $Native$Array.empty,
         arr);
      }();
   });
   var foldr = $Native$Array.foldr;
   var foldl = $Native$Array.foldl;
   var indexedMap = $Native$Array.indexedMap;
   var map = $Native$Array.map;
   var toIndexedList = function (array) {
      return A3($List.map2,
      F2(function (v0,v1) {
         return {ctor: "_Tuple2"
                ,_0: v0
                ,_1: v1};
      }),
      _L.range(0,
      $Native$Array.length(array) - 1),
      $Native$Array.toList(array));
   };
   var toList = $Native$Array.toList;
   var fromList = $Native$Array.fromList;
   var initialize = $Native$Array.initialize;
   var repeat = F2(function (n,e) {
      return A2(initialize,
      n,
      $Basics.always(e));
   });
   var Array = {ctor: "Array"};
   _elm.Array.values = {_op: _op
                       ,empty: empty
                       ,repeat: repeat
                       ,initialize: initialize
                       ,fromList: fromList
                       ,length: length
                       ,push: push
                       ,append: append
                       ,get: get
                       ,set: set
                       ,slice: slice
                       ,toList: toList
                       ,toIndexedList: toIndexedList
                       ,map: map
                       ,indexedMap: indexedMap
                       ,filter: filter
                       ,foldl: foldl
                       ,foldr: foldr};
   return _elm.Array.values;
};
Elm.Basics = Elm.Basics || {};
Elm.Basics.make = function (_elm) {
   "use strict";
   _elm.Basics = _elm.Basics || {};
   if (_elm.Basics.values)
   return _elm.Basics.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Basics",
   $Native$Basics = Elm.Native.Basics.make(_elm),
   $Native$Show = Elm.Native.Show.make(_elm),
   $Native$Utils = Elm.Native.Utils.make(_elm);
   var uncurry = F2(function (f,
   _v0) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2": return A2(f,
              _v0._0,
              _v0._1);}
         _U.badCase($moduleName,
         "on line 595, column 3 to 8");
      }();
   });
   var curry = F3(function (f,
   a,
   b) {
      return f({ctor: "_Tuple2"
               ,_0: a
               ,_1: b});
   });
   var flip = F3(function (f,b,a) {
      return A2(f,a,b);
   });
   var snd = function (_v4) {
      return function () {
         switch (_v4.ctor)
         {case "_Tuple2": return _v4._1;}
         _U.badCase($moduleName,
         "on line 573, column 3 to 4");
      }();
   };
   var fst = function (_v8) {
      return function () {
         switch (_v8.ctor)
         {case "_Tuple2": return _v8._0;}
         _U.badCase($moduleName,
         "on line 567, column 3 to 4");
      }();
   };
   var always = F2(function (a,
   _v12) {
      return function () {
         return a;
      }();
   });
   var identity = function (x) {
      return x;
   };
   _op["<|"] = F2(function (f,x) {
      return f(x);
   });
   _op["|>"] = F2(function (x,f) {
      return f(x);
   });
   _op[">>"] = F3(function (f,
   g,
   x) {
      return g(f(x));
   });
   _op["<<"] = F3(function (g,
   f,
   x) {
      return g(f(x));
   });
   _op["++"] = $Native$Utils.append;
   var toString = $Native$Show.toString;
   var isInfinite = $Native$Basics.isInfinite;
   var isNaN = $Native$Basics.isNaN;
   var toFloat = $Native$Basics.toFloat;
   var ceiling = $Native$Basics.ceiling;
   var floor = $Native$Basics.floor;
   var truncate = $Native$Basics.truncate;
   var round = $Native$Basics.round;
   var otherwise = true;
   var not = $Native$Basics.not;
   var xor = $Native$Basics.xor;
   _op["||"] = $Native$Basics.or;
   _op["&&"] = $Native$Basics.and;
   var max = $Native$Basics.max;
   var min = $Native$Basics.min;
   var GT = {ctor: "GT"};
   var EQ = {ctor: "EQ"};
   var LT = {ctor: "LT"};
   var compare = $Native$Basics.compare;
   _op[">="] = $Native$Basics.ge;
   _op["<="] = $Native$Basics.le;
   _op[">"] = $Native$Basics.gt;
   _op["<"] = $Native$Basics.lt;
   _op["/="] = $Native$Basics.neq;
   _op["=="] = $Native$Basics.eq;
   var e = $Native$Basics.e;
   var pi = $Native$Basics.pi;
   var clamp = $Native$Basics.clamp;
   var logBase = $Native$Basics.logBase;
   var abs = $Native$Basics.abs;
   var negate = $Native$Basics.negate;
   var sqrt = $Native$Basics.sqrt;
   var atan2 = $Native$Basics.atan2;
   var atan = $Native$Basics.atan;
   var asin = $Native$Basics.asin;
   var acos = $Native$Basics.acos;
   var tan = $Native$Basics.tan;
   var sin = $Native$Basics.sin;
   var cos = $Native$Basics.cos;
   _op["^"] = $Native$Basics.exp;
   _op["%"] = $Native$Basics.mod;
   var rem = $Native$Basics.rem;
   _op["//"] = $Native$Basics.div;
   _op["/"] = $Native$Basics.floatDiv;
   _op["*"] = $Native$Basics.mul;
   _op["-"] = $Native$Basics.sub;
   _op["+"] = $Native$Basics.add;
   var toPolar = $Native$Basics.toPolar;
   var fromPolar = $Native$Basics.fromPolar;
   var turns = $Native$Basics.turns;
   var degrees = $Native$Basics.degrees;
   var radians = function (t) {
      return t;
   };
   _elm.Basics.values = {_op: _op
                        ,max: max
                        ,min: min
                        ,compare: compare
                        ,not: not
                        ,xor: xor
                        ,otherwise: otherwise
                        ,rem: rem
                        ,negate: negate
                        ,abs: abs
                        ,sqrt: sqrt
                        ,clamp: clamp
                        ,logBase: logBase
                        ,e: e
                        ,pi: pi
                        ,cos: cos
                        ,sin: sin
                        ,tan: tan
                        ,acos: acos
                        ,asin: asin
                        ,atan: atan
                        ,atan2: atan2
                        ,round: round
                        ,floor: floor
                        ,ceiling: ceiling
                        ,truncate: truncate
                        ,toFloat: toFloat
                        ,degrees: degrees
                        ,radians: radians
                        ,turns: turns
                        ,toPolar: toPolar
                        ,fromPolar: fromPolar
                        ,isNaN: isNaN
                        ,isInfinite: isInfinite
                        ,toString: toString
                        ,fst: fst
                        ,snd: snd
                        ,identity: identity
                        ,always: always
                        ,flip: flip
                        ,curry: curry
                        ,uncurry: uncurry
                        ,LT: LT
                        ,EQ: EQ
                        ,GT: GT};
   return _elm.Basics.values;
};
Elm.Char = Elm.Char || {};
Elm.Char.make = function (_elm) {
   "use strict";
   _elm.Char = _elm.Char || {};
   if (_elm.Char.values)
   return _elm.Char.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Char",
   $Basics = Elm.Basics.make(_elm),
   $Native$Char = Elm.Native.Char.make(_elm);
   var fromCode = $Native$Char.fromCode;
   var toCode = $Native$Char.toCode;
   var toLocaleLower = $Native$Char.toLocaleLower;
   var toLocaleUpper = $Native$Char.toLocaleUpper;
   var toLower = $Native$Char.toLower;
   var toUpper = $Native$Char.toUpper;
   var isBetween = F3(function (low,
   high,
   $char) {
      return function () {
         var code = toCode($char);
         return _U.cmp(code,
         toCode(low)) > -1 && _U.cmp(code,
         toCode(high)) < 1;
      }();
   });
   var isUpper = A2(isBetween,
   _U.chr("A"),
   _U.chr("Z"));
   var isLower = A2(isBetween,
   _U.chr("a"),
   _U.chr("z"));
   var isDigit = A2(isBetween,
   _U.chr("0"),
   _U.chr("9"));
   var isOctDigit = A2(isBetween,
   _U.chr("0"),
   _U.chr("7"));
   var isHexDigit = function ($char) {
      return isDigit($char) || (A3(isBetween,
      _U.chr("a"),
      _U.chr("f"),
      $char) || A3(isBetween,
      _U.chr("A"),
      _U.chr("F"),
      $char));
   };
   _elm.Char.values = {_op: _op
                      ,isUpper: isUpper
                      ,isLower: isLower
                      ,isDigit: isDigit
                      ,isOctDigit: isOctDigit
                      ,isHexDigit: isHexDigit
                      ,toUpper: toUpper
                      ,toLower: toLower
                      ,toLocaleUpper: toLocaleUpper
                      ,toLocaleLower: toLocaleLower
                      ,toCode: toCode
                      ,fromCode: fromCode};
   return _elm.Char.values;
};
Elm.Color = Elm.Color || {};
Elm.Color.make = function (_elm) {
   "use strict";
   _elm.Color = _elm.Color || {};
   if (_elm.Color.values)
   return _elm.Color.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Color",
   $Basics = Elm.Basics.make(_elm);
   var Radial = F5(function (a,
   b,
   c,
   d,
   e) {
      return {ctor: "Radial"
             ,_0: a
             ,_1: b
             ,_2: c
             ,_3: d
             ,_4: e};
   });
   var radial = Radial;
   var Linear = F3(function (a,
   b,
   c) {
      return {ctor: "Linear"
             ,_0: a
             ,_1: b
             ,_2: c};
   });
   var linear = Linear;
   var fmod = F2(function (f,n) {
      return function () {
         var integer = $Basics.floor(f);
         return $Basics.toFloat(A2($Basics._op["%"],
         integer,
         n)) + f - $Basics.toFloat(integer);
      }();
   });
   var rgbToHsl = F3(function (red,
   green,
   blue) {
      return function () {
         var b = $Basics.toFloat(blue) / 255;
         var g = $Basics.toFloat(green) / 255;
         var r = $Basics.toFloat(red) / 255;
         var cMax = A2($Basics.max,
         A2($Basics.max,r,g),
         b);
         var cMin = A2($Basics.min,
         A2($Basics.min,r,g),
         b);
         var c = cMax - cMin;
         var lightness = (cMax + cMin) / 2;
         var saturation = _U.eq(lightness,
         0) ? 0 : c / (1 - $Basics.abs(2 * lightness - 1));
         var hue = $Basics.degrees(60) * (_U.eq(cMax,
         r) ? A2(fmod,
         (g - b) / c,
         6) : _U.eq(cMax,
         g) ? (b - r) / c + 2 : _U.eq(cMax,
         b) ? (r - g) / c + 4 : _U.badIf($moduleName,
         "between lines 150 and 152"));
         return {ctor: "_Tuple3"
                ,_0: hue
                ,_1: saturation
                ,_2: lightness};
      }();
   });
   var hslToRgb = F3(function (hue,
   saturation,
   lightness) {
      return function () {
         var hue$ = hue / $Basics.degrees(60);
         var chroma = (1 - $Basics.abs(2 * lightness - 1)) * saturation;
         var x = chroma * (1 - $Basics.abs(A2(fmod,
         hue$,
         2) - 1));
         var $ = _U.cmp(hue$,
         0) < 0 ? {ctor: "_Tuple3"
                  ,_0: 0
                  ,_1: 0
                  ,_2: 0} : _U.cmp(hue$,
         1) < 0 ? {ctor: "_Tuple3"
                  ,_0: chroma
                  ,_1: x
                  ,_2: 0} : _U.cmp(hue$,
         2) < 0 ? {ctor: "_Tuple3"
                  ,_0: x
                  ,_1: chroma
                  ,_2: 0} : _U.cmp(hue$,
         3) < 0 ? {ctor: "_Tuple3"
                  ,_0: 0
                  ,_1: chroma
                  ,_2: x} : _U.cmp(hue$,
         4) < 0 ? {ctor: "_Tuple3"
                  ,_0: 0
                  ,_1: x
                  ,_2: chroma} : _U.cmp(hue$,
         5) < 0 ? {ctor: "_Tuple3"
                  ,_0: x
                  ,_1: 0
                  ,_2: chroma} : _U.cmp(hue$,
         6) < 0 ? {ctor: "_Tuple3"
                  ,_0: chroma
                  ,_1: 0
                  ,_2: x} : {ctor: "_Tuple3"
                            ,_0: 0
                            ,_1: 0
                            ,_2: 0},
         r = $._0,
         g = $._1,
         b = $._2;
         var m = lightness - chroma / 2;
         return {ctor: "_Tuple3"
                ,_0: r + m
                ,_1: g + m
                ,_2: b + m};
      }();
   });
   var toRgb = function (color) {
      return function () {
         switch (color.ctor)
         {case "HSLA":
            return function () {
                 var $ = A3(hslToRgb,
                 color._0,
                 color._1,
                 color._2),
                 r = $._0,
                 g = $._1,
                 b = $._2;
                 return {_: {}
                        ,alpha: color._3
                        ,blue: $Basics.round(255 * b)
                        ,green: $Basics.round(255 * g)
                        ,red: $Basics.round(255 * r)};
              }();
            case "RGBA": return {_: {}
                                ,alpha: color._3
                                ,blue: color._2
                                ,green: color._1
                                ,red: color._0};}
         _U.badCase($moduleName,
         "between lines 124 and 132");
      }();
   };
   var toHsl = function (color) {
      return function () {
         switch (color.ctor)
         {case "HSLA": return {_: {}
                              ,alpha: color._3
                              ,hue: color._0
                              ,lightness: color._2
                              ,saturation: color._1};
            case "RGBA":
            return function () {
                 var $ = A3(rgbToHsl,
                 color._0,
                 color._1,
                 color._2),
                 h = $._0,
                 s = $._1,
                 l = $._2;
                 return {_: {}
                        ,alpha: color._3
                        ,hue: h
                        ,lightness: l
                        ,saturation: s};
              }();}
         _U.badCase($moduleName,
         "between lines 114 and 121");
      }();
   };
   var HSLA = F4(function (a,
   b,
   c,
   d) {
      return {ctor: "HSLA"
             ,_0: a
             ,_1: b
             ,_2: c
             ,_3: d};
   });
   var hsla = F4(function (hue,
   saturation,
   lightness,
   alpha) {
      return A4(HSLA,
      hue - $Basics.turns($Basics.toFloat($Basics.floor(hue / (2 * $Basics.pi)))),
      saturation,
      lightness,
      alpha);
   });
   var hsl = F3(function (hue,
   saturation,
   lightness) {
      return A4(hsla,
      hue,
      saturation,
      lightness,
      1);
   });
   var complement = function (color) {
      return function () {
         switch (color.ctor)
         {case "HSLA": return A4(hsla,
              color._0 + $Basics.degrees(180),
              color._1,
              color._2,
              color._3);
            case "RGBA":
            return function () {
                 var $ = A3(rgbToHsl,
                 color._0,
                 color._1,
                 color._2),
                 h = $._0,
                 s = $._1,
                 l = $._2;
                 return A4(hsla,
                 h + $Basics.degrees(180),
                 s,
                 l,
                 color._3);
              }();}
         _U.badCase($moduleName,
         "between lines 105 and 111");
      }();
   };
   var grayscale = function (p) {
      return A4(HSLA,0,0,1 - p,1);
   };
   var greyscale = function (p) {
      return A4(HSLA,0,0,1 - p,1);
   };
   var RGBA = F4(function (a,
   b,
   c,
   d) {
      return {ctor: "RGBA"
             ,_0: a
             ,_1: b
             ,_2: c
             ,_3: d};
   });
   var rgba = RGBA;
   var rgb = F3(function (r,g,b) {
      return A4(RGBA,r,g,b,1);
   });
   var lightRed = A4(RGBA,
   239,
   41,
   41,
   1);
   var red = A4(RGBA,204,0,0,1);
   var darkRed = A4(RGBA,
   164,
   0,
   0,
   1);
   var lightOrange = A4(RGBA,
   252,
   175,
   62,
   1);
   var orange = A4(RGBA,
   245,
   121,
   0,
   1);
   var darkOrange = A4(RGBA,
   206,
   92,
   0,
   1);
   var lightYellow = A4(RGBA,
   255,
   233,
   79,
   1);
   var yellow = A4(RGBA,
   237,
   212,
   0,
   1);
   var darkYellow = A4(RGBA,
   196,
   160,
   0,
   1);
   var lightGreen = A4(RGBA,
   138,
   226,
   52,
   1);
   var green = A4(RGBA,
   115,
   210,
   22,
   1);
   var darkGreen = A4(RGBA,
   78,
   154,
   6,
   1);
   var lightBlue = A4(RGBA,
   114,
   159,
   207,
   1);
   var blue = A4(RGBA,
   52,
   101,
   164,
   1);
   var darkBlue = A4(RGBA,
   32,
   74,
   135,
   1);
   var lightPurple = A4(RGBA,
   173,
   127,
   168,
   1);
   var purple = A4(RGBA,
   117,
   80,
   123,
   1);
   var darkPurple = A4(RGBA,
   92,
   53,
   102,
   1);
   var lightBrown = A4(RGBA,
   233,
   185,
   110,
   1);
   var brown = A4(RGBA,
   193,
   125,
   17,
   1);
   var darkBrown = A4(RGBA,
   143,
   89,
   2,
   1);
   var black = A4(RGBA,0,0,0,1);
   var white = A4(RGBA,
   255,
   255,
   255,
   1);
   var lightGrey = A4(RGBA,
   238,
   238,
   236,
   1);
   var grey = A4(RGBA,
   211,
   215,
   207,
   1);
   var darkGrey = A4(RGBA,
   186,
   189,
   182,
   1);
   var lightGray = A4(RGBA,
   238,
   238,
   236,
   1);
   var gray = A4(RGBA,
   211,
   215,
   207,
   1);
   var darkGray = A4(RGBA,
   186,
   189,
   182,
   1);
   var lightCharcoal = A4(RGBA,
   136,
   138,
   133,
   1);
   var charcoal = A4(RGBA,
   85,
   87,
   83,
   1);
   var darkCharcoal = A4(RGBA,
   46,
   52,
   54,
   1);
   _elm.Color.values = {_op: _op
                       ,rgb: rgb
                       ,rgba: rgba
                       ,hsl: hsl
                       ,hsla: hsla
                       ,greyscale: greyscale
                       ,grayscale: grayscale
                       ,complement: complement
                       ,linear: linear
                       ,radial: radial
                       ,toRgb: toRgb
                       ,toHsl: toHsl
                       ,red: red
                       ,orange: orange
                       ,yellow: yellow
                       ,green: green
                       ,blue: blue
                       ,purple: purple
                       ,brown: brown
                       ,lightRed: lightRed
                       ,lightOrange: lightOrange
                       ,lightYellow: lightYellow
                       ,lightGreen: lightGreen
                       ,lightBlue: lightBlue
                       ,lightPurple: lightPurple
                       ,lightBrown: lightBrown
                       ,darkRed: darkRed
                       ,darkOrange: darkOrange
                       ,darkYellow: darkYellow
                       ,darkGreen: darkGreen
                       ,darkBlue: darkBlue
                       ,darkPurple: darkPurple
                       ,darkBrown: darkBrown
                       ,white: white
                       ,lightGrey: lightGrey
                       ,grey: grey
                       ,darkGrey: darkGrey
                       ,lightCharcoal: lightCharcoal
                       ,charcoal: charcoal
                       ,darkCharcoal: darkCharcoal
                       ,black: black
                       ,lightGray: lightGray
                       ,gray: gray
                       ,darkGray: darkGray};
   return _elm.Color.values;
};
Elm.Config = Elm.Config || {};
Elm.Config.make = function (_elm) {
   "use strict";
   _elm.Config = _elm.Config || {};
   if (_elm.Config.values)
   return _elm.Config.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Config";
   var params = {_: {}
                ,botSection: {_: {},h: 15}
                ,debugLayout: false
                ,mainSection: {_: {}
                              ,canvas: {_: {}
                                       ,border: "0px solid darkGray"
                                       ,hZoneInfo: 40}
                              ,codebox: {_: {}
                                        ,border: "none"
                                        ,font: "Courier, monospace"
                                        ,fontSize: "12pt"}
                              ,horizontal: {_: {}
                                           ,hGut: 10
                                           ,wExtra: 15}
                              ,vertical: {_: {}
                                         ,hExtra: 15
                                         ,wGut: 10}
                              ,widgets: {_: {}
                                        ,font: "Tahoma, sans-serif"
                                        ,fontSize: "10pt"
                                        ,hBtn: 25
                                        ,wBtn: 120}}
                ,strVersion: "v0.0"
                ,topSection: {_: {}
                             ,h: 38
                             ,hBtnO: 25
                             ,wBtnO: 180
                             ,wJunk: 230
                             ,wLogo: 25}
                ,wGut: 10};
   _elm.Config.values = {_op: _op
                        ,params: params};
   return _elm.Config.values;
};
Elm.Debug = Elm.Debug || {};
Elm.Debug.make = function (_elm) {
   "use strict";
   _elm.Debug = _elm.Debug || {};
   if (_elm.Debug.values)
   return _elm.Debug.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Debug",
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Native$Debug = Elm.Native.Debug.make(_elm);
   var trace = $Native$Debug.tracePath;
   var watchSummary = $Native$Debug.watchSummary;
   var watch = $Native$Debug.watch;
   var crash = $Native$Debug.crash;
   var log = $Native$Debug.log;
   _elm.Debug.values = {_op: _op
                       ,log: log
                       ,crash: crash
                       ,watch: watch
                       ,watchSummary: watchSummary
                       ,trace: trace};
   return _elm.Debug.values;
};
Elm.Dict = Elm.Dict || {};
Elm.Dict.make = function (_elm) {
   "use strict";
   _elm.Dict = _elm.Dict || {};
   if (_elm.Dict.values)
   return _elm.Dict.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Dict",
   $Basics = Elm.Basics.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Native$Debug = Elm.Native.Debug.make(_elm),
   $String = Elm.String.make(_elm);
   var foldr = F3(function (f,
   acc,
   t) {
      return function () {
         switch (t.ctor)
         {case "RBEmpty":
            switch (t._0.ctor)
              {case "LBlack": return acc;}
              break;
            case "RBNode": return A3(foldr,
              f,
              A3(f,
              t._1,
              t._2,
              A3(foldr,f,acc,t._4)),
              t._3);}
         _U.badCase($moduleName,
         "between lines 408 and 416");
      }();
   });
   var keys = function (dict) {
      return A3(foldr,
      F3(function (key,
      value,
      keyList) {
         return A2($List._op["::"],
         key,
         keyList);
      }),
      _L.fromArray([]),
      dict);
   };
   var values = function (dict) {
      return A3(foldr,
      F3(function (key,
      value,
      valueList) {
         return A2($List._op["::"],
         value,
         valueList);
      }),
      _L.fromArray([]),
      dict);
   };
   var toList = function (dict) {
      return A3(foldr,
      F3(function (key,value,list) {
         return A2($List._op["::"],
         {ctor: "_Tuple2"
         ,_0: key
         ,_1: value},
         list);
      }),
      _L.fromArray([]),
      dict);
   };
   var foldl = F3(function (f,
   acc,
   dict) {
      return function () {
         switch (dict.ctor)
         {case "RBEmpty":
            switch (dict._0.ctor)
              {case "LBlack": return acc;}
              break;
            case "RBNode": return A3(foldl,
              f,
              A3(f,
              dict._1,
              dict._2,
              A3(foldl,f,acc,dict._3)),
              dict._4);}
         _U.badCase($moduleName,
         "between lines 397 and 405");
      }();
   });
   var isBBlack = function (dict) {
      return function () {
         switch (dict.ctor)
         {case "RBEmpty":
            switch (dict._0.ctor)
              {case "LBBlack": return true;}
              break;
            case "RBNode":
            switch (dict._0.ctor)
              {case "BBlack": return true;}
              break;}
         return false;
      }();
   };
   var showFlag = function (f) {
      return function () {
         switch (f.ctor)
         {case "Insert": return "Insert";
            case "Remove": return "Remove";
            case "Same": return "Same";}
         _U.badCase($moduleName,
         "between lines 173 and 179");
      }();
   };
   var Same = {ctor: "Same"};
   var Remove = {ctor: "Remove"};
   var Insert = {ctor: "Insert"};
   var get = F2(function (targetKey,
   dict) {
      return function () {
         switch (dict.ctor)
         {case "RBEmpty":
            switch (dict._0.ctor)
              {case "LBlack":
                 return $Maybe.Nothing;}
              break;
            case "RBNode":
            return function () {
                 var _v29 = A2($Basics.compare,
                 targetKey,
                 dict._1);
                 switch (_v29.ctor)
                 {case "EQ":
                    return $Maybe.Just(dict._2);
                    case "GT": return A2(get,
                      targetKey,
                      dict._4);
                    case "LT": return A2(get,
                      targetKey,
                      dict._3);}
                 _U.badCase($moduleName,
                 "between lines 129 and 135");
              }();}
         _U.badCase($moduleName,
         "between lines 124 and 135");
      }();
   });
   var member = F2(function (key,
   dict) {
      return function () {
         var _v30 = A2(get,key,dict);
         switch (_v30.ctor)
         {case "Just": return true;
            case "Nothing": return false;}
         _U.badCase($moduleName,
         "between lines 138 and 140");
      }();
   });
   var max = function (dict) {
      return function () {
         switch (dict.ctor)
         {case "RBEmpty":
            return $Native$Debug.crash("(max Empty) is not defined");
            case "RBNode":
            switch (dict._4.ctor)
              {case "RBEmpty":
                 return {ctor: "_Tuple2"
                        ,_0: dict._1
                        ,_1: dict._2};}
              return max(dict._4);}
         _U.badCase($moduleName,
         "between lines 100 and 121");
      }();
   };
   var min = function (dict) {
      return function () {
         switch (dict.ctor)
         {case "RBEmpty":
            switch (dict._0.ctor)
              {case "LBlack":
                 return $Native$Debug.crash("(min Empty) is not defined");}
              break;
            case "RBNode":
            switch (dict._3.ctor)
              {case "RBEmpty":
                 switch (dict._3._0.ctor)
                   {case "LBlack":
                      return {ctor: "_Tuple2"
                             ,_0: dict._1
                             ,_1: dict._2};}
                   break;}
              return min(dict._3);}
         _U.badCase($moduleName,
         "between lines 87 and 95");
      }();
   };
   var RBEmpty = function (a) {
      return {ctor: "RBEmpty"
             ,_0: a};
   };
   var RBNode = F5(function (a,
   b,
   c,
   d,
   e) {
      return {ctor: "RBNode"
             ,_0: a
             ,_1: b
             ,_2: c
             ,_3: d
             ,_4: e};
   });
   var showLColor = function (color) {
      return function () {
         switch (color.ctor)
         {case "LBBlack":
            return "LBBlack";
            case "LBlack": return "LBlack";}
         _U.badCase($moduleName,
         "between lines 70 and 72");
      }();
   };
   var LBBlack = {ctor: "LBBlack"};
   var LBlack = {ctor: "LBlack"};
   var empty = RBEmpty(LBlack);
   var map = F2(function (f,dict) {
      return function () {
         switch (dict.ctor)
         {case "RBEmpty":
            switch (dict._0.ctor)
              {case "LBlack":
                 return RBEmpty(LBlack);}
              break;
            case "RBNode": return A5(RBNode,
              dict._0,
              dict._1,
              A2(f,dict._1,dict._2),
              A2(map,f,dict._3),
              A2(map,f,dict._4));}
         _U.badCase($moduleName,
         "between lines 385 and 394");
      }();
   });
   var showNColor = function (c) {
      return function () {
         switch (c.ctor)
         {case "BBlack": return "BBlack";
            case "Black": return "Black";
            case "NBlack": return "NBlack";
            case "Red": return "Red";}
         _U.badCase($moduleName,
         "between lines 56 and 60");
      }();
   };
   var reportRemBug = F4(function (msg,
   c,
   lgot,
   rgot) {
      return $Native$Debug.crash($String.concat(_L.fromArray(["Internal red-black tree invariant violated, expected "
                                                             ,msg
                                                             ," and got "
                                                             ,showNColor(c)
                                                             ,"/"
                                                             ,lgot
                                                             ,"/"
                                                             ,rgot
                                                             ,"\nPlease report this bug to <https://github.com/elm-lang/Elm/issues>"])));
   });
   var NBlack = {ctor: "NBlack"};
   var BBlack = {ctor: "BBlack"};
   var Black = {ctor: "Black"};
   var ensureBlackRoot = function (dict) {
      return function () {
         switch (dict.ctor)
         {case "RBEmpty":
            switch (dict._0.ctor)
              {case "LBlack": return dict;}
              break;
            case "RBNode":
            switch (dict._0.ctor)
              {case "Black": return dict;
                 case "Red": return A5(RBNode,
                   Black,
                   dict._1,
                   dict._2,
                   dict._3,
                   dict._4);}
              break;}
         _U.badCase($moduleName,
         "between lines 145 and 157");
      }();
   };
   var blackish = function (t) {
      return function () {
         switch (t.ctor)
         {case "RBEmpty": return true;
            case "RBNode":
            return _U.eq(t._0,
              Black) || _U.eq(t._0,BBlack);}
         _U.badCase($moduleName,
         "between lines 330 and 332");
      }();
   };
   var blacken = function (t) {
      return function () {
         switch (t.ctor)
         {case "RBEmpty":
            return RBEmpty(LBlack);
            case "RBNode": return A5(RBNode,
              Black,
              t._1,
              t._2,
              t._3,
              t._4);}
         _U.badCase($moduleName,
         "between lines 369 and 371");
      }();
   };
   var Red = {ctor: "Red"};
   var moreBlack = function (color) {
      return function () {
         switch (color.ctor)
         {case "BBlack":
            return $Native$Debug.crash("Can\'t make a double black node more black!");
            case "Black": return BBlack;
            case "NBlack": return Red;
            case "Red": return Black;}
         _U.badCase($moduleName,
         "between lines 235 and 239");
      }();
   };
   var lessBlack = function (color) {
      return function () {
         switch (color.ctor)
         {case "BBlack": return Black;
            case "Black": return Red;
            case "NBlack":
            return $Native$Debug.crash("Can\'t make a negative black node less black!");
            case "Red": return NBlack;}
         _U.badCase($moduleName,
         "between lines 244 and 248");
      }();
   };
   var lessBlackTree = function (dict) {
      return function () {
         switch (dict.ctor)
         {case "RBEmpty":
            switch (dict._0.ctor)
              {case "LBBlack":
                 return RBEmpty(LBlack);}
              break;
            case "RBNode": return A5(RBNode,
              lessBlack(dict._0),
              dict._1,
              dict._2,
              dict._3,
              dict._4);}
         _U.badCase($moduleName,
         "between lines 253 and 255");
      }();
   };
   var redden = function (t) {
      return function () {
         switch (t.ctor)
         {case "RBEmpty":
            return $Native$Debug.crash("can\'t make a Leaf red");
            case "RBNode": return A5(RBNode,
              Red,
              t._1,
              t._2,
              t._3,
              t._4);}
         _U.badCase($moduleName,
         "between lines 377 and 382");
      }();
   };
   var balance_node = function (t) {
      return function () {
         var assemble = function (col) {
            return function (xk) {
               return function (xv) {
                  return function (yk) {
                     return function (yv) {
                        return function (zk) {
                           return function (zv) {
                              return function (a) {
                                 return function (b) {
                                    return function (c) {
                                       return function (d) {
                                          return A5(RBNode,
                                          lessBlack(col),
                                          yk,
                                          yv,
                                          A5(RBNode,Black,xk,xv,a,b),
                                          A5(RBNode,Black,zk,zv,c,d));
                                       };
                                    };
                                 };
                              };
                           };
                        };
                     };
                  };
               };
            };
         };
         return blackish(t) ? function () {
            switch (t.ctor)
            {case "RBNode":
               switch (t._3.ctor)
                 {case "RBNode":
                    switch (t._3._0.ctor)
                      {case "Red":
                         switch (t._3._3.ctor)
                           {case "RBNode":
                              switch (t._3._3._0.ctor)
                                {case "Red":
                                   return assemble(t._0)(t._3._3._1)(t._3._3._2)(t._3._1)(t._3._2)(t._1)(t._2)(t._3._3._3)(t._3._3._4)(t._3._4)(t._4);}
                                break;}
                           switch (t._3._4.ctor)
                           {case "RBNode":
                              switch (t._3._4._0.ctor)
                                {case "Red":
                                   return assemble(t._0)(t._3._1)(t._3._2)(t._3._4._1)(t._3._4._2)(t._1)(t._2)(t._3._3)(t._3._4._3)(t._3._4._4)(t._4);}
                                break;}
                           break;}
                      break;}
                 switch (t._4.ctor)
                 {case "RBNode":
                    switch (t._4._0.ctor)
                      {case "Red":
                         switch (t._4._3.ctor)
                           {case "RBNode":
                              switch (t._4._3._0.ctor)
                                {case "Red":
                                   return assemble(t._0)(t._1)(t._2)(t._4._3._1)(t._4._3._2)(t._4._1)(t._4._2)(t._3)(t._4._3._3)(t._4._3._4)(t._4._4);}
                                break;}
                           switch (t._4._4.ctor)
                           {case "RBNode":
                              switch (t._4._4._0.ctor)
                                {case "Red":
                                   return assemble(t._0)(t._1)(t._2)(t._4._1)(t._4._2)(t._4._4._1)(t._4._4._2)(t._3)(t._4._3)(t._4._4._3)(t._4._4._4);}
                                break;}
                           break;}
                      break;}
                 switch (t._0.ctor)
                 {case "BBlack":
                    switch (t._4.ctor)
                      {case "RBNode":
                         switch (t._4._0.ctor)
                           {case "NBlack":
                              switch (t._4._3.ctor)
                                {case "RBNode":
                                   switch (t._4._3._0.ctor)
                                     {case "Black":
                                        return function () {
                                             switch (t._4._4.ctor)
                                             {case "RBNode":
                                                switch (t._4._4._0.ctor)
                                                  {case "Black":
                                                     return A5(RBNode,
                                                       Black,
                                                       t._4._3._1,
                                                       t._4._3._2,
                                                       A5(RBNode,
                                                       Black,
                                                       t._1,
                                                       t._2,
                                                       t._3,
                                                       t._4._3._3),
                                                       A5(balance,
                                                       Black,
                                                       t._4._1,
                                                       t._4._2,
                                                       t._4._3._4,
                                                       redden(t._4._4)));}
                                                  break;}
                                             return t;
                                          }();}
                                     break;}
                                break;}
                           break;}
                      switch (t._3.ctor)
                      {case "RBNode":
                         switch (t._3._0.ctor)
                           {case "NBlack":
                              switch (t._3._4.ctor)
                                {case "RBNode":
                                   switch (t._3._4._0.ctor)
                                     {case "Black":
                                        return function () {
                                             switch (t._3._3.ctor)
                                             {case "RBNode":
                                                switch (t._3._3._0.ctor)
                                                  {case "Black":
                                                     return A5(RBNode,
                                                       Black,
                                                       t._3._4._1,
                                                       t._3._4._2,
                                                       A5(balance,
                                                       Black,
                                                       t._3._1,
                                                       t._3._2,
                                                       redden(t._3._3),
                                                       t._3._4._3),
                                                       A5(RBNode,
                                                       Black,
                                                       t._1,
                                                       t._2,
                                                       t._3._4._4,
                                                       t._4));}
                                                  break;}
                                             return t;
                                          }();}
                                     break;}
                                break;}
                           break;}
                      break;}
                 break;}
            return t;
         }() : t;
      }();
   };
   var balance = F5(function (c,
   k,
   v,
   l,
   r) {
      return balance_node(A5(RBNode,
      c,
      k,
      v,
      l,
      r));
   });
   var bubble = F5(function (c,
   k,
   v,
   l,
   r) {
      return isBBlack(l) || isBBlack(r) ? A5(balance,
      moreBlack(c),
      k,
      v,
      lessBlackTree(l),
      lessBlackTree(r)) : A5(RBNode,
      c,
      k,
      v,
      l,
      r);
   });
   var remove_max = F5(function (c,
   k,
   v,
   l,
   r) {
      return function () {
         switch (r.ctor)
         {case "RBEmpty": return A3(rem,
              c,
              l,
              r);
            case "RBNode": return A5(bubble,
              c,
              k,
              v,
              l,
              A5(remove_max,
              r._0,
              r._1,
              r._2,
              r._3,
              r._4));}
         _U.badCase($moduleName,
         "between lines 314 and 319");
      }();
   });
   var rem = F3(function (c,l,r) {
      return function () {
         var _v169 = {ctor: "_Tuple2"
                     ,_0: l
                     ,_1: r};
         switch (_v169.ctor)
         {case "_Tuple2":
            switch (_v169._0.ctor)
              {case "RBEmpty":
                 switch (_v169._1.ctor)
                   {case "RBEmpty":
                      return function () {
                           switch (c.ctor)
                           {case "Black":
                              return RBEmpty(LBBlack);
                              case "Red":
                              return RBEmpty(LBlack);}
                           _U.badCase($moduleName,
                           "between lines 273 and 277");
                        }();
                      case "RBNode":
                      return function () {
                           var _v191 = {ctor: "_Tuple3"
                                       ,_0: c
                                       ,_1: _v169._0._0
                                       ,_2: _v169._1._0};
                           switch (_v191.ctor)
                           {case "_Tuple3":
                              switch (_v191._0.ctor)
                                {case "Black":
                                   switch (_v191._1.ctor)
                                     {case "LBlack":
                                        switch (_v191._2.ctor)
                                          {case "Red": return A5(RBNode,
                                               Black,
                                               _v169._1._1,
                                               _v169._1._2,
                                               _v169._1._3,
                                               _v169._1._4);}
                                          break;}
                                     break;}
                                break;}
                           return A4(reportRemBug,
                           "Black/LBlack/Red",
                           c,
                           showLColor(_v169._0._0),
                           showNColor(_v169._1._0));
                        }();}
                   break;
                 case "RBNode":
                 switch (_v169._1.ctor)
                   {case "RBEmpty":
                      return function () {
                           var _v195 = {ctor: "_Tuple3"
                                       ,_0: c
                                       ,_1: _v169._0._0
                                       ,_2: _v169._1._0};
                           switch (_v195.ctor)
                           {case "_Tuple3":
                              switch (_v195._0.ctor)
                                {case "Black":
                                   switch (_v195._1.ctor)
                                     {case "Red":
                                        switch (_v195._2.ctor)
                                          {case "LBlack":
                                             return A5(RBNode,
                                               Black,
                                               _v169._0._1,
                                               _v169._0._2,
                                               _v169._0._3,
                                               _v169._0._4);}
                                          break;}
                                     break;}
                                break;}
                           return A4(reportRemBug,
                           "Black/Red/LBlack",
                           c,
                           showNColor(_v169._0._0),
                           showLColor(_v169._1._0));
                        }();
                      case "RBNode":
                      return function () {
                           var l$ = A5(remove_max,
                           _v169._0._0,
                           _v169._0._1,
                           _v169._0._2,
                           _v169._0._3,
                           _v169._0._4);
                           var r = A5(RBNode,
                           _v169._1._0,
                           _v169._1._1,
                           _v169._1._2,
                           _v169._1._3,
                           _v169._1._4);
                           var l = A5(RBNode,
                           _v169._0._0,
                           _v169._0._1,
                           _v169._0._2,
                           _v169._0._3,
                           _v169._0._4);
                           var $ = max(l),
                           k = $._0,
                           v = $._1;
                           return A5(bubble,c,k,v,l$,r);
                        }();}
                   break;}
              break;}
         _U.badCase($moduleName,
         "between lines 271 and 300");
      }();
   });
   var update = F3(function (k,
   alter,
   dict) {
      return function () {
         var up = function (dict) {
            return function () {
               switch (dict.ctor)
               {case "RBEmpty":
                  switch (dict._0.ctor)
                    {case "LBlack":
                       return function () {
                            var _v206 = alter($Maybe.Nothing);
                            switch (_v206.ctor)
                            {case "Just":
                               return {ctor: "_Tuple2"
                                      ,_0: Insert
                                      ,_1: A5(RBNode,
                                      Red,
                                      k,
                                      _v206._0,
                                      empty,
                                      empty)};
                               case "Nothing":
                               return {ctor: "_Tuple2"
                                      ,_0: Same
                                      ,_1: empty};}
                            _U.badCase($moduleName,
                            "between lines 185 and 189");
                         }();}
                    break;
                  case "RBNode":
                  return function () {
                       var _v208 = A2($Basics.compare,
                       k,
                       dict._1);
                       switch (_v208.ctor)
                       {case "EQ": return function () {
                               var _v209 = alter($Maybe.Just(dict._2));
                               switch (_v209.ctor)
                               {case "Just":
                                  return {ctor: "_Tuple2"
                                         ,_0: Same
                                         ,_1: A5(RBNode,
                                         dict._0,
                                         dict._1,
                                         _v209._0,
                                         dict._3,
                                         dict._4)};
                                  case "Nothing":
                                  return {ctor: "_Tuple2"
                                         ,_0: Remove
                                         ,_1: A3(rem,
                                         dict._0,
                                         dict._3,
                                         dict._4)};}
                               _U.badCase($moduleName,
                               "between lines 192 and 197");
                            }();
                          case "GT": return function () {
                               var $ = up(dict._4),
                               flag = $._0,
                               newRight = $._1;
                               return function () {
                                  switch (flag.ctor)
                                  {case "Insert":
                                     return {ctor: "_Tuple2"
                                            ,_0: Insert
                                            ,_1: A5(balance,
                                            dict._0,
                                            dict._1,
                                            dict._2,
                                            dict._3,
                                            newRight)};
                                     case "Remove":
                                     return {ctor: "_Tuple2"
                                            ,_0: Remove
                                            ,_1: A5(bubble,
                                            dict._0,
                                            dict._1,
                                            dict._2,
                                            dict._3,
                                            newRight)};
                                     case "Same":
                                     return {ctor: "_Tuple2"
                                            ,_0: Same
                                            ,_1: A5(RBNode,
                                            dict._0,
                                            dict._1,
                                            dict._2,
                                            dict._3,
                                            newRight)};}
                                  _U.badCase($moduleName,
                                  "between lines 206 and 211");
                               }();
                            }();
                          case "LT": return function () {
                               var $ = up(dict._3),
                               flag = $._0,
                               newLeft = $._1;
                               return function () {
                                  switch (flag.ctor)
                                  {case "Insert":
                                     return {ctor: "_Tuple2"
                                            ,_0: Insert
                                            ,_1: A5(balance,
                                            dict._0,
                                            dict._1,
                                            dict._2,
                                            newLeft,
                                            dict._4)};
                                     case "Remove":
                                     return {ctor: "_Tuple2"
                                            ,_0: Remove
                                            ,_1: A5(bubble,
                                            dict._0,
                                            dict._1,
                                            dict._2,
                                            newLeft,
                                            dict._4)};
                                     case "Same":
                                     return {ctor: "_Tuple2"
                                            ,_0: Same
                                            ,_1: A5(RBNode,
                                            dict._0,
                                            dict._1,
                                            dict._2,
                                            newLeft,
                                            dict._4)};}
                                  _U.badCase($moduleName,
                                  "between lines 199 and 204");
                               }();
                            }();}
                       _U.badCase($moduleName,
                       "between lines 190 and 211");
                    }();}
               _U.badCase($moduleName,
               "between lines 183 and 211");
            }();
         };
         var $ = up(dict),
         flag = $._0,
         updatedDict = $._1;
         return function () {
            switch (flag.ctor)
            {case "Insert":
               return ensureBlackRoot(updatedDict);
               case "Remove":
               return blacken(updatedDict);
               case "Same":
               return updatedDict;}
            _U.badCase($moduleName,
            "between lines 213 and 219");
         }();
      }();
   });
   var insert = F3(function (key,
   value,
   dict) {
      return A3(update,
      key,
      $Basics.always($Maybe.Just(value)),
      dict);
   });
   var singleton = F2(function (key,
   value) {
      return A3(insert,
      key,
      value,
      RBEmpty(LBlack));
   });
   var union = F2(function (t1,
   t2) {
      return A3(foldl,
      insert,
      t2,
      t1);
   });
   var fromList = function (assocs) {
      return A3($List.foldl,
      F2(function (_v214,dict) {
         return function () {
            switch (_v214.ctor)
            {case "_Tuple2":
               return A3(insert,
                 _v214._0,
                 _v214._1,
                 dict);}
            _U.badCase($moduleName,
            "on line 457, column 38 to 59");
         }();
      }),
      empty,
      assocs);
   };
   var filter = F2(function (predicate,
   dictionary) {
      return function () {
         var add = F3(function (key,
         value,
         dict) {
            return A2(predicate,
            key,
            value) ? A3(insert,
            key,
            value,
            dict) : dict;
         });
         return A3(foldl,
         add,
         empty,
         dictionary);
      }();
   });
   var intersect = F2(function (t1,
   t2) {
      return A2(filter,
      F2(function (k,_v218) {
         return function () {
            return A2(member,k,t2);
         }();
      }),
      t1);
   });
   var partition = F2(function (predicate,
   dict) {
      return function () {
         var add = F3(function (key,
         value,
         _v220) {
            return function () {
               switch (_v220.ctor)
               {case "_Tuple2":
                  return A2(predicate,
                    key,
                    value) ? {ctor: "_Tuple2"
                             ,_0: A3(insert,
                             key,
                             value,
                             _v220._0)
                             ,_1: _v220._1} : {ctor: "_Tuple2"
                                              ,_0: _v220._0
                                              ,_1: A3(insert,
                                              key,
                                              value,
                                              _v220._1)};}
               _U.badCase($moduleName,
               "between lines 478 and 480");
            }();
         });
         return A3(foldl,
         add,
         {ctor: "_Tuple2"
         ,_0: empty
         ,_1: empty},
         dict);
      }();
   });
   var remove = F2(function (key,
   dict) {
      return A3(update,
      key,
      $Basics.always($Maybe.Nothing),
      dict);
   });
   var diff = F2(function (t1,t2) {
      return A3(foldl,
      F3(function (k,v,t) {
         return A2(remove,k,t);
      }),
      t1,
      t2);
   });
   _elm.Dict.values = {_op: _op
                      ,empty: empty
                      ,singleton: singleton
                      ,insert: insert
                      ,update: update
                      ,get: get
                      ,remove: remove
                      ,member: member
                      ,filter: filter
                      ,partition: partition
                      ,foldl: foldl
                      ,foldr: foldr
                      ,map: map
                      ,union: union
                      ,intersect: intersect
                      ,diff: diff
                      ,keys: keys
                      ,values: values
                      ,toList: toList
                      ,fromList: fromList};
   return _elm.Dict.values;
};
Elm.Eval = Elm.Eval || {};
Elm.Eval.make = function (_elm) {
   "use strict";
   _elm.Eval = _elm.Eval || {};
   if (_elm.Eval.values)
   return _elm.Eval.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Eval",
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Lang = Elm.Lang.make(_elm),
   $LangParser = Elm.LangParser.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Utils = Elm.Utils.make(_elm);
   var evalDelta = F2(function (op,
   is) {
      return function () {
         var _v0 = {ctor: "_Tuple2"
                   ,_0: op
                   ,_1: is};
         switch (_v0.ctor)
         {case "_Tuple2":
            switch (_v0._0.ctor)
              {case "ArcCos":
                 switch (_v0._1.ctor)
                   {case "::":
                      switch (_v0._1._1.ctor)
                        {case "[]":
                           return $Basics.acos(_v0._1._0);}
                        break;}
                   break;
                 case "ArcSin":
                 switch (_v0._1.ctor)
                   {case "::":
                      switch (_v0._1._1.ctor)
                        {case "[]":
                           return $Basics.asin(_v0._1._0);}
                        break;}
                   break;
                 case "Ceil":
                 switch (_v0._1.ctor)
                   {case "::":
                      switch (_v0._1._1.ctor)
                        {case "[]":
                           return $Basics.toFloat($Basics.ceiling(_v0._1._0));}
                        break;}
                   break;
                 case "Cos": switch (_v0._1.ctor)
                   {case "::":
                      switch (_v0._1._1.ctor)
                        {case "[]":
                           return $Basics.cos(_v0._1._0);}
                        break;}
                   break;
                 case "Div": switch (_v0._1.ctor)
                   {case "::":
                      switch (_v0._1._1.ctor)
                        {case "::":
                           switch (_v0._1._1._1.ctor)
                             {case "[]":
                                return A2(F2(function (x,y) {
                                     return x / y;
                                  }),
                                  _v0._1._0,
                                  _v0._1._1._0);}
                             break;}
                        break;}
                   break;
                 case "Floor":
                 switch (_v0._1.ctor)
                   {case "::":
                      switch (_v0._1._1.ctor)
                        {case "[]":
                           return $Basics.toFloat($Basics.floor(_v0._1._0));}
                        break;}
                   break;
                 case "Minus":
                 switch (_v0._1.ctor)
                   {case "::":
                      switch (_v0._1._1.ctor)
                        {case "::":
                           switch (_v0._1._1._1.ctor)
                             {case "[]":
                                return A2(F2(function (x,y) {
                                     return x - y;
                                  }),
                                  _v0._1._0,
                                  _v0._1._1._0);}
                             break;}
                        break;}
                   break;
                 case "Mult":
                 switch (_v0._1.ctor)
                   {case "::":
                      switch (_v0._1._1.ctor)
                        {case "::":
                           switch (_v0._1._1._1.ctor)
                             {case "[]":
                                return A2(F2(function (x,y) {
                                     return x * y;
                                  }),
                                  _v0._1._0,
                                  _v0._1._1._0);}
                             break;}
                        break;}
                   break;
                 case "Pi": switch (_v0._1.ctor)
                   {case "[]": return $Basics.pi;}
                   break;
                 case "Plus":
                 switch (_v0._1.ctor)
                   {case "::":
                      switch (_v0._1._1.ctor)
                        {case "::":
                           switch (_v0._1._1._1.ctor)
                             {case "[]":
                                return A2(F2(function (x,y) {
                                     return x + y;
                                  }),
                                  _v0._1._0,
                                  _v0._1._1._0);}
                             break;}
                        break;}
                   break;
                 case "Round":
                 switch (_v0._1.ctor)
                   {case "::":
                      switch (_v0._1._1.ctor)
                        {case "[]":
                           return $Basics.toFloat($Basics.round(_v0._1._0));}
                        break;}
                   break;
                 case "Sin": switch (_v0._1.ctor)
                   {case "::":
                      switch (_v0._1._1.ctor)
                        {case "[]":
                           return $Basics.sin(_v0._1._0);}
                        break;}
                   break;}
              break;}
         return $Debug.crash(A2($Basics._op["++"],
         "Eval.evalDelta ",
         $Lang.strOp(op)));
      }();
   });
   var lookupVar = F2(function (env,
   x) {
      return function () {
         var _v33 = A2($Utils.maybeFind,
         x,
         env);
         switch (_v33.ctor)
         {case "Just": return _v33._0;
            case "Nothing":
            return $Debug.crash(A2($Basics._op["++"],
              "eval: var ",
              $Utils.bracks(x)));}
         _U.badCase($moduleName,
         "between lines 39 and 41");
      }();
   });
   var match = function (pv) {
      return function () {
         switch (pv.ctor)
         {case "_Tuple2":
            switch (pv._0.ctor)
              {case "PList":
                 switch (pv._0._1.ctor)
                   {case "Just":
                      switch (pv._1.ctor)
                        {case "VList":
                           return function () {
                                var $ = {ctor: "_Tuple2"
                                        ,_0: $List.length(pv._0._0)
                                        ,_1: $List.length(pv._1._0)},
                                n = $._0,
                                m = $._1;
                                return _U.cmp(n,
                                m) > 0 ? $Maybe.Nothing : function () {
                                   var $ = A2($Utils.split,
                                   n,
                                   pv._1._0),
                                   vs1 = $._0,
                                   vs2 = $._1;
                                   return A2(cons,
                                   {ctor: "_Tuple2"
                                   ,_0: pv._0._1._0
                                   ,_1: $Lang.VList(vs2)},
                                   matchList(A2($Utils.zip,
                                   pv._0._0,
                                   vs1)));
                                }();
                             }();}
                        break;
                      case "Nothing":
                      switch (pv._1.ctor)
                        {case "VList":
                           return A2($Utils.bindMaybe,
                             matchList,
                             A2($Utils.maybeZip,
                             pv._0._0,
                             pv._1._0));}
                        break;}
                   return $Maybe.Nothing;
                 case "PVar":
                 return $Maybe.Just(_L.fromArray([{ctor: "_Tuple2"
                                                  ,_0: pv._0._0
                                                  ,_1: pv._1}]));}
              break;}
         _U.badCase($moduleName,
         "between lines 13 and 22");
      }();
   };
   var cons = F2(function (pv,
   menv) {
      return function () {
         var _v44 = {ctor: "_Tuple2"
                    ,_0: menv
                    ,_1: match(pv)};
         switch (_v44.ctor)
         {case "_Tuple2":
            switch (_v44._0.ctor)
              {case "Just":
                 switch (_v44._1.ctor)
                   {case "Just":
                      return $Maybe.Just(A2($Basics._op["++"],
                        _v44._1._0,
                        _v44._0._0));}
                   break;}
              break;}
         return $Maybe.Nothing;
      }();
   });
   var matchList = function (pvs) {
      return A3($List.foldl,
      F2(function (pv,acc) {
         return function () {
            var _v49 = {ctor: "_Tuple2"
                       ,_0: acc
                       ,_1: match(pv)};
            switch (_v49.ctor)
            {case "_Tuple2":
               switch (_v49._0.ctor)
                 {case "Just":
                    switch (_v49._1.ctor)
                      {case "Just":
                         return $Maybe.Just(A2($Basics._op["++"],
                           _v49._1._0,
                           _v49._0._0));}
                      break;}
                 break;}
            return $Maybe.Nothing;
         }();
      }),
      $Maybe.Just(_L.fromArray([])),
      pvs);
   };
   var evalBranches = F2(function (env,
   v) {
      return A2($List.foldl,
      F2(function (_v54,acc) {
         return function () {
            switch (_v54.ctor)
            {case "_Tuple2":
               return function () {
                    var _v58 = {ctor: "_Tuple2"
                               ,_0: acc
                               ,_1: A2(cons,
                               {ctor: "_Tuple2"
                               ,_0: _v54._0
                               ,_1: v},
                               $Maybe.Just(env))};
                    switch (_v58.ctor)
                    {case "_Tuple2":
                       switch (_v58._0.ctor)
                         {case "Just":
                            return $Maybe.Just(_v58._0._0);
                            case "Nothing":
                            switch (_v58._1.ctor)
                              {case "Just":
                                 return $Maybe.Just(A2(eval_,
                                   _v58._1._0,
                                   _v54._1));}
                              break;}
                         break;}
                    return $Maybe.Nothing;
                 }();}
            _U.badCase($moduleName,
            "between lines 140 and 145");
         }();
      }),
      $Maybe.Nothing);
   });
   var eval_ = F2(function (env,
   e) {
      return $Basics.fst(A2($eval,
      env,
      e));
   });
   var $eval = F2(function (env,
   e) {
      return function () {
         var ret = function (v) {
            return {ctor: "_Tuple2"
                   ,_0: v
                   ,_1: env};
         };
         return function () {
            switch (e.ctor)
            {case "EApp": switch (e._1.ctor)
                 {case "::":
                    switch (e._1._1.ctor)
                      {case "[]": return function () {
                              var $ = {ctor: "_Tuple2"
                                      ,_0: A2(eval_,env,e._0)
                                      ,_1: A2(eval_,env,e._1._0)},
                              v1 = $._0,
                              v2 = $._1;
                              return function () {
                                 switch (v1.ctor)
                                 {case "VClosure":
                                    switch (v1._0.ctor)
                                      {case "Just":
                                         return function () {
                                              var _v101 = A2(cons,
                                              {ctor: "_Tuple2"
                                              ,_0: $Lang.PVar(v1._0._0)
                                              ,_1: v1},
                                              A2(cons,
                                              {ctor: "_Tuple2"
                                              ,_0: v1._1
                                              ,_1: v2},
                                              $Maybe.Just(v1._3)));
                                              switch (_v101.ctor)
                                              {case "Just": return A2($eval,
                                                   _v101._0,
                                                   v1._2);}
                                              _U.badCase($moduleName,
                                              "between lines 86 and 89");
                                           }();
                                         case "Nothing":
                                         return function () {
                                              var _v103 = A2(cons,
                                              {ctor: "_Tuple2"
                                              ,_0: v1._1
                                              ,_1: v2},
                                              $Maybe.Just(v1._3));
                                              switch (_v103.ctor)
                                              {case "Just": return A2($eval,
                                                   _v103._0,
                                                   v1._2);}
                                              _U.badCase($moduleName,
                                              "between lines 83 and 85");
                                           }();}
                                      break;}
                                 _U.badCase($moduleName,
                                 "between lines 81 and 89");
                              }();
                           }();}
                      break;}
                 return A2($eval,
                 env,
                 A2($Lang.eApp,e._0,e._1));
               case "EBase":
               return ret($Lang.VBase(e._0));
               case "ECase":
               return function () {
                    var v1 = A2(eval_,env,e._0);
                    return function () {
                       var _v105 = A3(evalBranches,
                       env,
                       v1,
                       e._1);
                       switch (_v105.ctor)
                       {case "Just":
                          return ret(_v105._0);}
                       _U.badCase($moduleName,
                       "between lines 76 and 79");
                    }();
                 }();
               case "EComment":
               return A2($eval,env,e._1);
               case "EConst":
               return ret($Lang.VConst({ctor: "_Tuple2"
                                       ,_0: e._0
                                       ,_1: $Lang.TrLoc(e._1)}));
               case "EFun": switch (e._0.ctor)
                 {case "::":
                    switch (e._0._1.ctor)
                      {case "[]":
                         return ret(A4($Lang.VClosure,
                           $Maybe.Nothing,
                           e._0._0,
                           e._1,
                           env));}
                      break;}
                 return A2($eval,
                 env,
                 A2($Lang.eFun,e._0,e._1));
               case "EIf": return function () {
                    var _v107 = A2(eval_,
                    env,
                    e._0);
                    switch (_v107.ctor)
                    {case "VBase":
                       switch (_v107._0.ctor)
                         {case "Bool":
                            switch (_v107._0._0)
                              {case false: return A2($eval,
                                   env,
                                   e._2);
                                 case true: return A2($eval,
                                   env,
                                   e._1);}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "between lines 70 and 74");
                 }();
               case "ELet": switch (e._1)
                 {case false: return A2($eval,
                      env,
                      A2($Lang.EApp,
                      A2($Lang.EFun,
                      _L.fromArray([e._2]),
                      e._4),
                      _L.fromArray([e._3])));
                    case true: switch (e._2.ctor)
                      {case "PList":
                         return $Debug.crash("eval: multi letrec");
                         case "PVar":
                         return function () {
                              var _v110 = A2(eval_,
                              env,
                              e._3);
                              switch (_v110.ctor)
                              {case "VClosure":
                                 switch (_v110._0.ctor)
                                   {case "Nothing":
                                      return function () {
                                           var _ = A2($Utils.assert,
                                           "eval letrec",
                                           _U.eq(env,_v110._3));
                                           var v1$ = A4($Lang.VClosure,
                                           $Maybe.Just(e._2._0),
                                           _v110._1,
                                           _v110._2,
                                           env);
                                           return function () {
                                              var _v115 = A2(cons,
                                              {ctor: "_Tuple2"
                                              ,_0: $Lang.PVar(e._2._0)
                                              ,_1: v1$},
                                              $Maybe.Just(env));
                                              switch (_v115.ctor)
                                              {case "Just": return A2($eval,
                                                   _v115._0,
                                                   e._4);}
                                              _U.badCase($moduleName,
                                              "between lines 94 and 97");
                                           }();
                                        }();}
                                   break;}
                              _U.badCase($moduleName,
                              "between lines 90 and 97");
                           }();}
                      break;}
                 break;
               case "EList":
               return function () {
                    var vs = A2($List.map,
                    eval_(env),
                    e._0);
                    return function () {
                       switch (e._1.ctor)
                       {case "Just":
                          return function () {
                               var _v119 = A2(eval_,
                               env,
                               e._1._0);
                               switch (_v119.ctor)
                               {case "VList":
                                  return ret($Lang.VList(A2($Basics._op["++"],
                                    vs,
                                    _v119._0)));}
                               _U.badCase($moduleName,
                               "between lines 66 and 69");
                            }();
                          case "Nothing":
                          return ret($Lang.VList(vs));}
                       _U.badCase($moduleName,
                       "between lines 64 and 69");
                    }();
                 }();
               case "EOp":
               return ret(A3(evalOp,
                 env,
                 e._0,
                 e._1));
               case "EVar":
               return ret(A2(lookupVar,
                 env,
                 e._0));}
            _U.badCase($moduleName,
            "between lines 54 and 105");
         }();
      }();
   });
   var evalOp = F3(function (env,
   op,
   es) {
      return function () {
         var _v121 = A2($List.map,
         eval_(env),
         es);
         switch (_v121.ctor)
         {case "::":
            switch (_v121._0.ctor)
              {case "VBase":
                 switch (_v121._0._0.ctor)
                   {case "Bool":
                      switch (_v121._1.ctor)
                        {case "[]": return function () {
                                switch (op.ctor)
                                {case "ToStr":
                                   return $Lang.VBase($Lang.String($Basics.toString(_v121._0._0._0)));}
                                _U.badCase($moduleName,
                                "between lines 135 and 136");
                             }();}
                        break;
                      case "String":
                      switch (_v121._1.ctor)
                        {case "::":
                           switch (_v121._1._0.ctor)
                             {case "VBase":
                                switch (_v121._1._0._0.ctor)
                                  {case "String":
                                     switch (_v121._1._1.ctor)
                                       {case "[]": return function () {
                                               switch (op.ctor)
                                               {case "Eq":
                                                  return $Lang.vBool(_U.eq(_v121._0._0._0,
                                                    _v121._1._0._0._0));
                                                  case "Plus":
                                                  return $Lang.VBase($Lang.String(A2($Basics._op["++"],
                                                    _v121._0._0._0,
                                                    _v121._1._0._0._0)));}
                                               _U.badCase($moduleName,
                                               "between lines 118 and 121");
                                            }();}
                                       break;}
                                  break;}
                             break;}
                        break;}
                   break;
                 case "VConst":
                 switch (_v121._0._0.ctor)
                   {case "_Tuple2":
                      switch (_v121._1.ctor)
                        {case "::":
                           switch (_v121._1._0.ctor)
                             {case "VConst":
                                switch (_v121._1._0._0.ctor)
                                  {case "_Tuple2":
                                     switch (_v121._1._1.ctor)
                                       {case "[]": return function () {
                                               switch (op.ctor)
                                               {case "Div":
                                                  return $Lang.VConst({ctor: "_Tuple2"
                                                                      ,_0: A2(evalDelta,
                                                                      op,
                                                                      _L.fromArray([_v121._0._0._0
                                                                                   ,_v121._1._0._0._0]))
                                                                      ,_1: A2($Lang.TrOp,
                                                                      op,
                                                                      _L.fromArray([_v121._0._0._1
                                                                                   ,_v121._1._0._0._1]))});
                                                  case "Eq":
                                                  return $Lang.vBool(_U.eq(_v121._0._0._0,
                                                    _v121._1._0._0._0));
                                                  case "Lt":
                                                  return $Lang.vBool(_U.cmp(_v121._0._0._0,
                                                    _v121._1._0._0._0) < 0);
                                                  case "Minus":
                                                  return $Lang.VConst({ctor: "_Tuple2"
                                                                      ,_0: A2(evalDelta,
                                                                      op,
                                                                      _L.fromArray([_v121._0._0._0
                                                                                   ,_v121._1._0._0._0]))
                                                                      ,_1: A2($Lang.TrOp,
                                                                      op,
                                                                      _L.fromArray([_v121._0._0._1
                                                                                   ,_v121._1._0._0._1]))});
                                                  case "Mult":
                                                  return $Lang.VConst({ctor: "_Tuple2"
                                                                      ,_0: A2(evalDelta,
                                                                      op,
                                                                      _L.fromArray([_v121._0._0._0
                                                                                   ,_v121._1._0._0._0]))
                                                                      ,_1: A2($Lang.TrOp,
                                                                      op,
                                                                      _L.fromArray([_v121._0._0._1
                                                                                   ,_v121._1._0._0._1]))});
                                                  case "Plus":
                                                  return $Lang.VConst({ctor: "_Tuple2"
                                                                      ,_0: A2(evalDelta,
                                                                      op,
                                                                      _L.fromArray([_v121._0._0._0
                                                                                   ,_v121._1._0._0._0]))
                                                                      ,_1: A2($Lang.TrOp,
                                                                      op,
                                                                      _L.fromArray([_v121._0._0._1
                                                                                   ,_v121._1._0._0._1]))});}
                                               _U.badCase($moduleName,
                                               "between lines 110 and 117");
                                            }();}
                                       break;}
                                  break;}
                             break;
                           case "[]": return function () {
                                switch (op.ctor)
                                {case "ArcCos":
                                   return $Lang.VConst({ctor: "_Tuple2"
                                                       ,_0: $Basics.acos(_v121._0._0._0)
                                                       ,_1: A2($Lang.TrOp,
                                                       op,
                                                       _L.fromArray([_v121._0._0._1]))});
                                   case "ArcSin":
                                   return $Lang.VConst({ctor: "_Tuple2"
                                                       ,_0: $Basics.asin(_v121._0._0._0)
                                                       ,_1: A2($Lang.TrOp,
                                                       op,
                                                       _L.fromArray([_v121._0._0._1]))});
                                   case "Ceil":
                                   return $Lang.VConst({ctor: "_Tuple2"
                                                       ,_0: $Basics.toFloat($Basics.ceiling(_v121._0._0._0))
                                                       ,_1: A2($Lang.TrOp,
                                                       op,
                                                       _L.fromArray([_v121._0._0._1]))});
                                   case "Cos":
                                   return $Lang.VConst({ctor: "_Tuple2"
                                                       ,_0: $Basics.cos(_v121._0._0._0)
                                                       ,_1: A2($Lang.TrOp,
                                                       op,
                                                       _L.fromArray([_v121._0._0._1]))});
                                   case "Floor":
                                   return $Lang.VConst({ctor: "_Tuple2"
                                                       ,_0: $Basics.toFloat($Basics.floor(_v121._0._0._0))
                                                       ,_1: A2($Lang.TrOp,
                                                       op,
                                                       _L.fromArray([_v121._0._0._1]))});
                                   case "Round":
                                   return $Lang.VConst({ctor: "_Tuple2"
                                                       ,_0: $Basics.toFloat($Basics.round(_v121._0._0._0))
                                                       ,_1: A2($Lang.TrOp,
                                                       op,
                                                       _L.fromArray([_v121._0._0._1]))});
                                   case "Sin":
                                   return $Lang.VConst({ctor: "_Tuple2"
                                                       ,_0: $Basics.sin(_v121._0._0._0)
                                                       ,_1: A2($Lang.TrOp,
                                                       op,
                                                       _L.fromArray([_v121._0._0._1]))});
                                   case "ToStr":
                                   return $Lang.VBase($Lang.String($Basics.toString(_v121._0._0._0)));}
                                _U.badCase($moduleName,
                                "between lines 125 and 134");
                             }();}
                        break;}
                   break;}
              break;
            case "[]": return function () {
                 switch (op.ctor)
                 {case "Pi":
                    return $Lang.VConst({ctor: "_Tuple2"
                                        ,_0: $Basics.pi
                                        ,_1: A2($Lang.TrOp,
                                        op,
                                        _L.fromArray([]))});}
                 _U.badCase($moduleName,
                 "between lines 122 and 124");
              }();}
         _U.badCase($moduleName,
         "between lines 108 and 136");
      }();
   });
   var run = function (e) {
      return function () {
         var initEnv = $Basics.snd(A2($eval,
         _L.fromArray([]),
         $LangParser.prelude));
         return A2(eval_,initEnv,e);
      }();
   };
   var parseAndRun = function ($) {
      return $Lang.strVal(run($Utils.fromOk_($LangParser.parseE($))));
   };
   _elm.Eval.values = {_op: _op
                      ,run: run
                      ,parseAndRun: parseAndRun
                      ,evalDelta: evalDelta};
   return _elm.Eval.values;
};
Elm.ExamplesGenerated = Elm.ExamplesGenerated || {};
Elm.ExamplesGenerated.make = function (_elm) {
   "use strict";
   _elm.ExamplesGenerated = _elm.ExamplesGenerated || {};
   if (_elm.ExamplesGenerated.values)
   return _elm.ExamplesGenerated.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "ExamplesGenerated",
   $Eval = Elm.Eval.make(_elm),
   $LangParser = Elm.LangParser.make(_elm),
   $Utils = Elm.Utils.make(_elm);
   var sailBoat = "\n; A sail boat on the ocean\n;\n; Try mainupulating:\n;   - The position of the boat by dragging the sail\n;   - The height of the waves by moving the path control points with zones on\n;   - The frequency of the waves\n;   - The sea level\n;\n(def [sealevel amplitude period boatpos] [300 40 200 400])\n(def [oceancolor backgroundcolor] [[28 107 160 50] [135 206 250 100]])\n(def wave (\\([sx sy] [ex ey] amplitude)\n            [ (path oceancolor \'black\' 0 \n                [ \'M\' sx sy \n                  \'Q\' (+ sx (/ period 4!)) (- sy amplitude) \n                  (+ sx (/ period 2!)) sy\n                  \'Z\'])\n              (path backgroundcolor \'black\' 0\n                  [ \'M\' (+ sx (/ period 2!)) sy\n                    \'Q\' (+ sx (* period 0.75!)) (+ sy amplitude)\n                    ex ey \n                    \'Z\' ])]))\n(def nodes (map2 (\\(a b) [(* a period) b]) (range 0! (round (/ 3000 period))) (repeat (round (/ 4000 period)) sealevel)))\n(defrec mkwaves \n  (\\l (case l \n    ([] [])\n    ([x] [])\n    ([a b | rest] (append (wave a b amplitude) (mkwaves [ b | rest ]))))))\n(def backdrop (rect backgroundcolor -400! -400! 2400! 2400!))\n(def sun (circle \'yellow\' 50 0 70))\n(def deepwater (rect oceancolor -400! sealevel 2400! 4000!))\n(def quadraticbezier (\\(s c e t) (+ (+ \n    (* (* (- 1 t) (- 1 t)) s) \n    (* (* (* 2 (- 1 t)) t) c)) \n    (* (* t t) e))))\n(defrec mod (\\(x m) (if (< x m) x (mod (- x m) m))))\n(def tphase (/ (mod boatpos (/ period 2)) (/ period 2)))\n(def pickdir (\\(sl amp) (if \n    (< (mod boatpos period) (/ period 2))\n      (- sl amp) \n      (+ sl amp))))\n(def boat\n  (def boaty (quadraticbezier sealevel (pickdir sealevel amplitude) sealevel tphase))\n  (def hull (path \'saddlebrown\' \'black\' 0\n    [ \'M\' (- boatpos 30) (- boaty 10)\n      \'C\' (- boatpos 30) (+ boaty 15)\n      (+ boatpos 30) (+ boaty 15)\n      (+ boatpos 30) (- boaty 10)\n      \'Z\']))\n  (def mast (rect \'saddlebrown\' (+ boatpos 10) (- boaty 60) 5 50))\n  (def sail (rect \'beige\' (- boatpos 15!) (- boaty 50!) 50 30))\n  [mast hull sail])\n(svg \n  (concat [\n    [ backdrop sun deepwater ]\n    (mkwaves nodes)\n    boat]))\n";
   var paths5 = "\n; Adapted from:\n; https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths\n;\n(svg [\n  (path \'green\' \'black\' 2\n    [\'M\' 80 80 \'A\' 45 45 0 0 0 125 125 \'L\' 125 80 \'Z\'])\n  (path \'red\' \'black\' 2\n    [\'M\' 230 80 \'A\' 45 45 0 1 0 275 125 \'L\' 275 80 \'Z\'])\n  (path \'purple\' \'black\' 2\n    [\'M\' 80 230 \'A\' 45 45 0 0 1 125 275 \'L\' 125 230 \'Z\'])\n  (path \'blue\' \'black\' 2\n    [\'M\' 230 230 \'A\' 45 45 0 1 1 275 275 \'L\' 275 230 \'Z\'])\n])\n\n";
   var paths4 = "\n; Adapted from:\n; https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths\n;\n(svg [\n  (addAttr\n    (path \'green\' \'black\' 2\n      [\'M\' 10 315\n       \'L\' 110 215\n       \'A\' 30 50 0 0 1 162.55 162.45\n       \'L\' 172.55 152.45\n       \'A\' 30 50 -45 0 1 215.1 109.9\n       \'L\' 315 10])\n    [\'opacity\' 0.5])\n])\n\n";
   var paths3 = "\n(svg [\n  (path_ [\'M\' 10 80 \'C\' 40 10 65 10 95 80 \'S\' 150 150 180 80])\n  (path_ [\'M\' 10 80 \'Q\' 95 10 180 80])\n  (path_ [\'M\' 10 80 \'Q\' 52.5 10 95 80 \'T\' 180 80])\n])\n\n";
   var paths2 = "\n; Adapted from:\n; https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths\n;\n; Turn on the zones to see the Bezier control points.\n; Try replacing \"svg\" with \"svgViewBox 200 200\".\n;\n(svg [\n  (path_ [\'M\' 10 10   \'C\' 20 20 40 20 50 10])\n  (path_ [\'M\' 70 10   \'C\' 70 20 120 20 120 10])\n  (path_ [\'M\' 130 10  \'C\' 120 20 180 20 170 10])\n  (path_ [\'M\' 10 60   \'C\' 20 80 40 80 50 60])\n  (path_ [\'M\' 70 60   \'C\' 70 80 110 80 110 60])\n  (path_ [\'M\' 130 60  \'C\' 120 80 180 80 170 60])\n  (path_ [\'M\' 10 110  \'C\' 20 140 40 140 50 110])\n  (path_ [\'M\' 70 110  \'C\' 70 140 110 140 110 110])\n  (path_ [\'M\' 130 110 \'C\' 120 140 180 140 170 110])\n])\n\n";
   var paths1 = "\n(svg [\n  (path_ [\'M\' 10 10 \'H\' 90 \'V\' 90 \'H\' 10 \'L\' 10 10 \'Z\'])\n  (path_ [\'M\' 20 20 \'L\' 60 20 \'L\' 60 80 \'Z\'])\n  (path_ [\'M\' 150 0 \'L\' 75 200 \'L\' 225 200 \'Z\'])\n])\n\n";
   var miscShapes = "\n(let [x y] [200 150] (svg [\n  (rect \'#999999\'  50 10 80 130)\n  (circle \'lightblue\' 300 100 50)\n  (ellipse \'orange\' 40 280 30 50)\n  (polygon \'lightgreen\' \'black\' 5 [[110 110] [300 110] [x y]])\n  (polygon \'lightgreen\' \'black\' 5 [[110 210] [300 210] [x y]])\n  (line \'blue\' 4 10 20 300 40)\n]))\n\n";
   var clique = "\n;\n; A six node clique\n;\n(let node (\\[x y] (circle \'lightblue\' x y 20))\n(let edge (\\[[x y] [i j]] (line \'lightgreen\' 5 x y i j))\n(letrec genpairs\n   (\\xs\n     (case xs\n       ([x y | xx] [[x y] | (append (genpairs (cons x xx)) (genpairs (cons y xx)))])\n       ([x] [])\n       ([] [])))\n(let pts [[200 50] [400 50] [100 223] [200 389] [400 391] [500 223]]\n(let nodes (map node pts)\n(let pairs (genpairs  pts)\n(let edges (map edge pairs)\n  (svg (append edges nodes)))))))))\n\n";
   var cultOfLambda = "\n;\n; Cult of Lambda\n;\n; Some fun \n;\n(let [x0 y0 w h] [0 0 500 500]\n(let wstripe (/ w 6!)\n(let xoff (+ x0 wstripe)\n(let yoff (+ y0 (/ h 4!))\n(let minrad\n  (if (< (/ wstripe 7.5!) (/ h 30!))\n    (/ wstripe 7.5!)\n    (/ h 15!))\n(let min\n  (if (< w h)\n    (* 0.4! w)\n    (* 0.4! h))\n(let rotate (\\a (/ (* (+ 1! a) (pi)) 4!))\n(let figure \n  (\\(x y) \n    (let [x1 x2 x3] (map (\\n (+ x (* wstripe n))) [1.2! 1.5! 1.8!])\n    (let [y1 y2 y3 y4] (map (\\n (+ y (/ (/ h 2!) n))) [4.3! 2.8! 1.9! 1.4!])\n    (let figline (\\[[a b] [c d]] (line \'orange\' (/ minrad 2!) a b c d))\n      (snoc\n        (ellipse \'orange\' x2 y1 (/ wstripe 7.5!) (/ h 30!))\n        (map\n          figline\n            [[[x1 y1] [x1 y2]]\n            [[x1 y2] [x3 y2]]\n            [[x3 y1] [x3 y2]]\n            [[x1 y4] [x1 y3]]\n            [[x1 y3] [x3 y3]]\n            [[x3 y3] [x3 y4]]\n            [[x2 y1] [x2 y3]]]))))))\n(let logo\n  (\\(x y)\n    (let [xl yl wl hl delta] [x y w h 27.5]\n    (let [xw yh w2 h2] [(+ xl wl) (+ yl hl) (div wl 2) (div hl 2)]\n    (let poly (\\pts (polygon \'black\' \'none\' 0 pts))\n      [\n      (rect \'white\' xl yl wl hl)\n      (poly\n        [[(+ xl delta) yl]\n         [xw yl]\n         [xw (- yh delta)]])\n      (poly\n        [[xl (+ yl delta)]\n         [xl (- yh delta)]\n         [(- (+ xl w2) delta) (+ yl h2)]])\n      (poly\n        [[(+ xl delta) yh]\n         [(- xw delta) yh]\n         [(+ xl w2) (+ (+ yl h2) delta)]])\n    ]))))\n;\n  (svg\n    (append\n      (logo (+ x0 80!) (+ y0 36!))\n      (concatMap \n        (\\i \n          (figure \n            (+ (* 0.41! w) (+ x0 (* min (cos (rotate i)))))\n            (+ (* 0.38! h) (+ y0 (* min (sin (rotate i)))))))\n        (range 0! 7!)))))))))))))\n\n";
   var stickFigures = "\n;\n; A diagram of a sketch-n-sketch demo w/ audience\n;\n(let [x0 y0 w h] [60 -22 417! 915!]\n(let wstripe (/ w 6!)\n(let xoff (+ x0 wstripe)\n(let yoff (+ y0 (/ h 4!))\n(let minrad (if (< (/ wstripe 7.5!) (/ h 30!)) (/ wstripe 7.5!) (/ h 15!))\n(let min (if (< w h) (* 0.6! w) (* 0.6! h))\n(let figure\n  (\\(x y)\n    (let [x1 x2 x3] (map (\\n (+ x (* wstripe n))) [1.2! 1.5! 1.8!])\n    (let [y1 yh y2 y3 y4] (map (\\n (+ y (/ (/ h 2!) n))) [4.3! 2.2! 2.8! 1.9! 1.4!])\n    (let figline (\\[[a b] [c d]] (line \'black\' (/ minrad 2!) a b c d))\n      (snoc\n        (circle \'black\' x2 y1 (/ wstripe 3.75!))\n        (map\n          figline\n          [[[x1 yh] [x1 y2]]\n           [[x1 y2] [x3 y2]]\n           [[x3 yh] [x3 y2]]\n           [[x1 y4] [x1 y3]]\n           [[x1 y3] [x3 y3]]\n           [[x3 y3] [x3 y4]]\n           [[x2 y1] [x2 y3]]]))))))\n(let logo\n  (\\(x y)\n    (let [xl yl wl hl delta] [x y 90 90 6.5]\n    (let [xw yh w2 h2] [(+ xl wl) (+ yl hl) (div wl 2) (div hl 2)]\n    (let poly (\\pts (polygon \'black\' \'none\' 0 pts))\n      [(rect \'white\' xl yl wl hl)\n       (poly  [[(+ xl delta) yl] [xw yl] [xw (- yh delta)]])\n       (poly  [[xl (+ yl delta)] [xl (- yh delta)] [(- (+ xl w2) delta) (+ yl h2)]])\n       (poly  [[(+ xl delta) yh] [(- xw delta) yh] [(+ xl w2) (+ (+ yl h2) delta)]])]))))\n  ;\n  (let textBoxes\n    [ (addAttr (text 160 160 \'Laptop on Table\') [\'font-size\' 40])\n      (addAttr (text 30 600 \'Demonstrators\') [\'font-size\' 40])\n      (addAttr (text 550 660 \'Audience\') [\'font-size\' 40])\n    ]\n  ;\n  (svg (append textBoxes\n    (append\n      [(polygon\n        \'#CD7F32\'\n        \'none\'\n        0\n        [[508 511]\n         [497 347]\n         [200 354]\n         [188 512]\n         [171 334]\n         [133 287]\n         [133 435]\n         [110 257]\n         [443 250]\n         [520 324]])\n       (polygon \'none\' \'black\' 4 [[106 256] [445 251] [524 325] [183 334]])\n       (rect \'gray\' 230! 184! 103 102)\n       (polygon \'gray\' \'black\' 2 [[250 295] [357 294] [393 312] [282 312]])]\n      (append\n        (logo 238 190)\n        (concatMap\n          (\\[x y] (figure (+ x0 x) (+ y0 y)))\n          [[-24 245] [-96 140] [325 321] [405 184] [474 298]]))))))))))))))\n\n";
   var fractalTree = "\n; A fractal tree\n;\n(defrec mod (\\(x m) (if (< x m) x (mod (- x m) m))))\n(def nsin (\\n (if (< n (/ 3.14159 2)) (sin n) (cos (mod n (/ 3.14159 2))))))\n(def ncos (\\n (if (< n (/ 3.14159 2)) (cos n) (sin (mod n (/ 3.14159 2))))))\n(def [initwd initlen] [10! 150!])\n(def [steps stepslider] (hSlider true 20! 420! 550! 3! 8! \'Steps \' 4))\n(def [bendn bendnslider] (hSlider false 20! 420! 580! 1! 8! \'Bend \' 1))\n(def initangle (/ 3.14159! 2!))\n(def bend (/ 3.14159! bendn))\n(defrec exp (\\(base pow)\n  (if (< pow 1) 1 (* base (exp base (- pow 1))))))\n(def mkleftx (\\(stepnum theta px) \n  (- px (* (/ initlen stepnum) (ncos (+ theta (* (exp 0.5 stepnum) bend)))))))\n(def mkrightx (\\(stepnum theta px)\n  (+ px (* (/ initlen stepnum) (ncos (- theta (* (exp 0.5 stepnum) bend)))))))\n(def mklefty (\\(stepnum theta py)\n  (- py (* (/ initlen stepnum) (nsin (+ theta (* (exp 0.5 stepnum) bend)))))))\n(def mkrighty (\\(stepnum theta py)\n  (- py (* (/ initlen stepnum) (nsin (- theta (* (exp 0.5 stepnum) bend)))))))\n(defrec genchildren (\\(stepnum maxstep theta px2 py2) \n  (if (< maxstep stepnum) \n    [] \n    (append \n      [ (line \'black\' (/ initwd stepnum) px2 py2 \n          (mkleftx stepnum theta px2)\n          (mklefty stepnum theta py2))\n        (line \'black\' (/ initwd stepnum) px2 py2\n          (mkrightx stepnum theta px2)\n          (mkrighty stepnum theta py2))]\n      (append\n        (genchildren (+ stepnum 1) maxstep (+ theta (* (exp 0.5 stepnum) bend))\n          (mkleftx stepnum theta px2)\n          (mklefty stepnum theta py2))\n        (genchildren (+ stepnum 1) maxstep (- theta (* (exp 0.5 stepnum) bend))\n          (mkrightx stepnum theta px2)\n          (mkrighty stepnum theta py2)))))))\n(def trunk (line \'black\' initwd 210 400 210 250))\n(def branches (genchildren 2 steps initangle 210 250))\n(svg (concat [ [ trunk | branches ] bendnslider stepslider]))\n\n";
   var solarSystem = "\n; Visualization of the solar system \n;\n; The slider on top controls the \"animation.\"\n; Try changing the size of a planet in one frame,\n;   and see what happens in the others.\n;\n(def aupx 12)\n(def [ox oy] [200 400])\n; Relative radii of the planet orbits, in au\n(def [ merorb venorb earorb marorb juporb satorb uraorb neporb ] \n     [ 0.387! 0.723! 1! 1.524! 5.203! 9.539! 19.18! 30.06! ]\n)\n; Relative orbital period to the Earth\n(def [ meryr venyr earyr maryr jupyr satyr urayr nepyr ]\n     [ 0.2409! 0.616! 1! 1.9! 12! 29.5! 84! 165! ]\n)\n; Function to place a body\n(def planet (\\(color orb yr radius)\n  (\\t (circle color  (+ ox (* aupx (* orb (cos (* t (/ 6.28318 yr))))))\n                       (+ oy (* aupx (* orb (sin (* t (/ -6.28318 yr))))))\n                       radius))))\n; Visual for each body\n; Each takes a time to be displayed at\n(def sun (circle \'yellow\' ox oy 10))\n(def mercury (planet \'lightred\'   merorb meryr 4))\n(def venus   (planet \'orange\'     venorb venyr 5))\n(def earth   (planet \'green\'      earorb earyr 5))\n(def mars    (planet \'red\'        marorb maryr 4))\n(def jupiter (planet \'brown\'      juporb jupyr 6))\n(def saturn  (planet \'sandybrown\' satorb satyr 6))\n(def uranus  (planet \'blue\'       uraorb urayr 6))\n(def neptune (planet \'darkblue\'   neporb nepyr 6))\n; Visual for the rings\n(def rings\n  (reverse\n    (map (\\orb (ring \'lightgrey\' 2! ox oy (* aupx orb)))\n         [ merorb venorb earorb marorb juporb satorb uraorb neporb ])))\n(def [time timeslider] (hSlider true 20! 600! 20! 1! 1000! \'Day \' 1))\n(def rev (\\(x f) (f x)))\n(def planets (map (rev (/ time 365)) [mercury venus earth mars jupiter saturn uranus neptune]))\n(svg (concat [ rings [sun | planets] timeslider ]))\n\n";
   var pieChart1 = "\n;\n; A Pie Chart\n;\n; Move the sliders to change the size of a particular slice\n;\n(let [count1_ count2_ count3_ count4_ count5_] [35 31 16 10 8]\n(let [count1 s1] (hSlider true 20! 420! 20! 0! 100! \'\' count1_)\n(let [count2 s2] (hSlider true 20! 420! 50! 0! 100! \'\' count2_)\n(let [count3 s3] (hSlider true 20! 420! 80! 0! 100! \'\' count3_)\n(let [count4 s4] (hSlider true 20! 420! 110! 0! 100! \'\' count4_)\n(let [count5 s5] (hSlider true 20! 420! 140! 0! 100! \'\' count5_)\n(let total (+ count1 (+ count2 (+ count3 (+ count4 count5))))\n(let p2 (+ count1 count2)\n(let p3 (+ p2 count3)\n(let p4 (+ p3 count4)\n(let p5 (+ p4 count5)\n;\n(let sliders (concat [s1 s2 s3 s4 s5])\n(let [cx cy r t border] [280! 440! 180 4 \'grey\']\n;\n(let pie\n  (let pToDegrees (\\p (* 360! (/ p total)))\n  (let [d1 d2 d3 d4 d5] (map pToDegrees [count1 p2 p3 p4 p5])\n  (let flag (\\d (if (< 180 d) 1 0))\n  (let flagged (map (\\[d fr] [d (flag fr)]) [[d1 d1] [d2 (- d2 d1)] [d3 (- d3 d2)] [d4 (- d4 d3)] [d5 (- d5 d4)]])\n  (let toRadian (\\[d f] [(* (/ (pi) 180!) d) f])\n  (let polarcoords (map toRadian flagged)\n  (let slice (\\[ang flg] [flg (* r (cos ang)) (* r (sin ang))])\n  (let [[f1 x1 y1] [f2 x2 y2] [f3 x3 y3] [f4 x4 y4] [f5 x5 y5]] (map slice polarcoords)\n  (let wedge (\\[color f [sx sy] [ex ey]] (path color border t [\'M\' cx cy \'L\' sx sy \'A\' 180 180 0 f 1 ex ey \'Z\']))\n  (let wedges \n    (map\n      wedge\n        [[\'#8DEEEE\' f1 [(+ cx 180!) cy] [(+ cx x1) (+ cy y1)]]\n        [\'#66CCCC\' f2 [(+ cx x1) (+ cy y1)] [(+ cx x2) (+ cy y2)]]\n        [\'#49E9BD\' f3 [(+ cx x2) (+ cy y2)] [(+ cx x3) (+ cy y3)]]\n        [\'#5EDA9E\' f4 [(+ cx x3) (+ cy y3)] [(+ cx x4) (+ cy y4)]]\n        [\'#00FA9A\' f5 [(+ cx x4) (+ cy y4)] [(+ cx x5) (+ cy y5)]]])\n  wedges))))))))))\n;\n(svg (cons (circle \'lightgray\' cx cy (* 1.1 r)) (append sliders pie)))))))))))))))))\n\n";
   var ferris = "\n;\n; Take this ferris wheel for a spin!\n;\n; Try:\n;  - Stretching the passenger cars\n;  - Stretching the central hub\n;  - Dragging the central hub\n;  - Setting showSliders to false\n;\n(let [numSpokes_ spokeLen_ rotAngle_] [5 80 0]\n(let showSliders true\n;\n(let [numSpokes s1] (hSlider true 20! 420! 20! 3! 15! \'\' numSpokes_)\n(let [spokeLen s2] (hSlider true 20! 420! 50! 40! 200! \'\' spokeLen_)\n(let [rotAngle s3] (hSlider false 20! 420! 80! (neg twoPi) twoPi \'\' rotAngle_)\n;\n(let sliders (if showSliders (concat [s1 s2 s3]) [])\n(let wheel\n  (let [cx cy] [220 300]\n  (let rim [(ring \'darkgray\' 8! cx cy spokeLen)]\n  (let center [(circle \'black\' cx cy 20)]\n  (let frame [(nStar \'goldenrod\' \'darkgray\' 3! numSpokes spokeLen 0! rotAngle cx cy)]\n  (let spokePts (nPointsOnCircle numSpokes rotAngle cx cy spokeLen)\n  (let caps (map (\\[x y] (circle \'black\' x y 7!)) spokePts)\n  (let cars\n    (let wCar 30\n    (let wHalfCar (/ wCar 2!)\n    (map (\\[x y] (squareCenter \'lightgray\' x y wCar)) spokePts)))\n  (concat [rim cars center frame caps]))))))))\n;\n(svg (append sliders wheel)))))))))\n\n";
   var flw2 = "\n;\n; A Frank Lloyd Wright design based on:\n; http://www.glass-by-design.com/images3/skylight3.jpg\n;\n; This is a tiled version of that design\n;\n; Possible ways to manipulate:\n; - Grab edges of red polygons, yellow circles, or\n;     blue ellipses and pull in various directions\n; - Grab ends of lines and move in various directions\n;\n(let [x0 y0 w h max] [69 55 200 320 10!]\n(let wbox (/ w 10!)\n(let hbox (/ h 10!)\n(let xoff (\\(n x) (+ x0 (+ (* x w) (* wbox n))))\n(let yoff (\\(n y) (+ y0 (+ (* y h) (* hbox n))))\n(let blkline (\\[[a b] [c d]] (line \'black\' 3 a b c d))\n(let redpoly\n  (\\[a b x y]\n    (polygon\n      \'red\'\n      \'black\'\n      3\n      [[(xoff a x) (yoff a y)]\n       [(xoff a x) (yoff b y)]\n       [(xoff b x) (yoff b y)]\n       [(xoff b x) (yoff a y)]]))\n(let dimension [0! 4 5 6 7 10!]\n(let [p0 p1 p2 p3 p4] [0 1 2 2.9 5]\n(let singletile\n  (\\[x y] \n    (let verticals\n      (zip\n        (map (\\n [(xoff n x) (+ y0 (* y h))]) dimension)\n        (map (\\n [(xoff n x) (+ y0 (* (+ y 1) h))]) dimension))\n    (let horizontals\n      (zip\n        (map (\\n [(+ x0 (* x w)) (yoff n y)]) dimension)\n        (map (\\n [(+ x0 (* (+ 1 x) w)) (yoff n y)]) dimension))\n      (append\n        (append\n          (map blkline (append verticals horizontals))\n          (map (\\[xc yc r] (circle \'yellow\' xc yc r))\n            [[(xoff 6 x) (yoff 1.75 y) (+ wbox hbox)]\n             [(xoff 6 x) (yoff 7 y) (/ (+ wbox hbox) 4)]\n             [(xoff 6 x) (yoff 5 y) (/ (+ wbox hbox) 2)]]))\n        (cons\n          (ellipse \'blue\' (xoff 5 x) (yoff 9 y) (* wbox 4) hbox)\n          (map redpoly [[p0 p1 x y] [p1 p2 x y] [p2 p3 x y] [p3 p4 x y]])\n          )))))\n(let grid (cartProd [0! 1! 2!] [0! 1!])\n;\n  (svg \n    (cons (rect \'white\' (- x0 10!) (- y0 10!) (+ (* 3 w) 20!) (+ (* 2 h) 20!))\n      (concatMap singletile grid))))))))))))))\n\n";
   var flw1 = "\n;\n; A Frank Lloyd Wright design inspired by:\n; http://www.glass-by-design.com/images3/skylight3.jpg\n;\n(let [x0 y0 w h max] [69 55 532 744 10!]\n(let wbox (/ w 10!)\n(let hbox (/ h 10!)\n(let xoff (\\n (+ x0 (* wbox n)))\n(let yoff (\\n (+ y0 (* hbox n)))\n(let blkline (\\[[a b] [c d]] (line \'black\' 3 a b c d))\n(let redpoly\n  (\\[a b]\n    (polygon\n      \'red\'\n      \'black\'\n      3\n      [[(xoff  a) (yoff  a)]\n       [(xoff  a) (yoff  b)]\n       [(xoff  b) (yoff  b)]\n       [(xoff  b) (yoff  a)]]))\n(let dimension\n  [0! 1 2 2.9 2.4 1.5 9.1 7.9 8.2 8.7 10!]\n(let verticals\n  (zip\n    (map (\\n [(xoff  n) y0]) dimension)\n    (map (\\n [(xoff  n) (+ y0 (* hbox max))]) dimension))\n(let horizontals\n  (zip\n    (map (\\n [x0 (yoff  n)]) dimension)\n    (map (\\n [(+ x0 (* wbox max)) (yoff  n)]) dimension))\n  (svg\n    (cons (rect \'white\' (- x0 10!) (- y0 10!) (+ w 20!) (+ h 20!)) \n    (append\n      (map blkline (append verticals horizontals))\n      (append\n        (append\n          (let [p0 p1 p2 p3 p4] [0 1 2 2.9 5]\n            (map redpoly [[p0 p1] [p1 p2] [p2 p3] [p3 p4]]))\n          (map (\\[x y] (ellipse \'blue\' x y (* wbox 4) hbox)) [[(xoff  5) (yoff  9)]]))\n        (map\n          (\\[x y r] (circle \'yellow\' x y r))\n          [[(xoff  6) (yoff  1.75) (+ wbox hbox)]\n           [(xoff  6) (yoff  7) (/ (+ wbox hbox) 4)]\n           [(xoff  6) (yoff  5) (/ (+ wbox hbox) 2)]])))))))))))))))\n\n";
   var frenchSudan = "\n;\n; The Flag of French Sudan, based on:\n;\n; A few ways to manipulate:\n; - Grab any part of the stick figure and move it\n;     in various directions\n;\n(let [x0 y0 w h] [50 30 450 300]\n(let wstripe (/ w 3!)\n(let xoff (+ x0 wstripe)\n(let yoff (+ y0 (/ h 4!))\n(let stripe (\\[color x] (rect color x y0 wstripe h))\n(let minrad\n  (if (< (/ wstripe 7.5!) (/ h 15!))\n    (/ wstripe 7.5!)\n    (/ h 15!))\n(let figline (\\[[a b] [c d]] (line \'black\' (/ minrad 2!) a b c d))\n(let [x1 x2 x3] (map (\\n (+ x0 (* wstripe n))) [1.2! 1.5! 1.8!])\n(let [y1 y2 y3 y4] (map (\\n (+ y0 (/ h n))) [4.3! 2.8! 1.9! 1.4!])\n;\n  (svg\n    (cons (rect \'white\' (- x0 10!) (- y0 10!) (+ w 20!) (+ h 20!)) \n    (append\n      (map stripe [[\'blue\' x0] [\'white\' (+ x0 wstripe)] [\'red\' (+ x0 (* 2! wstripe))]])\n      (snoc\n        (ellipse \'black\' x2 y1 (/ wstripe 7.5!) (/ h 15!))\n        (map\n          figline\n          [[[x1 y1] [x1 y2]]\n           [[x1 y2] [x3 y2]]\n           [[x3 y1] [x3 y2]]\n           [[x1 y4] [x1 y3]]\n           [[x1 y3] [x3 y3]]\n           [[x3 y3] [x3 y4]]\n           [[x2 y1] [x2 y3]]]))))))))))))))\n\n";
   var chicago = "\n;\n; The flag of Chicago\n;\n; Possible ways to manipulate\n; - Pull stripes or stars in various directions\n; - Group box in background\n;\n(let [x0 y0 ni nj pts w h] [40 40 0.5! 3.5! 6! 454 300]\n(let [outerLen innerLen] [30 12]\n(let stripes\n  (map\n    (\\i (rect \'lightblue\' x0 (+ y0 (* i h)) w (/ h 6!)))\n    [(/ 1! 6!) (/ 2! 3!)])\n;\n  (svg \n    (cons (rect \'white\' (- x0 10!) (- y0 10!) (+ w 20!) (+ h 20!))\n    (append\n      stripes\n      (map\n        (\\i\n          (let off (* i (/ w 4!))\n            (nStar \'red\' \'none\' 0 pts outerLen innerLen 0 (+ x0 off) (+ y0 (/ h 2!)))))\n        (range ni nj))))))))\n\n";
   var usFlag50 = "\n;\n; Current Flag of the United States\n; (using circles for now, since 50 stars is slow)\n;\n; A few ways to manipulate:\n; - Grab various parts of the red stripes or\n;     blue block and pull in various directions\n; - Grab the edges of the circles and and\n;     increase or decrease the radius\n;\n(let [x0 y0 ni nj pts w h rad] [20 20 0! 12! 5! 510 272 6]\n(let hstripe (/ h 13!)\n(let block (rect \'#09096d\' x0 y0 (* w (/ 2! 5!)) (* 7! hstripe))\n(let stripes\n  (map\n    (\\i (rect \'red\' x0 (+ y0 (* i hstripe)) w hstripe))\n    [0! 2! 4! 6! 8! 10! 12!])\n(let base (append stripes [block])\n;\n  (svg\n    (cons (rect \'white\' (- x0 10!) (- y0 10!) (+ w 20!) (+ h 20!)) \n    (append base\n      (map (\\[i j]\n        (let xsep (/ w 15!)\n        (let ysep (* hstripe 1.3!)\n          (circle \'white\' (+ x0 (* i xsep)) (+ y0 (* j ysep)) rad))))\n        (append (cartProd (range 0.5! 5.5!) (range 0.75! 4.75!))\n                (cartProd (range 1! 5!) (range 1.2! 4.2!))))))))))))\n\n";
   var usFlag13 = "\n;\n; Original flag of the United States\n;\n; A few ways to mainpulate this example:\n; - Grab bottom right corner to increase overall size\n; - Grab the edge of a red stripe to increase width\n; - Grab the points of one of the stars to change \n;     the size of its points\n;\n(let rotate (\\a (/ (* a (pi)) 6.5!))\n(let [x0 y0 ni nj pts w h] [20 20 0! 12! 5! 500 260]\n(let hstripe (/ h 13!)\n(let [blockw blockh] [(/ w 3!) (* 7! hstripe)]\n(let min\n  (if (< blockw blockh)\n    (* 0.4! blockw)\n    (* 0.4! blockh))\n(let [outerLen innerLen] [10 4]\n(let block (rect \'#09096d\' x0 y0 blockw blockh)\n(let stripes\n  (map\n    (\\i (rect \'red\' x0 (+ y0 (* i hstripe)) w hstripe))\n    [0! 2! 4! 6! 8! 10! 12!])\n(let base (append stripes [block])\n;\n  (svg\n    (cons (rect \'white\' (- x0 10!) (- y0 10!) (+ w 20!) (+ h 20!))\n    (append base\n      (map (\\i\n         (nStar \'white\' \'none\' 0 pts innerLen outerLen\n           (rotate  i)\n           (+ (+ x0 (/ w 6!)) (* min (cos (rotate i))))\n           (+ (+ y0 (* hstripe 3.5!)) (* min (sin (rotate i))))))\n        (range ni nj))))))))))))))\n\n";
   var boxGrid = "\n; A grid of boxes that can be enlarged with a slider\n;\n; Specifies the overlaid slider\n(def xySlider_\n  (\\(dropBall roundInt xStart xEnd yStart yEnd minx maxx miny maxy xcaption ycaption curx cury)\n    (def [rCorner wEdge rBall] [4! 3! 10!])\n    (def [xDiff yDiff xValDiff yValDiff] [(- xEnd xStart) (- yEnd yStart) (- maxx minx) (- maxy miny)])\n    (def ballx (+ xStart (* xDiff (/ (- curx minx) xValDiff))))\n    (def bally (+ yStart (* yDiff (/ (- cury miny) yValDiff))))\n    (def ballx_ (clamp xStart xEnd ballx))\n    (def bally_ (clamp yStart yEnd bally))\n    (def rball_ (if dropBall (if (< maxx curx) 0 rBall) rBall))\n    (def rball__ (if dropBall (if (< maxy cury) 0 rball_) rBall))\n    (def xval\n      (def xval_ (clamp minx maxx curx))\n      (if roundInt (round xval_) xval_))\n    (def yval\n      (def yval_ (clamp miny maxy cury))\n      (if roundInt (round yval_) yval_))\n    (def shapes\n      [ (line \'black\' wEdge xStart yStart xEnd yStart)\n        (line \'black\' wEdge xStart yStart xStart yEnd)\n        (line \'black\' wEdge xStart yEnd xEnd yEnd)\n        (line \'black\' wEdge xEnd yStart xEnd yEnd)\n        (circle \'black\' xStart yStart rCorner)\n        (circle \'black\' xStart yEnd rCorner)\n        (circle \'black\' xEnd yStart rCorner)\n        (circle \'black\' xEnd yEnd rCorner)\n        (circle \'black\' ballx_ bally_ rball__)\n        (text (- (+ xStart (/ xDiff 2)) 40) (+ yEnd 20) (+ xcaption (toString xval)))\n        (text (+ xEnd 10) (+ yStart (/ yDiff 2)) (+ ycaption (toString yval))) ])\n  [ [ xval yval ] shapes ]))\n(def xySlider (xySlider_ false))\n;\n; Some overall variables\n(def [x0 y0 sep] [30! 30! 60!])\n;\n; The slider itself\n(def [ [ nx ny ] boxSlider ] \n  (xySlider true \n    (- x0 10!)\n    ;(+ x0 (* nx (* sep 50!))) \n    60000!\n    (- y0 10!) \n    ;(+ y0 (* ny (* sep 50!)))\n    60000!\n    0!\n    1000!\n    0!\n    1000!\n    \'\'\n    \'\'\n    3\n    2))\n;\n; Specifies the boxes in terms of the slider\n(svg \n  (append\n    (map\n      (\\[i j] (square_ (+ x0 (mult i sep)) (+ y0 (mult j sep)) 50!))\n      (cartProd (range 0! (- nx 1)) (range 0! (- ny 1))))\n    boxSlider))\n\n";
   var rgba = "\n;\n; A Color Picker\n; \n; Move the sliders to change the rgba\n; value of the circle!\n;\n(let [r_ g_ b_ a_] [22 74 237 0.5]\n;\n(let [r s1] (hSlider true 20! 420! 20! 0! 255! \'\' r_)\n(let [g s2] (hSlider true 20! 420! 50! 0! 255! \'\' g_)\n(let [b s3] (hSlider true 20! 420! 80! 0! 255! \'\' b_)\n(let [a s4] (hSlider false 20! 420! 110! 0.0! 1.0! \'\' a_)\n;\n(let ball (circle [r g b a] 220! 300! 100!)\n(let sliders (concat [s1 s2 s3 s4])\n;\n  (svg (cons ball sliders)))))))))\n\n";
   var xySlider = "\n; A two dimensional slider in a similar style to the other sliders\n(def xySlider_\n  (\\(dropBall roundInt xStart xEnd yStart yEnd minx maxx miny maxy xcaption ycaption curx cury)\n    (def [rCorner wEdge rBall] [4! 3! 10!])\n    (def [xDiff yDiff xValDiff yValDiff] [(- xEnd xStart) (- yEnd yStart) (- maxx minx) (- maxy miny)])\n    (def ballx (+ xStart (* xDiff (/ (- curx minx) xValDiff))))\n    (def bally (+ yStart (* yDiff (/ (- cury miny) yValDiff))))\n    (def ballx_ (clamp xStart xEnd ballx))\n    (def bally_ (clamp yStart yEnd bally))\n    (def rball_ (if dropBall (if (< maxx curx) 0 rBall) rBall))\n    (def rball__ (if dropBall (if (< maxy cury) 0 rball_) rBall))\n    (def xval\n      (def xval_ (clamp minx maxx curx))\n      (if roundInt (round xval_) xval_))\n    (def yval\n      (def yval_ (clamp miny maxy cury))\n      (if roundInt (round yval_) yval_))\n    (def shapes\n      [ (line \'black\' wEdge xStart yStart xEnd yStart)\n        (line \'black\' wEdge xStart yStart xStart yEnd)\n        (line \'black\' wEdge xStart yEnd xEnd yEnd)\n        (line \'black\' wEdge xEnd yStart xEnd yEnd)\n        (circle \'black\' xStart yStart rCorner)\n        (circle \'black\' xStart yEnd rCorner)\n        (circle \'black\' xEnd yStart rCorner)\n        (circle \'black\' xEnd yEnd rCorner)\n        (circle \'black\' ballx_ bally_ rball__)\n        (text (- (+ xStart (/ xDiff 2)) 40) (+ yEnd 20) (+ xcaption (toString xval)))\n        (text (+ xEnd 10) (+ yStart (/ yDiff 2)) (+ ycaption (toString yval))) ])\n  [ [ xval yval ] shapes ]))\n(def xySlider (xySlider_ false))\n(def [ [ a b ] slider ] (xySlider false 20! 420! 20! 420! 0! 100! 0! 100! \'X Axis: \' \'Y Axis: \' 20 20))\n(svg slider)\n\n";
   var widgets = "\n; library widgets\n;\n(let [n  s1] (hSlider false 20! 90!  20! 0! 5! \'n = \' 3.1415)\n(let [i  s2] (hSlider true  20! 90!  50! 0! 5! \'i = \' 3.1415)\n(let [b1 s3] (button        20!      80!       \'b1 = \' 0.25)\n(let [b2 s4] (button        20!     110!       \'b2 = \' 0.75)\n  (svg (concat [s1 s2 s3 s4]))))))\n\n";
   var buttons = "\n;\n(let button_ (\\(dropBall xStart y caption xCur)\n  (let [rPoint wLine rBall wSlider] [4! 3! 10! 70!]\n  (let xEnd (+ xStart wSlider)\n  (let xBall (+ xStart (* xCur wSlider))\n  (let xBall_ (clamp xStart xEnd xBall)\n  (let rBall_ (if dropBall (if (= xBall_ xBall) rBall 0) rBall)\n  (let val (< xCur 0.5)\n  (let shapes\n    [ (circle \'black\' xStart y rPoint)\n      (circle \'black\' xEnd y rPoint)\n      (line \'black\' wLine xStart y xEnd y)\n      (circle (if val \'darkgreen\' \'darkred\') xBall y rBall_)\n      (text (+ xEnd 10) (+ y 5) (+ caption (toString val))) ]\n  [val shapes]))))))))\n;\n(let [b b1] (button_ true 20! 20! \'b = \' 0.25)\n  (svg b1)))\n\n";
   var sliders = "\n;\n; The ni constants get adjusted by the sliders,\n; and then clamped to fit within the [min, max] range.\n; Also try changing the min and max constants below.\n;\n(let [min max] [0! 10!]\n(let [n1 n2 n3 n4] [5 5 5 5]\n(let [m1 m2 m3 m4] (map (clamp min max) [n1 n2 n3 n4])\n;\n; Both the horizontal and vertical slider abstractions\n; below take a dropBall parameter:\n;  - if true, the ball can slide off the rail;\n;  - if false, the ball disappears when off the rail.\n;\n(let horizSlider (\\(dropBall xStart xEnd y minVal maxVal curVal)\n  (let [rPoint wLine rBall] [4! 3! 10!]\n  (let [xDiff valDiff] [(- xEnd xStart) (- maxVal minVal)]\n  (let xBall (+ xStart (* xDiff (/ (- curVal minVal) valDiff)))\n  (let xBall_ (clamp xStart xEnd xBall)\n  (let rBall_ (if dropBall (if (= xBall_ xBall) rBall 0) rBall)\n    [ (circle \'black\' xStart y rPoint)\n      (circle \'black\' xEnd y rPoint)\n      (line \'black\' wLine xStart y xEnd y)\n      (circle \'black\' xBall y rBall_)\n    ]))))))\n;\n(let vertSlider (\\(dropBall yStart yEnd x minVal maxVal curVal)\n  (let [rPoint wLine rBall] [4! 3! 10!]\n  (let [yDiff valDiff] [(- yEnd yStart) (- maxVal minVal)]\n  (let yBall (+ yStart (* yDiff (/ (- curVal minVal) valDiff)))\n  (let yBall_ (clamp yStart yEnd yBall)\n  (let rBall_ (if dropBall (if (= yBall_ yBall) rBall 0) rBall)\n    [ (circle \'black\' x yStart rPoint)\n      (circle \'black\' x yEnd rPoint)\n      (line \'black\' wLine x yStart x yEnd)\n      (circle \'black\' x yBall rBall_)\n    ]))))))\n;\n(let sliders\n  (let s1 (horizSlider false 30! 230! 30! min max n1)\n  (let s2 (horizSlider true 30! 230! 70! min max n2)\n  (let s3 (vertSlider false 110! 300! 110! min max n3)\n  (let s4 (vertSlider true 110! 300! 150! min max n4)\n    (foldl append nil [s1 s2 s3 s4])))))\n;\n(let displays\n  (let t1 (text 300 100 (+ \'m1 = \' (toString m1)))\n  (let t2 (text 300 120 (+ \'m2 = \' (toString m2)))\n  (let t3 (text 300 140 (+ \'m3 = \' (toString m3)))\n  (let t4 (text 300 160 (+ \'m4 = \' (toString m4)))\n    [t1 t2 t3 t4]))))\n;\n  (svg (append sliders displays)))))))))\n\n";
   var stars = "\n;\n(let nStar (\\(fill stroke w n len1 len2 rot cx cy)\n  (let pti (\\[i len]\n    (let anglei (+ (- (/ (* i (pi)) n) rot) halfPi)\n    (let xi (+ cx (* len (cos anglei)))\n    (let yi (+ cy (neg (* len (sin anglei))))\n      [xi yi]))))\n  (let lengths\n    (map (\\b (if b len1 len2))\n         (concat (repeat n [true false])))\n  (let indices (list0N (- (* 2! n) 1!))\n    (polygon fill stroke w (map pti (zip indices lengths)))))))\n;\n(let [x0 y0 sep ni nj] [100 100 100 3! 7!]\n(let [outerLen innerLen] [50 20]\n(let iStar (\\i\n   (let off (mult (- i ni) sep)\n   (let [xi yi] [(+ x0 off) (+ y0 off)]\n   (nStar \'goldenrod\' \'black\' 3 i outerLen innerLen 0! xi yi))))\n;\n(svg (map iStar (range ni nj)))))))\n\n";
   var polygons = "\n(let ngon (\\(n cx cy len1 len2)\n  (let dangle (/ (* 3! (pi)) 2!)\n  (let anglei (\\i (+ dangle (/ (* i (* 2! (pi))) n)))\n  (let xi     (\\i (+ cx (* len1 (cos (anglei i)))))\n  (let yi     (\\i (+ cy (* len2 (sin (anglei i)))))\n  (let pti    (\\i [(xi i) (yi i)])\n  (let pts    (map pti (list0N (- n 1!)))\n    (polygon \'yellow\' \'maroon\' 4 pts))))))))\n(svg [\n  (ngon 3 100 200 40 40)\n  (ngon 4 200 200 30 30)\n  (ngon 5 300 300 50 50)\n  (ngon 7 300 100 40 40)\n  (ngon 15 100 400 40 40)\n]))\n\n";
   var rings = "\n(let [x0 y0 w r dx dy] [30 30 7 20 32 20]\n(let dxHalf (div dx 2)\n;\n(let row1\n  (map (\\[i c] (ring c w (+ x0 (mult i dx)) y0 r))\n       (zip [0 1 2] [\'blue\' \'black\' \'red\']))\n;\n(let row2\n  (map (\\[i c] (ring c w (+ (+ x0 dxHalf) (mult i dx)) (+ y0 dy) r))\n       (zip [0 1] [\'yellow\' \'green\']))\n;\n(svg (append row1 row2))))))\n\n";
   var botanic = "\n;\n; Logo: Chicago Botanic Garden\n;\n; Click \'Show Zones\' to see the control points for\n; the various Bezier curves.\n; \n(let [xOff yOff w h] [0! 0! 623 622]\n(let [xOut xcOut1 ycOut1 xcOut2 ycOut2 xcOut3 ycOut3] [292 40 141 97 202 23 24]\n(let [xMid yTip yMid xBud yBud] [320! 272 460 -51 272]\n(let left [[xMid yMid] [(- xMid xOut) yTip]]\n(let right [[xMid yMid] [(+ xMid xOut) yTip]]\n(let bud [[xMid (- yMid 92)] [(+ xMid xBud) yBud] [(- xMid xBud) yBud]]\n;\n(let makePath\n  (\\(c pts [xc1 yc1] [xc2 yc2])\n    (let offsetPts (map (\\[x y] [(+ x xOff) (+ y yOff)]) pts)\n    (let [[x0 y0] [x1 y1]] offsetPts\n    (let commands [\'M\' x0 y0 \'Q\' xc1 yc1 x1 y1 \'M\' x1 y1 \'Q\' xc2 yc2 x0 y0]\n      (path c \'black\' 0 commands)))))\n;\n(let makeArc\n  (\\(c pts [xc1 yc1] [xc2 yc2])\n    (let offsetPts (map (\\[x y] [(+ x xOff) (+ y yOff)]) pts)\n    (let [[x0 y0] [x1 y1] [x2 y2]] offsetPts\n    (let commands [\'M\' x0 y0 \'L\' x1 y1 \'A\' 45 45 0 0 1 x2 y2 \'L\' x2 y2 \'Z\']\n      (path c \'black\' 0 commands)))))\n;\n(let leftleaf\n  (makePath \'white\' left [(- xMid xcOut1) ycOut1] [(- xMid xcOut2) ycOut2])\n(let rightleaf\n  (makePath \'white\' right [(+ xMid xcOut1) ycOut1] [(+ xMid xcOut2) ycOut2])\n(let centerbud\n  (makeArc \'white\' bud [(+ xMid xcOut3) ycOut3] [(+ xMid xcOut3) ycOut3])\n;\n  (svg  [(rect \'#83F52C\' xOff yOff w h) leftleaf rightleaf centerbud]))))))))))))\n\n";
   var activeTrans = "\n;\n; Logo based on Active Transportation Alliance\n; (http://activetrans.org/)\n;\n; Possible ways to manipulate:\n; - Grab edge of city skyline and pull up and down\n; - Click \'Show Zones\' and mess with the curves at\n;     the bottom of the logo\n; - Toggle the color switch on the top left\n;\n(let [h] [0]\n(let grayPts\n  [[97 546]\n   [33 414]\n   [33! (+ h 153!)]\n   [53! (+ h 128!)]\n   [82! (+ h 135!)]\n   [83! (+ h 160!)]\n   [114! (+ h 149!)]\n   [113! (+ h 98!)]\n   [143! (+ h 82!)]\n   [158! (+ h 101!)]\n   [160! (+ h 46!)]\n   [192! (+ h 27!)]\n   [221! (+ h 56!)]\n   [227! (+ h 222!)]\n   [245! (+ h 224!)]\n   [246! (+ h 181!)]\n   [288! (+ h 156!)]\n   [286! (+ h 113!)]\n   [312! (+ h 88!)]\n   [374! (+ h 106!)]\n   [375! (+ h 155!)]\n   [397! (+ h 136!)]\n   [424! (+ h 145!)]\n   [425 207]]\n;\n(let greenPts [[247 663] [461 419] [466 230] [439 230] [178 614]]\n(let [grayctrl greenctrl] [[47 489] [451 542]]\n;\n(let [cGreen cGray] [\'#66CC66\' \'#505050\']\n(let [b buttonShapes] (button 20! 20! \'\' 0.25)\n(let [xOff yOff] [0! 0!]\n;\n(let groupBox (rect (if b \'transparent\' cGreen) xOff yOff 500! 700!)\n;\n(let makePath\n  (\\(color pts [xc yc])\n    (let offsetPts (map (\\[x y] [(+ x xOff) (+ y yOff)]) pts)\n    (let [[x0 y0] [x1 y1] | rest] offsetPts\n    (let commands\n      (append\n        (append [\'M\' x0 y0] [\'Q\' xc yc x1 y1])\n        (foldr (\\([xi yi] acc) (append [\'L\' xi yi] acc)) [\'Z\'] rest))\n      (path color \'black\' 0 commands)))))\n;\n(let grayPath (makePath (if b cGray \'white\') grayPts grayctrl)\n(let greenPath (makePath (if b cGreen \'white\') greenPts greenctrl)\n  (svg (append [groupBox grayPath greenPath] buttonShapes)))))))))))))\n\n";
   var elmLogo = "\n; Elm logo, based on:\n; https://github.com/evancz/elm-svg/blob/1.0.2/examples/Logo.elm\n;\n; Notice how the \'viewBox\' attribute puts the canvas in\n; \"full screen\" mode. Also, although we don\'t currently handle\n; rotations (i.e. \'transform\'s) specially, the resulting zone\n; is still useful; toggle the Zones option to see.\n;\n(let foo (\\(color pts) (polygon color \'black\' 0 pts))\n(svgViewBox 323.141 322.95 [\n  (foo \'#F0AD00\' [[161 152] [231 82] [91 82]])\n  (foo \'#7FD13B\' [[8 0] [79 70] [232 70] [161 0]])\n  (addAttr\n     (rect \'#7FD13B\' 192 107 107 108)\n     [\'transform\' \'matrix(0.7071 0.7071 -0.7071 0.7071 186.4727 -127.2386)\'])\n  (foo \'#60B5CC\' [[323 143] [323 0] [179 0]])\n  (foo \'#5A6378\' [[152 161] [0 8] [0 314]])\n  (foo \'#F0AD00\' [[255 246] [323 314] [323 178]])\n  (foo \'#60B5CC\' [[161 170] [8 323] [314 323]])\n]))\n\n";
   var logo = "\n; sketch-n-sketch logo\n;\n(let [x0 y0 w h delta] [50 50 200 200 10]\n(let [xw yh w2 h2] [(+ x0 w) (+ y0 h) (div w 2) (div h 2)]\n(let poly (\\pts (polygon \'black\' \'none\' 0 pts))\n(svg [\n  (rect \'white\' x0 y0 w h)\n  (poly\n    [[(+ x0 delta) y0]\n     [xw y0]\n     [xw (- yh delta)]])\n  (poly\n    [[x0 (+ y0 delta)]\n     [x0 (- yh delta)]\n     [(- (+ x0 w2) delta) (+ y0 h2)]])\n  (poly\n    [[(+ x0 delta) yh]\n     [(- xw delta) yh]\n     [(+ x0 w2) (+ (+ y0 h2) delta)]])\n]))))\n\n";
   var sixBoxesB = "\n; x-spacing is controlled by xsep, y-spacing by ysep.\n;\n(let [x0 y0 xsep ysep] [10 28 60 60]\n(svg\n  (map (\\[i j] (square_ (+ x0 (mult i xsep)) (+ y0 (mult j ysep)) 50))\n       (cartProd [0 1 2] [0 1]))))\n\n";
   var sixBoxesA = "\n; Both x- and y-spacing is controlled by sep.\n;\n(let [x0 y0 sep] [10 28 60]\n(svg\n  (map (\\[i j] (square_ (+ x0 (mult i sep)) (+ y0 (mult j sep)) 50))\n       (cartProd [0 1 2] [0 1]))))\n\n";
   var threeBoxes = "\n(def threeBoxesInt\n  (let [x0 y0 w h sep] [40 28 60 130 110]\n  (let boxi (\\i\n    (let xi (+ x0 (mult i sep))\n    (rect \'lightblue\' xi y0 w h)))\n  (svg (map boxi [0 1 2])))))\n;\nthreeBoxesInt\n\n";
   var scratch = "\n;\n; Write a little program below.\n; Or choose an example from the list.\n;\n; Changes to this *Scratch* example will be saved and\n; restored when navigating to and from other examples.\n; For the remaining named examples, changes will be\n; discarded when choosing a different example.\n;\n(svg [(rect \'maroon\' 100 15 200 50)])\n\n";
   var scratchName = "*Scratch*";
   var makeExample = F2(function (name,
   s) {
      return function () {
         var thunk = function (_v0) {
            return function () {
               switch (_v0.ctor)
               {case "_Tuple0":
                  return function () {
                       var e = $Utils.fromOk_($LangParser.parseE(s));
                       var v = $Eval.run(e);
                       return {_: {},e: e,v: v};
                    }();}
               _U.badCase($moduleName,
               "between lines 11 and 13");
            }();
         };
         return {ctor: "_Tuple2"
                ,_0: name
                ,_1: thunk};
      }();
   });
   var examples = _L.fromArray([A2(makeExample,
                               scratchName,
                               scratch)
                               ,A2(makeExample,
                               "3 Boxes",
                               threeBoxes)
                               ,A2(makeExample,
                               "6 Boxes A",
                               sixBoxesA)
                               ,A2(makeExample,
                               "6 Boxes B",
                               sixBoxesB)
                               ,A2(makeExample,"Logo",logo)
                               ,A2(makeExample,
                               "Elm Logo",
                               elmLogo)
                               ,A2(makeExample,
                               "Active Trans Logo",
                               activeTrans)
                               ,A2(makeExample,
                               "Botanic Garden Logo",
                               botanic)
                               ,A2(makeExample,"Rings",rings)
                               ,A2(makeExample,
                               "Polygons",
                               polygons)
                               ,A2(makeExample,"Stars",stars)
                               ,A2(makeExample,"Clique",clique)
                               ,A2(makeExample,
                               "Sliders",
                               sliders)
                               ,A2(makeExample,
                               "Buttons",
                               buttons)
                               ,A2(makeExample,
                               "Widgets",
                               widgets)
                               ,A2(makeExample,
                               "xySlider",
                               xySlider)
                               ,A2(makeExample,
                               "Color Picker",
                               rgba)
                               ,A2(makeExample,
                               "Box Grid",
                               boxGrid)
                               ,A2(makeExample,
                               "Chicago Flag",
                               chicago)
                               ,A2(makeExample,
                               "US-13 Flag",
                               usFlag13)
                               ,A2(makeExample,
                               "US-50 Flag",
                               usFlag50)
                               ,A2(makeExample,
                               "French Sudan Flag",
                               frenchSudan)
                               ,A2(makeExample,
                               "Frank Lloyd Wright",
                               flw1)
                               ,A2(makeExample,
                               "Frank Lloyd Wright B",
                               flw2)
                               ,A2(makeExample,
                               "Ferris Wheel",
                               ferris)
                               ,A2(makeExample,
                               "Pie Chart",
                               pieChart1)
                               ,A2(makeExample,
                               "Solar System",
                               solarSystem)
                               ,A2(makeExample,
                               "Fractal Tree",
                               fractalTree)
                               ,A2(makeExample,
                               "Stick Figures",
                               stickFigures)
                               ,A2(makeExample,
                               "Sailboat",
                               sailBoat)
                               ,A2(makeExample,
                               "Cult of Lambda",
                               cultOfLambda)
                               ,A2(makeExample,
                               "Misc Shapes",
                               miscShapes)
                               ,A2(makeExample,
                               "Paths 1",
                               paths1)
                               ,A2(makeExample,
                               "Paths 2",
                               paths2)
                               ,A2(makeExample,
                               "Paths 3",
                               paths3)
                               ,A2(makeExample,
                               "Paths 4",
                               paths4)
                               ,A2(makeExample,
                               "Paths 5",
                               paths5)]);
   var list = examples;
   _elm.ExamplesGenerated.values = {_op: _op
                                   ,list: list
                                   ,scratchName: scratchName
                                   ,scratch: scratch};
   return _elm.ExamplesGenerated.values;
};
Elm.Graphics = Elm.Graphics || {};
Elm.Graphics.Collage = Elm.Graphics.Collage || {};
Elm.Graphics.Collage.make = function (_elm) {
   "use strict";
   _elm.Graphics = _elm.Graphics || {};
   _elm.Graphics.Collage = _elm.Graphics.Collage || {};
   if (_elm.Graphics.Collage.values)
   return _elm.Graphics.Collage.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Graphics.Collage",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Native$Graphics$Collage = Elm.Native.Graphics.Collage.make(_elm),
   $Text = Elm.Text.make(_elm),
   $Transform2D = Elm.Transform2D.make(_elm);
   var ngon = F2(function (n,r) {
      return function () {
         var m = $Basics.toFloat(n);
         var t = 2 * $Basics.pi / m;
         var f = function (i) {
            return {ctor: "_Tuple2"
                   ,_0: r * $Basics.cos(t * i)
                   ,_1: r * $Basics.sin(t * i)};
         };
         return A2($List.map,
         f,
         _L.range(0,m - 1));
      }();
   });
   var oval = F2(function (w,h) {
      return function () {
         var hh = h / 2;
         var hw = w / 2;
         var n = 50;
         var t = 2 * $Basics.pi / n;
         var f = function (i) {
            return {ctor: "_Tuple2"
                   ,_0: hw * $Basics.cos(t * i)
                   ,_1: hh * $Basics.sin(t * i)};
         };
         return A2($List.map,
         f,
         _L.range(0,n - 1));
      }();
   });
   var circle = function (r) {
      return A2(oval,2 * r,2 * r);
   };
   var rect = F2(function (w,h) {
      return function () {
         var hh = h / 2;
         var hw = w / 2;
         return _L.fromArray([{ctor: "_Tuple2"
                              ,_0: 0 - hw
                              ,_1: 0 - hh}
                             ,{ctor: "_Tuple2"
                              ,_0: 0 - hw
                              ,_1: hh}
                             ,{ctor: "_Tuple2",_0: hw,_1: hh}
                             ,{ctor: "_Tuple2"
                              ,_0: hw
                              ,_1: 0 - hh}]);
      }();
   });
   var square = function (n) {
      return A2(rect,n,n);
   };
   var polygon = function (points) {
      return points;
   };
   var segment = F2(function (p1,
   p2) {
      return _L.fromArray([p1,p2]);
   });
   var path = function (ps) {
      return ps;
   };
   var collage = $Native$Graphics$Collage.collage;
   var alpha = F2(function (a,f) {
      return _U.replace([["alpha"
                         ,a]],
      f);
   });
   var rotate = F2(function (t,f) {
      return _U.replace([["theta"
                         ,f.theta + t]],
      f);
   });
   var scale = F2(function (s,f) {
      return _U.replace([["scale"
                         ,f.scale * s]],
      f);
   });
   var moveY = F2(function (y,f) {
      return _U.replace([["y"
                         ,f.y + y]],
      f);
   });
   var moveX = F2(function (x,f) {
      return _U.replace([["x"
                         ,f.x + x]],
      f);
   });
   var move = F2(function (_v0,f) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return _U.replace([["x"
                               ,f.x + _v0._0]
                              ,["y",f.y + _v0._1]],
              f);}
         _U.badCase($moduleName,
         "on line 226, column 7 to 35");
      }();
   });
   var form = function (f) {
      return {_: {}
             ,alpha: 1
             ,form: f
             ,scale: 1
             ,theta: 0
             ,x: 0
             ,y: 0};
   };
   var Fill = function (a) {
      return {ctor: "Fill",_0: a};
   };
   var Line = function (a) {
      return {ctor: "Line",_0: a};
   };
   var FGroup = F2(function (a,b) {
      return {ctor: "FGroup"
             ,_0: a
             ,_1: b};
   });
   var group = function (fs) {
      return form(A2(FGroup,
      $Transform2D.identity,
      fs));
   };
   var groupTransform = F2(function (matrix,
   fs) {
      return form(A2(FGroup,
      matrix,
      fs));
   });
   var FElement = function (a) {
      return {ctor: "FElement"
             ,_0: a};
   };
   var toForm = function (e) {
      return form(FElement(e));
   };
   var FImage = F4(function (a,
   b,
   c,
   d) {
      return {ctor: "FImage"
             ,_0: a
             ,_1: b
             ,_2: c
             ,_3: d};
   });
   var sprite = F4(function (w,
   h,
   pos,
   src) {
      return form(A4(FImage,
      w,
      h,
      pos,
      src));
   });
   var FText = function (a) {
      return {ctor: "FText",_0: a};
   };
   var text = function (t) {
      return form(FText(t));
   };
   var FOutlinedText = F2(function (a,
   b) {
      return {ctor: "FOutlinedText"
             ,_0: a
             ,_1: b};
   });
   var outlinedText = F2(function (ls,
   t) {
      return form(A2(FOutlinedText,
      ls,
      t));
   });
   var FShape = F2(function (a,b) {
      return {ctor: "FShape"
             ,_0: a
             ,_1: b};
   });
   var fill = F2(function (style,
   shape) {
      return form(A2(FShape,
      Fill(style),
      shape));
   });
   var outlined = F2(function (style,
   shape) {
      return form(A2(FShape,
      Line(style),
      shape));
   });
   var FPath = F2(function (a,b) {
      return {ctor: "FPath"
             ,_0: a
             ,_1: b};
   });
   var traced = F2(function (style,
   path) {
      return form(A2(FPath,
      style,
      path));
   });
   var LineStyle = F6(function (a,
   b,
   c,
   d,
   e,
   f) {
      return {_: {}
             ,cap: c
             ,color: a
             ,dashOffset: f
             ,dashing: e
             ,join: d
             ,width: b};
   });
   var Clipped = {ctor: "Clipped"};
   var Sharp = function (a) {
      return {ctor: "Sharp",_0: a};
   };
   var Smooth = {ctor: "Smooth"};
   var Padded = {ctor: "Padded"};
   var Round = {ctor: "Round"};
   var Flat = {ctor: "Flat"};
   var defaultLine = {_: {}
                     ,cap: Flat
                     ,color: $Color.black
                     ,dashOffset: 0
                     ,dashing: _L.fromArray([])
                     ,join: Sharp(10)
                     ,width: 1};
   var solid = function (clr) {
      return _U.replace([["color"
                         ,clr]],
      defaultLine);
   };
   var dashed = function (clr) {
      return _U.replace([["color"
                         ,clr]
                        ,["dashing"
                         ,_L.fromArray([8,4])]],
      defaultLine);
   };
   var dotted = function (clr) {
      return _U.replace([["color"
                         ,clr]
                        ,["dashing"
                         ,_L.fromArray([3,3])]],
      defaultLine);
   };
   var Grad = function (a) {
      return {ctor: "Grad",_0: a};
   };
   var gradient = F2(function (grad,
   shape) {
      return A2(fill,
      Grad(grad),
      shape);
   });
   var Texture = function (a) {
      return {ctor: "Texture"
             ,_0: a};
   };
   var textured = F2(function (src,
   shape) {
      return A2(fill,
      Texture(src),
      shape);
   });
   var Solid = function (a) {
      return {ctor: "Solid",_0: a};
   };
   var filled = F2(function (color,
   shape) {
      return A2(fill,
      Solid(color),
      shape);
   });
   var Form = F6(function (a,
   b,
   c,
   d,
   e,
   f) {
      return {_: {}
             ,alpha: e
             ,form: f
             ,scale: b
             ,theta: a
             ,x: c
             ,y: d};
   });
   _elm.Graphics.Collage.values = {_op: _op
                                  ,collage: collage
                                  ,toForm: toForm
                                  ,filled: filled
                                  ,textured: textured
                                  ,gradient: gradient
                                  ,outlined: outlined
                                  ,traced: traced
                                  ,text: text
                                  ,outlinedText: outlinedText
                                  ,move: move
                                  ,moveX: moveX
                                  ,moveY: moveY
                                  ,scale: scale
                                  ,rotate: rotate
                                  ,alpha: alpha
                                  ,group: group
                                  ,groupTransform: groupTransform
                                  ,rect: rect
                                  ,oval: oval
                                  ,square: square
                                  ,circle: circle
                                  ,ngon: ngon
                                  ,polygon: polygon
                                  ,segment: segment
                                  ,path: path
                                  ,solid: solid
                                  ,dashed: dashed
                                  ,dotted: dotted
                                  ,defaultLine: defaultLine
                                  ,Form: Form
                                  ,LineStyle: LineStyle
                                  ,Flat: Flat
                                  ,Round: Round
                                  ,Padded: Padded
                                  ,Smooth: Smooth
                                  ,Sharp: Sharp
                                  ,Clipped: Clipped};
   return _elm.Graphics.Collage.values;
};
Elm.Graphics = Elm.Graphics || {};
Elm.Graphics.Element = Elm.Graphics.Element || {};
Elm.Graphics.Element.make = function (_elm) {
   "use strict";
   _elm.Graphics = _elm.Graphics || {};
   _elm.Graphics.Element = _elm.Graphics.Element || {};
   if (_elm.Graphics.Element.values)
   return _elm.Graphics.Element.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Graphics.Element",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Native$Graphics$Element = Elm.Native.Graphics.Element.make(_elm),
   $Text = Elm.Text.make(_elm);
   var DOut = {ctor: "DOut"};
   var outward = DOut;
   var DIn = {ctor: "DIn"};
   var inward = DIn;
   var DRight = {ctor: "DRight"};
   var right = DRight;
   var DLeft = {ctor: "DLeft"};
   var left = DLeft;
   var DDown = {ctor: "DDown"};
   var down = DDown;
   var DUp = {ctor: "DUp"};
   var up = DUp;
   var Position = F4(function (a,
   b,
   c,
   d) {
      return {_: {}
             ,horizontal: a
             ,vertical: b
             ,x: c
             ,y: d};
   });
   var Relative = function (a) {
      return {ctor: "Relative"
             ,_0: a};
   };
   var relative = Relative;
   var Absolute = function (a) {
      return {ctor: "Absolute"
             ,_0: a};
   };
   var absolute = Absolute;
   var N = {ctor: "N"};
   var bottomLeftAt = F2(function (x,
   y) {
      return {_: {}
             ,horizontal: N
             ,vertical: N
             ,x: x
             ,y: y};
   });
   var Z = {ctor: "Z"};
   var middle = {_: {}
                ,horizontal: Z
                ,vertical: Z
                ,x: Relative(0.5)
                ,y: Relative(0.5)};
   var midLeft = _U.replace([["horizontal"
                             ,N]
                            ,["x",Absolute(0)]],
   middle);
   var middleAt = F2(function (x,
   y) {
      return {_: {}
             ,horizontal: Z
             ,vertical: Z
             ,x: x
             ,y: y};
   });
   var midLeftAt = F2(function (x,
   y) {
      return {_: {}
             ,horizontal: N
             ,vertical: Z
             ,x: x
             ,y: y};
   });
   var midBottomAt = F2(function (x,
   y) {
      return {_: {}
             ,horizontal: Z
             ,vertical: N
             ,x: x
             ,y: y};
   });
   var P = {ctor: "P"};
   var topLeft = {_: {}
                 ,horizontal: N
                 ,vertical: P
                 ,x: Absolute(0)
                 ,y: Absolute(0)};
   var bottomLeft = _U.replace([["vertical"
                                ,N]],
   topLeft);
   var topRight = _U.replace([["horizontal"
                              ,P]],
   topLeft);
   var bottomRight = _U.replace([["horizontal"
                                 ,P]],
   bottomLeft);
   var midRight = _U.replace([["horizontal"
                              ,P]],
   midLeft);
   var midTop = _U.replace([["vertical"
                            ,P]
                           ,["y",Absolute(0)]],
   middle);
   var midBottom = _U.replace([["vertical"
                               ,N]],
   midTop);
   var topLeftAt = F2(function (x,
   y) {
      return {_: {}
             ,horizontal: N
             ,vertical: P
             ,x: x
             ,y: y};
   });
   var topRightAt = F2(function (x,
   y) {
      return {_: {}
             ,horizontal: P
             ,vertical: P
             ,x: x
             ,y: y};
   });
   var bottomRightAt = F2(function (x,
   y) {
      return {_: {}
             ,horizontal: P
             ,vertical: N
             ,x: x
             ,y: y};
   });
   var midRightAt = F2(function (x,
   y) {
      return {_: {}
             ,horizontal: P
             ,vertical: Z
             ,x: x
             ,y: y};
   });
   var midTopAt = F2(function (x,
   y) {
      return {_: {}
             ,horizontal: Z
             ,vertical: P
             ,x: x
             ,y: y};
   });
   var justified = $Native$Graphics$Element.block("justify");
   var centered = $Native$Graphics$Element.block("center");
   var rightAligned = $Native$Graphics$Element.block("right");
   var leftAligned = $Native$Graphics$Element.block("left");
   var show = function (value) {
      return leftAligned($Text.monospace($Text.fromString($Basics.toString(value))));
   };
   var Tiled = {ctor: "Tiled"};
   var Cropped = function (a) {
      return {ctor: "Cropped"
             ,_0: a};
   };
   var Fitted = {ctor: "Fitted"};
   var Plain = {ctor: "Plain"};
   var Custom = {ctor: "Custom"};
   var RawHtml = {ctor: "RawHtml"};
   var Spacer = {ctor: "Spacer"};
   var Flow = F2(function (a,b) {
      return {ctor: "Flow"
             ,_0: a
             ,_1: b};
   });
   var Container = F2(function (a,
   b) {
      return {ctor: "Container"
             ,_0: a
             ,_1: b};
   });
   var Image = F4(function (a,
   b,
   c,
   d) {
      return {ctor: "Image"
             ,_0: a
             ,_1: b
             ,_2: c
             ,_3: d};
   });
   var newElement = $Native$Graphics$Element.newElement;
   var image = F3(function (w,
   h,
   src) {
      return A3(newElement,
      w,
      h,
      A4(Image,Plain,w,h,src));
   });
   var fittedImage = F3(function (w,
   h,
   src) {
      return A3(newElement,
      w,
      h,
      A4(Image,Fitted,w,h,src));
   });
   var croppedImage = F4(function (pos,
   w,
   h,
   src) {
      return A3(newElement,
      w,
      h,
      A4(Image,Cropped(pos),w,h,src));
   });
   var tiledImage = F3(function (w,
   h,
   src) {
      return A3(newElement,
      w,
      h,
      A4(Image,Tiled,w,h,src));
   });
   var container = F4(function (w,
   h,
   pos,
   e) {
      return A3(newElement,
      w,
      h,
      A2(Container,pos,e));
   });
   var spacer = F2(function (w,h) {
      return A3(newElement,
      w,
      h,
      Spacer);
   });
   var link = F2(function (href,
   e) {
      return function () {
         var p = e.props;
         return {_: {}
                ,element: e.element
                ,props: _U.replace([["href"
                                    ,href]],
                p)};
      }();
   });
   var tag = F2(function (name,e) {
      return function () {
         var p = e.props;
         return {_: {}
                ,element: e.element
                ,props: _U.replace([["tag"
                                    ,name]],
                p)};
      }();
   });
   var color = F2(function (c,e) {
      return function () {
         var p = e.props;
         return {_: {}
                ,element: e.element
                ,props: _U.replace([["color"
                                    ,$Maybe.Just(c)]],
                p)};
      }();
   });
   var opacity = F2(function (o,
   e) {
      return function () {
         var p = e.props;
         return {_: {}
                ,element: e.element
                ,props: _U.replace([["opacity"
                                    ,o]],
                p)};
      }();
   });
   var height = F2(function (nh,
   e) {
      return function () {
         var p = e.props;
         var props = function () {
            var _v0 = e.element;
            switch (_v0.ctor)
            {case "Image":
               return _U.replace([["width"
                                  ,$Basics.round($Basics.toFloat(_v0._1) / $Basics.toFloat(_v0._2) * $Basics.toFloat(nh))]],
                 p);}
            return p;
         }();
         return {_: {}
                ,element: e.element
                ,props: _U.replace([["height"
                                    ,nh]],
                p)};
      }();
   });
   var width = F2(function (nw,e) {
      return function () {
         var p = e.props;
         var props = function () {
            var _v5 = e.element;
            switch (_v5.ctor)
            {case "Image":
               return _U.replace([["height"
                                  ,$Basics.round($Basics.toFloat(_v5._2) / $Basics.toFloat(_v5._1) * $Basics.toFloat(nw))]],
                 p);
               case "RawHtml":
               return _U.replace([["height"
                                  ,$Basics.snd(A2($Native$Graphics$Element.htmlHeight,
                                  nw,
                                  e.element))]],
                 p);}
            return p;
         }();
         return {_: {}
                ,element: e.element
                ,props: _U.replace([["width"
                                    ,nw]],
                props)};
      }();
   });
   var size = F3(function (w,h,e) {
      return A2(height,
      h,
      A2(width,w,e));
   });
   var sizeOf = function (e) {
      return {ctor: "_Tuple2"
             ,_0: e.props.width
             ,_1: e.props.height};
   };
   var heightOf = function (e) {
      return e.props.height;
   };
   var widthOf = function (e) {
      return e.props.width;
   };
   var above = F2(function (hi,
   lo) {
      return A3(newElement,
      A2($Basics.max,
      widthOf(hi),
      widthOf(lo)),
      heightOf(hi) + heightOf(lo),
      A2(Flow,
      DDown,
      _L.fromArray([hi,lo])));
   });
   var below = F2(function (lo,
   hi) {
      return A3(newElement,
      A2($Basics.max,
      widthOf(hi),
      widthOf(lo)),
      heightOf(hi) + heightOf(lo),
      A2(Flow,
      DDown,
      _L.fromArray([hi,lo])));
   });
   var beside = F2(function (lft,
   rht) {
      return A3(newElement,
      widthOf(lft) + widthOf(rht),
      A2($Basics.max,
      heightOf(lft),
      heightOf(rht)),
      A2(Flow,
      right,
      _L.fromArray([lft,rht])));
   });
   var layers = function (es) {
      return function () {
         var hs = A2($List.map,
         heightOf,
         es);
         var ws = A2($List.map,
         widthOf,
         es);
         return A3(newElement,
         A2($Maybe.withDefault,
         0,
         $List.maximum(ws)),
         A2($Maybe.withDefault,
         0,
         $List.maximum(hs)),
         A2(Flow,DOut,es));
      }();
   };
   var empty = A2(spacer,0,0);
   var flow = F2(function (dir,
   es) {
      return function () {
         var newFlow = F2(function (w,
         h) {
            return A3(newElement,
            w,
            h,
            A2(Flow,dir,es));
         });
         var maxOrZero = function (list) {
            return A2($Maybe.withDefault,
            0,
            $List.maximum(list));
         };
         var hs = A2($List.map,
         heightOf,
         es);
         var ws = A2($List.map,
         widthOf,
         es);
         return _U.eq(es,
         _L.fromArray([])) ? empty : function () {
            switch (dir.ctor)
            {case "DDown":
               return A2(newFlow,
                 maxOrZero(ws),
                 $List.sum(hs));
               case "DIn": return A2(newFlow,
                 maxOrZero(ws),
                 maxOrZero(hs));
               case "DLeft": return A2(newFlow,
                 $List.sum(ws),
                 maxOrZero(hs));
               case "DOut": return A2(newFlow,
                 maxOrZero(ws),
                 maxOrZero(hs));
               case "DRight":
               return A2(newFlow,
                 $List.sum(ws),
                 maxOrZero(hs));
               case "DUp": return A2(newFlow,
                 maxOrZero(ws),
                 $List.sum(hs));}
            _U.badCase($moduleName,
            "between lines 362 and 373");
         }();
      }();
   });
   var Properties = F9(function (a,
   b,
   c,
   d,
   e,
   f,
   g,
   h,
   i) {
      return {_: {}
             ,click: i
             ,color: e
             ,height: c
             ,hover: h
             ,href: f
             ,id: a
             ,opacity: d
             ,tag: g
             ,width: b};
   });
   var Element = F2(function (a,
   b) {
      return {_: {}
             ,element: b
             ,props: a};
   });
   _elm.Graphics.Element.values = {_op: _op
                                  ,image: image
                                  ,fittedImage: fittedImage
                                  ,croppedImage: croppedImage
                                  ,tiledImage: tiledImage
                                  ,leftAligned: leftAligned
                                  ,rightAligned: rightAligned
                                  ,centered: centered
                                  ,justified: justified
                                  ,show: show
                                  ,width: width
                                  ,height: height
                                  ,size: size
                                  ,color: color
                                  ,opacity: opacity
                                  ,link: link
                                  ,tag: tag
                                  ,widthOf: widthOf
                                  ,heightOf: heightOf
                                  ,sizeOf: sizeOf
                                  ,flow: flow
                                  ,up: up
                                  ,down: down
                                  ,left: left
                                  ,right: right
                                  ,inward: inward
                                  ,outward: outward
                                  ,layers: layers
                                  ,above: above
                                  ,below: below
                                  ,beside: beside
                                  ,empty: empty
                                  ,spacer: spacer
                                  ,container: container
                                  ,middle: middle
                                  ,midTop: midTop
                                  ,midBottom: midBottom
                                  ,midLeft: midLeft
                                  ,midRight: midRight
                                  ,topLeft: topLeft
                                  ,topRight: topRight
                                  ,bottomLeft: bottomLeft
                                  ,bottomRight: bottomRight
                                  ,absolute: absolute
                                  ,relative: relative
                                  ,middleAt: middleAt
                                  ,midTopAt: midTopAt
                                  ,midBottomAt: midBottomAt
                                  ,midLeftAt: midLeftAt
                                  ,midRightAt: midRightAt
                                  ,topLeftAt: topLeftAt
                                  ,topRightAt: topRightAt
                                  ,bottomLeftAt: bottomLeftAt
                                  ,bottomRightAt: bottomRightAt
                                  ,Element: Element
                                  ,Position: Position};
   return _elm.Graphics.Element.values;
};
Elm.Graphics = Elm.Graphics || {};
Elm.Graphics.Input = Elm.Graphics.Input || {};
Elm.Graphics.Input.make = function (_elm) {
   "use strict";
   _elm.Graphics = _elm.Graphics || {};
   _elm.Graphics.Input = _elm.Graphics.Input || {};
   if (_elm.Graphics.Input.values)
   return _elm.Graphics.Input.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Graphics.Input",
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Native$Graphics$Input = Elm.Native.Graphics.Input.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var clickable = $Native$Graphics$Input.clickable;
   var hoverable = $Native$Graphics$Input.hoverable;
   var dropDown = $Native$Graphics$Input.dropDown;
   var checkbox = $Native$Graphics$Input.checkbox;
   var customButton = $Native$Graphics$Input.customButton;
   var button = $Native$Graphics$Input.button;
   _elm.Graphics.Input.values = {_op: _op
                                ,button: button
                                ,customButton: customButton
                                ,checkbox: checkbox
                                ,dropDown: dropDown
                                ,hoverable: hoverable
                                ,clickable: clickable};
   return _elm.Graphics.Input.values;
};
Elm.Html = Elm.Html || {};
Elm.Html.make = function (_elm) {
   "use strict";
   _elm.Html = _elm.Html || {};
   if (_elm.Html.values)
   return _elm.Html.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Html",
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $VirtualDom = Elm.VirtualDom.make(_elm);
   var fromElement = $VirtualDom.fromElement;
   var toElement = $VirtualDom.toElement;
   var text = $VirtualDom.text;
   var node = $VirtualDom.node;
   var body = node("body");
   var section = node("section");
   var nav = node("nav");
   var article = node("article");
   var aside = node("aside");
   var h1 = node("h1");
   var h2 = node("h2");
   var h3 = node("h3");
   var h4 = node("h4");
   var h5 = node("h5");
   var h6 = node("h6");
   var header = node("header");
   var footer = node("footer");
   var address = node("address");
   var main$ = node("main");
   var p = node("p");
   var hr = node("hr");
   var pre = node("pre");
   var blockquote = node("blockquote");
   var ol = node("ol");
   var ul = node("ul");
   var li = node("li");
   var dl = node("dl");
   var dt = node("dt");
   var dd = node("dd");
   var figure = node("figure");
   var figcaption = node("figcaption");
   var div = node("div");
   var a = node("a");
   var em = node("em");
   var strong = node("strong");
   var small = node("small");
   var s = node("s");
   var cite = node("cite");
   var q = node("q");
   var dfn = node("dfn");
   var abbr = node("abbr");
   var time = node("time");
   var code = node("code");
   var $var = node("var");
   var samp = node("samp");
   var kbd = node("kbd");
   var sub = node("sub");
   var sup = node("sup");
   var i = node("i");
   var b = node("b");
   var u = node("u");
   var mark = node("mark");
   var ruby = node("ruby");
   var rt = node("rt");
   var rp = node("rp");
   var bdi = node("bdi");
   var bdo = node("bdo");
   var span = node("span");
   var br = node("br");
   var wbr = node("wbr");
   var ins = node("ins");
   var del = node("del");
   var img = node("img");
   var iframe = node("iframe");
   var embed = node("embed");
   var object = node("object");
   var param = node("param");
   var video = node("video");
   var audio = node("audio");
   var source = node("source");
   var track = node("track");
   var canvas = node("canvas");
   var svg = node("svg");
   var math = node("math");
   var table = node("table");
   var caption = node("caption");
   var colgroup = node("colgroup");
   var col = node("col");
   var tbody = node("tbody");
   var thead = node("thead");
   var tfoot = node("tfoot");
   var tr = node("tr");
   var td = node("td");
   var th = node("th");
   var form = node("form");
   var fieldset = node("fieldset");
   var legend = node("legend");
   var label = node("label");
   var input = node("input");
   var button = node("button");
   var select = node("select");
   var datalist = node("datalist");
   var optgroup = node("optgroup");
   var option = node("option");
   var textarea = node("textarea");
   var keygen = node("keygen");
   var output = node("output");
   var progress = node("progress");
   var meter = node("meter");
   var details = node("details");
   var summary = node("summary");
   var menuitem = node("menuitem");
   var menu = node("menu");
   _elm.Html.values = {_op: _op
                      ,node: node
                      ,text: text
                      ,toElement: toElement
                      ,fromElement: fromElement
                      ,body: body
                      ,section: section
                      ,nav: nav
                      ,article: article
                      ,aside: aside
                      ,h1: h1
                      ,h2: h2
                      ,h3: h3
                      ,h4: h4
                      ,h5: h5
                      ,h6: h6
                      ,header: header
                      ,footer: footer
                      ,address: address
                      ,main$: main$
                      ,p: p
                      ,hr: hr
                      ,pre: pre
                      ,blockquote: blockquote
                      ,ol: ol
                      ,ul: ul
                      ,li: li
                      ,dl: dl
                      ,dt: dt
                      ,dd: dd
                      ,figure: figure
                      ,figcaption: figcaption
                      ,div: div
                      ,a: a
                      ,em: em
                      ,strong: strong
                      ,small: small
                      ,s: s
                      ,cite: cite
                      ,q: q
                      ,dfn: dfn
                      ,abbr: abbr
                      ,time: time
                      ,code: code
                      ,$var: $var
                      ,samp: samp
                      ,kbd: kbd
                      ,sub: sub
                      ,sup: sup
                      ,i: i
                      ,b: b
                      ,u: u
                      ,mark: mark
                      ,ruby: ruby
                      ,rt: rt
                      ,rp: rp
                      ,bdi: bdi
                      ,bdo: bdo
                      ,span: span
                      ,br: br
                      ,wbr: wbr
                      ,ins: ins
                      ,del: del
                      ,img: img
                      ,iframe: iframe
                      ,embed: embed
                      ,object: object
                      ,param: param
                      ,video: video
                      ,audio: audio
                      ,source: source
                      ,track: track
                      ,canvas: canvas
                      ,svg: svg
                      ,math: math
                      ,table: table
                      ,caption: caption
                      ,colgroup: colgroup
                      ,col: col
                      ,tbody: tbody
                      ,thead: thead
                      ,tfoot: tfoot
                      ,tr: tr
                      ,td: td
                      ,th: th
                      ,form: form
                      ,fieldset: fieldset
                      ,legend: legend
                      ,label: label
                      ,input: input
                      ,button: button
                      ,select: select
                      ,datalist: datalist
                      ,optgroup: optgroup
                      ,option: option
                      ,textarea: textarea
                      ,keygen: keygen
                      ,output: output
                      ,progress: progress
                      ,meter: meter
                      ,details: details
                      ,summary: summary
                      ,menuitem: menuitem
                      ,menu: menu};
   return _elm.Html.values;
};
Elm.Html = Elm.Html || {};
Elm.Html.Attributes = Elm.Html.Attributes || {};
Elm.Html.Attributes.make = function (_elm) {
   "use strict";
   _elm.Html = _elm.Html || {};
   _elm.Html.Attributes = _elm.Html.Attributes || {};
   if (_elm.Html.Attributes.values)
   return _elm.Html.Attributes.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Html.Attributes",
   $Basics = Elm.Basics.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Json$Encode = Elm.Json.Encode.make(_elm),
   $List = Elm.List.make(_elm),
   $String = Elm.String.make(_elm),
   $VirtualDom = Elm.VirtualDom.make(_elm);
   var attribute = $VirtualDom.attribute;
   var property = $VirtualDom.property;
   var stringProperty = F2(function (name,
   string) {
      return A2(property,
      name,
      $Json$Encode.string(string));
   });
   var $class = function (name) {
      return A2(stringProperty,
      "className",
      name);
   };
   var id = function (name) {
      return A2(stringProperty,
      "id",
      name);
   };
   var title = function (name) {
      return A2(stringProperty,
      "title",
      name);
   };
   var accesskey = function ($char) {
      return A2(stringProperty,
      "accesskey",
      $String.fromList(_L.fromArray([$char])));
   };
   var contextmenu = function (value) {
      return A2(stringProperty,
      "contextmenu",
      value);
   };
   var dir = function (value) {
      return A2(stringProperty,
      "dir",
      value);
   };
   var draggable = function (value) {
      return A2(stringProperty,
      "draggable",
      value);
   };
   var dropzone = function (value) {
      return A2(stringProperty,
      "dropzone",
      value);
   };
   var itemprop = function (value) {
      return A2(stringProperty,
      "itemprop",
      value);
   };
   var lang = function (value) {
      return A2(stringProperty,
      "lang",
      value);
   };
   var tabindex = function (n) {
      return A2(stringProperty,
      "tabIndex",
      $Basics.toString(n));
   };
   var charset = function (value) {
      return A2(stringProperty,
      "charset",
      value);
   };
   var content = function (value) {
      return A2(stringProperty,
      "content",
      value);
   };
   var httpEquiv = function (value) {
      return A2(stringProperty,
      "httpEquiv",
      value);
   };
   var language = function (value) {
      return A2(stringProperty,
      "language",
      value);
   };
   var src = function (value) {
      return A2(stringProperty,
      "src",
      value);
   };
   var height = function (value) {
      return A2(stringProperty,
      "height",
      $Basics.toString(value));
   };
   var width = function (value) {
      return A2(stringProperty,
      "width",
      $Basics.toString(value));
   };
   var alt = function (value) {
      return A2(stringProperty,
      "alt",
      value);
   };
   var preload = function (value) {
      return A2(stringProperty,
      "preload",
      value);
   };
   var poster = function (value) {
      return A2(stringProperty,
      "poster",
      value);
   };
   var kind = function (value) {
      return A2(stringProperty,
      "kind",
      value);
   };
   var srclang = function (value) {
      return A2(stringProperty,
      "srclang",
      value);
   };
   var sandbox = function (value) {
      return A2(stringProperty,
      "sandbox",
      value);
   };
   var srcdoc = function (value) {
      return A2(stringProperty,
      "srcdoc",
      value);
   };
   var type$ = function (value) {
      return A2(stringProperty,
      "type",
      value);
   };
   var value = function (value) {
      return A2(stringProperty,
      "value",
      value);
   };
   var placeholder = function (value) {
      return A2(stringProperty,
      "placeholder",
      value);
   };
   var accept = function (value) {
      return A2(stringProperty,
      "accept",
      value);
   };
   var acceptCharset = function (value) {
      return A2(stringProperty,
      "acceptCharset",
      value);
   };
   var action = function (value) {
      return A2(stringProperty,
      "action",
      value);
   };
   var autocomplete = function (bool) {
      return A2(stringProperty,
      "autocomplete",
      bool ? "on" : "off");
   };
   var autosave = function (value) {
      return A2(stringProperty,
      "autosave",
      value);
   };
   var enctype = function (value) {
      return A2(stringProperty,
      "enctype",
      value);
   };
   var formaction = function (value) {
      return A2(stringProperty,
      "formaction",
      value);
   };
   var list = function (value) {
      return A2(stringProperty,
      "list",
      value);
   };
   var minlength = function (n) {
      return A2(stringProperty,
      "minLength",
      $Basics.toString(n));
   };
   var maxlength = function (n) {
      return A2(stringProperty,
      "maxLength",
      $Basics.toString(n));
   };
   var method = function (value) {
      return A2(stringProperty,
      "method",
      value);
   };
   var name = function (value) {
      return A2(stringProperty,
      "name",
      value);
   };
   var pattern = function (value) {
      return A2(stringProperty,
      "pattern",
      value);
   };
   var size = function (n) {
      return A2(stringProperty,
      "size",
      $Basics.toString(n));
   };
   var $for = function (value) {
      return A2(stringProperty,
      "htmlFor",
      value);
   };
   var form = function (value) {
      return A2(stringProperty,
      "form",
      value);
   };
   var max = function (value) {
      return A2(stringProperty,
      "max",
      value);
   };
   var min = function (value) {
      return A2(stringProperty,
      "min",
      value);
   };
   var step = function (n) {
      return A2(stringProperty,
      "step",
      n);
   };
   var cols = function (n) {
      return A2(stringProperty,
      "cols",
      $Basics.toString(n));
   };
   var rows = function (n) {
      return A2(stringProperty,
      "rows",
      $Basics.toString(n));
   };
   var wrap = function (value) {
      return A2(stringProperty,
      "wrap",
      value);
   };
   var usemap = function (value) {
      return A2(stringProperty,
      "useMap",
      value);
   };
   var shape = function (value) {
      return A2(stringProperty,
      "shape",
      value);
   };
   var coords = function (value) {
      return A2(stringProperty,
      "coords",
      value);
   };
   var challenge = function (value) {
      return A2(stringProperty,
      "challenge",
      value);
   };
   var keytype = function (value) {
      return A2(stringProperty,
      "keytype",
      value);
   };
   var align = function (value) {
      return A2(stringProperty,
      "align",
      value);
   };
   var cite = function (value) {
      return A2(stringProperty,
      "cite",
      value);
   };
   var href = function (value) {
      return A2(stringProperty,
      "href",
      value);
   };
   var target = function (value) {
      return A2(stringProperty,
      "target",
      value);
   };
   var downloadAs = function (value) {
      return A2(stringProperty,
      "download",
      value);
   };
   var hreflang = function (value) {
      return A2(stringProperty,
      "hreflang",
      value);
   };
   var media = function (value) {
      return A2(stringProperty,
      "media",
      value);
   };
   var ping = function (value) {
      return A2(stringProperty,
      "ping",
      value);
   };
   var rel = function (value) {
      return A2(stringProperty,
      "rel",
      value);
   };
   var datetime = function (value) {
      return A2(stringProperty,
      "datetime",
      value);
   };
   var pubdate = function (value) {
      return A2(stringProperty,
      "pubdate",
      value);
   };
   var start = function (n) {
      return A2(stringProperty,
      "start",
      $Basics.toString(n));
   };
   var colspan = function (n) {
      return A2(stringProperty,
      "colSpan",
      $Basics.toString(n));
   };
   var headers = function (value) {
      return A2(stringProperty,
      "headers",
      value);
   };
   var rowspan = function (n) {
      return A2(stringProperty,
      "rowSpan",
      $Basics.toString(n));
   };
   var scope = function (value) {
      return A2(stringProperty,
      "scope",
      value);
   };
   var manifest = function (value) {
      return A2(stringProperty,
      "manifest",
      value);
   };
   var boolProperty = F2(function (name,
   bool) {
      return A2(property,
      name,
      $Json$Encode.bool(bool));
   });
   var hidden = function (bool) {
      return A2(boolProperty,
      "hidden",
      bool);
   };
   var contenteditable = function (bool) {
      return A2(boolProperty,
      "contentEditable",
      bool);
   };
   var spellcheck = function (bool) {
      return A2(boolProperty,
      "spellcheck",
      bool);
   };
   var async = function (bool) {
      return A2(boolProperty,
      "async",
      bool);
   };
   var defer = function (bool) {
      return A2(boolProperty,
      "defer",
      bool);
   };
   var scoped = function (bool) {
      return A2(boolProperty,
      "scoped",
      bool);
   };
   var autoplay = function (bool) {
      return A2(boolProperty,
      "autoplay",
      bool);
   };
   var controls = function (bool) {
      return A2(boolProperty,
      "controls",
      bool);
   };
   var loop = function (bool) {
      return A2(boolProperty,
      "loop",
      bool);
   };
   var $default = function (bool) {
      return A2(boolProperty,
      "default",
      bool);
   };
   var seamless = function (bool) {
      return A2(boolProperty,
      "seamless",
      bool);
   };
   var checked = function (bool) {
      return A2(boolProperty,
      "checked",
      bool);
   };
   var selected = function (bool) {
      return A2(boolProperty,
      "selected",
      bool);
   };
   var autofocus = function (bool) {
      return A2(boolProperty,
      "autofocus",
      bool);
   };
   var disabled = function (bool) {
      return A2(boolProperty,
      "disabled",
      bool);
   };
   var multiple = function (bool) {
      return A2(boolProperty,
      "multiple",
      bool);
   };
   var novalidate = function (bool) {
      return A2(boolProperty,
      "noValidate",
      bool);
   };
   var readonly = function (bool) {
      return A2(boolProperty,
      "readOnly",
      bool);
   };
   var required = function (bool) {
      return A2(boolProperty,
      "required",
      bool);
   };
   var ismap = function (value) {
      return A2(boolProperty,
      "isMap",
      value);
   };
   var download = function (bool) {
      return A2(boolProperty,
      "download",
      bool);
   };
   var reversed = function (bool) {
      return A2(boolProperty,
      "reversed",
      bool);
   };
   var classList = function (list) {
      return $class($String.join(" ")($List.map($Basics.fst)($List.filter($Basics.snd)(list))));
   };
   var style = function (props) {
      return property("style")($Json$Encode.object($List.map(function (_v0) {
         return function () {
            switch (_v0.ctor)
            {case "_Tuple2":
               return {ctor: "_Tuple2"
                      ,_0: _v0._0
                      ,_1: $Json$Encode.string(_v0._1)};}
            _U.badCase($moduleName,
            "on line 133, column 35 to 57");
         }();
      })(props)));
   };
   var key = function (k) {
      return A2(stringProperty,
      "key",
      k);
   };
   _elm.Html.Attributes.values = {_op: _op
                                 ,key: key
                                 ,style: style
                                 ,classList: classList
                                 ,property: property
                                 ,stringProperty: stringProperty
                                 ,boolProperty: boolProperty
                                 ,attribute: attribute
                                 ,$class: $class
                                 ,hidden: hidden
                                 ,id: id
                                 ,title: title
                                 ,accesskey: accesskey
                                 ,contenteditable: contenteditable
                                 ,contextmenu: contextmenu
                                 ,dir: dir
                                 ,draggable: draggable
                                 ,dropzone: dropzone
                                 ,itemprop: itemprop
                                 ,lang: lang
                                 ,spellcheck: spellcheck
                                 ,tabindex: tabindex
                                 ,async: async
                                 ,charset: charset
                                 ,content: content
                                 ,defer: defer
                                 ,httpEquiv: httpEquiv
                                 ,language: language
                                 ,scoped: scoped
                                 ,src: src
                                 ,height: height
                                 ,width: width
                                 ,alt: alt
                                 ,autoplay: autoplay
                                 ,controls: controls
                                 ,loop: loop
                                 ,preload: preload
                                 ,poster: poster
                                 ,$default: $default
                                 ,kind: kind
                                 ,srclang: srclang
                                 ,sandbox: sandbox
                                 ,seamless: seamless
                                 ,srcdoc: srcdoc
                                 ,type$: type$
                                 ,value: value
                                 ,checked: checked
                                 ,placeholder: placeholder
                                 ,selected: selected
                                 ,accept: accept
                                 ,acceptCharset: acceptCharset
                                 ,action: action
                                 ,autocomplete: autocomplete
                                 ,autofocus: autofocus
                                 ,autosave: autosave
                                 ,disabled: disabled
                                 ,enctype: enctype
                                 ,formaction: formaction
                                 ,list: list
                                 ,minlength: minlength
                                 ,maxlength: maxlength
                                 ,method: method
                                 ,multiple: multiple
                                 ,name: name
                                 ,novalidate: novalidate
                                 ,pattern: pattern
                                 ,readonly: readonly
                                 ,required: required
                                 ,size: size
                                 ,$for: $for
                                 ,form: form
                                 ,max: max
                                 ,min: min
                                 ,step: step
                                 ,cols: cols
                                 ,rows: rows
                                 ,wrap: wrap
                                 ,ismap: ismap
                                 ,usemap: usemap
                                 ,shape: shape
                                 ,coords: coords
                                 ,challenge: challenge
                                 ,keytype: keytype
                                 ,align: align
                                 ,cite: cite
                                 ,href: href
                                 ,target: target
                                 ,download: download
                                 ,downloadAs: downloadAs
                                 ,hreflang: hreflang
                                 ,media: media
                                 ,ping: ping
                                 ,rel: rel
                                 ,datetime: datetime
                                 ,pubdate: pubdate
                                 ,reversed: reversed
                                 ,start: start
                                 ,colspan: colspan
                                 ,headers: headers
                                 ,rowspan: rowspan
                                 ,scope: scope
                                 ,manifest: manifest};
   return _elm.Html.Attributes.values;
};
Elm.Html = Elm.Html || {};
Elm.Html.Events = Elm.Html.Events || {};
Elm.Html.Events.make = function (_elm) {
   "use strict";
   _elm.Html = _elm.Html || {};
   _elm.Html.Events = _elm.Html.Events || {};
   if (_elm.Html.Events.values)
   return _elm.Html.Events.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Html.Events",
   $Html = Elm.Html.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $VirtualDom = Elm.VirtualDom.make(_elm);
   var keyCode = A2($Json$Decode._op[":="],
   "keyCode",
   $Json$Decode.$int);
   var targetChecked = A2($Json$Decode.at,
   _L.fromArray(["target"
                ,"checked"]),
   $Json$Decode.bool);
   var targetValue = A2($Json$Decode.at,
   _L.fromArray(["target"
                ,"value"]),
   $Json$Decode.string);
   var on = $VirtualDom.on;
   var messageOn = F3(function (name,
   addr,
   msg) {
      return A3(on,
      name,
      $Json$Decode.value,
      function (_v0) {
         return function () {
            return A2($Signal.message,
            addr,
            msg);
         }();
      });
   });
   var onClick = messageOn("click");
   var onDoubleClick = messageOn("dblclick");
   var onMouseMove = messageOn("mousemove");
   var onMouseDown = messageOn("mousedown");
   var onMouseUp = messageOn("mouseup");
   var onMouseEnter = messageOn("mouseenter");
   var onMouseLeave = messageOn("mouseleave");
   var onMouseOver = messageOn("mouseover");
   var onMouseOut = messageOn("mouseout");
   var onBlur = messageOn("blur");
   var onFocus = messageOn("focus");
   var onSubmit = messageOn("submit");
   var onKey = F3(function (name,
   addr,
   handler) {
      return A3(on,
      name,
      keyCode,
      function (code) {
         return A2($Signal.message,
         addr,
         handler(code));
      });
   });
   var onKeyUp = onKey("keyup");
   var onKeyDown = onKey("keydown");
   var onKeyPress = onKey("keypress");
   _elm.Html.Events.values = {_op: _op
                             ,onBlur: onBlur
                             ,onFocus: onFocus
                             ,onSubmit: onSubmit
                             ,onKeyUp: onKeyUp
                             ,onKeyDown: onKeyDown
                             ,onKeyPress: onKeyPress
                             ,onClick: onClick
                             ,onDoubleClick: onDoubleClick
                             ,onMouseMove: onMouseMove
                             ,onMouseDown: onMouseDown
                             ,onMouseUp: onMouseUp
                             ,onMouseEnter: onMouseEnter
                             ,onMouseLeave: onMouseLeave
                             ,onMouseOver: onMouseOver
                             ,onMouseOut: onMouseOut
                             ,on: on
                             ,targetValue: targetValue
                             ,targetChecked: targetChecked
                             ,keyCode: keyCode};
   return _elm.Html.Events.values;
};
Elm.InterfaceController = Elm.InterfaceController || {};
Elm.InterfaceController.make = function (_elm) {
   "use strict";
   _elm.InterfaceController = _elm.InterfaceController || {};
   if (_elm.InterfaceController.values)
   return _elm.InterfaceController.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "InterfaceController",
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Eval = Elm.Eval.make(_elm),
   $ExamplesGenerated = Elm.ExamplesGenerated.make(_elm),
   $InterfaceModel = Elm.InterfaceModel.make(_elm),
   $Lang = Elm.Lang.make(_elm),
   $LangParser = Elm.LangParser.make(_elm),
   $LangSvg = Elm.LangSvg.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Sync = Elm.Sync.make(_elm),
   $Utils = Elm.Utils.make(_elm);
   var lift = F2(function (f,_v0) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return {ctor: "_Tuple2"
                   ,_0: f(_v0._0)
                   ,_1: _v0._1};}
         _U.badCase($moduleName,
         "on line 349, column 17 to 23");
      }();
   });
   var polyInterior = F4(function (shape,
   objid,
   old,
   onMouse) {
      return function () {
         var _ = A2($Dict.get,
         objid,
         $Basics.snd(old.slate));
         var nodeAttrs = function () {
            switch (_.ctor)
            {case "Just": switch (_._0.ctor)
                 {case "SvgNode":
                    return _._0._1;}
                 break;}
            _U.badCase($moduleName,
            "on line 352, column 48 to 77");
         }();
         var pts = $LangSvg.toPoints(A2($Utils.find_,
         nodeAttrs,
         "points"));
         var accs = function () {
            var foo = F2(function (_v9,
            _v10) {
               return function () {
                  switch (_v10.ctor)
                  {case "_Tuple2":
                     return function () {
                          switch (_v9.ctor)
                          {case "_Tuple2":
                             switch (_v9._1.ctor)
                               {case "_Tuple2":
                                  return function () {
                                       var $ = {ctor: "_Tuple2"
                                               ,_0: A2(lift,
                                               onMouse.posX,
                                               _v9._1._0)
                                               ,_1: A2(lift,
                                               onMouse.posY,
                                               _v9._1._1)},
                                       xj$ = $._0,
                                       yj$ = $._1;
                                       var acc2$ = A2($List._op["::"],
                                       {ctor: "_Tuple2"
                                       ,_0: A2($LangSvg.addi,
                                       "x",
                                       _v9._0)
                                       ,_1: $LangSvg.ANum(xj$)},
                                       A2($List._op["::"],
                                       {ctor: "_Tuple2"
                                       ,_0: A2($LangSvg.addi,
                                       "y",
                                       _v9._0)
                                       ,_1: $LangSvg.ANum(yj$)},
                                       _v10._1));
                                       return {ctor: "_Tuple2"
                                              ,_0: A2($List._op["::"],
                                              {ctor: "_Tuple2"
                                              ,_0: xj$
                                              ,_1: yj$},
                                              _v10._0)
                                              ,_1: acc2$};
                                    }();}
                               break;}
                          _U.badCase($moduleName,
                          "between lines 356 and 358");
                       }();}
                  _U.badCase($moduleName,
                  "between lines 356 and 358");
               }();
            });
            return A3($Utils.foldli,
            foo,
            {ctor: "_Tuple2"
            ,_0: _L.fromArray([])
            ,_1: _L.fromArray([])},
            pts);
         }();
         var $ = $Utils.reverse2(accs),
         acc1 = $._0,
         acc2 = $._1;
         return {ctor: "_Tuple2"
                ,_0: _L.fromArray([{ctor: "_Tuple2"
                                   ,_0: "points"
                                   ,_1: $LangSvg.APoints(acc1)}])
                ,_1: acc2};
      }();
   });
   var polyPoint = F5(function (i,
   shape,
   objid,
   old,
   onMouse) {
      return function () {
         var _ = A2($Dict.get,
         objid,
         $Basics.snd(old.slate));
         var nodeAttrs = function () {
            switch (_.ctor)
            {case "Just": switch (_._0.ctor)
                 {case "SvgNode":
                    return _._0._1;}
                 break;}
            _U.badCase($moduleName,
            "on line 366, column 48 to 77");
         }();
         var pts = $LangSvg.toPoints(A2($Utils.find_,
         nodeAttrs,
         "points"));
         var accs = function () {
            var foo = F2(function (_v24,
            _v25) {
               return function () {
                  switch (_v25.ctor)
                  {case "_Tuple2":
                     return function () {
                          switch (_v24.ctor)
                          {case "_Tuple2":
                             switch (_v24._1.ctor)
                               {case "_Tuple2":
                                  return !_U.eq(i,
                                    _v24._0) ? {ctor: "_Tuple2"
                                               ,_0: A2($List._op["::"],
                                               {ctor: "_Tuple2"
                                               ,_0: _v24._1._0
                                               ,_1: _v24._1._1},
                                               _v25._0)
                                               ,_1: _v25._1} : function () {
                                       var $ = {ctor: "_Tuple2"
                                               ,_0: A2(lift,
                                               onMouse.posX,
                                               _v24._1._0)
                                               ,_1: A2(lift,
                                               onMouse.posY,
                                               _v24._1._1)},
                                       xj$ = $._0,
                                       yj$ = $._1;
                                       var acc2$ = A2($List._op["::"],
                                       {ctor: "_Tuple2"
                                       ,_0: A2($LangSvg.addi,"x",i)
                                       ,_1: $LangSvg.ANum(xj$)},
                                       A2($List._op["::"],
                                       {ctor: "_Tuple2"
                                       ,_0: A2($LangSvg.addi,"y",i)
                                       ,_1: $LangSvg.ANum(yj$)},
                                       _v25._1));
                                       return {ctor: "_Tuple2"
                                              ,_0: A2($List._op["::"],
                                              {ctor: "_Tuple2"
                                              ,_0: xj$
                                              ,_1: yj$},
                                              _v25._0)
                                              ,_1: acc2$};
                                    }();}
                               break;}
                          _U.badCase($moduleName,
                          "between lines 370 and 376");
                       }();}
                  _U.badCase($moduleName,
                  "between lines 370 and 376");
               }();
            });
            return A3($Utils.foldli,
            foo,
            {ctor: "_Tuple2"
            ,_0: _L.fromArray([])
            ,_1: _L.fromArray([])},
            pts);
         }();
         var $ = $Utils.reverse2(accs),
         acc1 = $._0,
         acc2 = $._1;
         return {ctor: "_Tuple2"
                ,_0: _L.fromArray([{ctor: "_Tuple2"
                                   ,_0: "points"
                                   ,_1: $LangSvg.APoints(acc1)}])
                ,_1: acc2};
      }();
   });
   var polyEdge = F5(function (i,
   shape,
   objid,
   old,
   onMouse) {
      return function () {
         var _ = A2($Dict.get,
         objid,
         $Basics.snd(old.slate));
         var nodeAttrs = function () {
            switch (_.ctor)
            {case "Just": switch (_._0.ctor)
                 {case "SvgNode":
                    return _._0._1;}
                 break;}
            _U.badCase($moduleName,
            "on line 384, column 48 to 77");
         }();
         var pts = $LangSvg.toPoints(A2($Utils.find_,
         nodeAttrs,
         "points"));
         var n = $List.length(pts);
         var accs = function () {
            var foo = F2(function (_v39,
            _v40) {
               return function () {
                  switch (_v40.ctor)
                  {case "_Tuple2":
                     return function () {
                          switch (_v39.ctor)
                          {case "_Tuple2":
                             switch (_v39._1.ctor)
                               {case "_Tuple2": return _U.eq(i,
                                    _v39._0) || (_U.eq(i,
                                    n) && _U.eq(_v39._0,
                                    1) || _U.cmp(i,
                                    n) < 0 && _U.eq(_v39._0,
                                    i + 1)) ? function () {
                                       var $ = {ctor: "_Tuple2"
                                               ,_0: A2(lift,
                                               onMouse.posX,
                                               _v39._1._0)
                                               ,_1: A2(lift,
                                               onMouse.posY,
                                               _v39._1._1)},
                                       xj$ = $._0,
                                       yj$ = $._1;
                                       var acc2$ = A2($List._op["::"],
                                       {ctor: "_Tuple2"
                                       ,_0: A2($LangSvg.addi,
                                       "x",
                                       _v39._0)
                                       ,_1: $LangSvg.ANum(xj$)},
                                       A2($List._op["::"],
                                       {ctor: "_Tuple2"
                                       ,_0: A2($LangSvg.addi,
                                       "y",
                                       _v39._0)
                                       ,_1: $LangSvg.ANum(yj$)},
                                       _v40._1));
                                       return {ctor: "_Tuple2"
                                              ,_0: A2($List._op["::"],
                                              {ctor: "_Tuple2"
                                              ,_0: xj$
                                              ,_1: yj$},
                                              _v40._0)
                                              ,_1: acc2$};
                                    }() : {ctor: "_Tuple2"
                                          ,_0: A2($List._op["::"],
                                          {ctor: "_Tuple2"
                                          ,_0: _v39._1._0
                                          ,_1: _v39._1._1},
                                          _v40._0)
                                          ,_1: _v40._1};}
                               break;}
                          _U.badCase($moduleName,
                          "between lines 389 and 396");
                       }();}
                  _U.badCase($moduleName,
                  "between lines 389 and 396");
               }();
            });
            return A3($Utils.foldli,
            foo,
            {ctor: "_Tuple2"
            ,_0: _L.fromArray([])
            ,_1: _L.fromArray([])},
            pts);
         }();
         var $ = $Utils.reverse2(accs),
         acc1 = $._0,
         acc2 = $._1;
         return {ctor: "_Tuple2"
                ,_0: _L.fromArray([{ctor: "_Tuple2"
                                   ,_0: "points"
                                   ,_1: $LangSvg.APoints(acc1)}])
                ,_1: acc2};
      }();
   });
   var pathPoint = F4(function (i,
   objid,
   old,
   onMouse) {
      return function () {
         var updatePt = function (_v49) {
            return function () {
               switch (_v49.ctor)
               {case "_Tuple2":
                  switch (_v49._1.ctor)
                    {case "_Tuple2":
                       return _U.eq(_v49._0,
                         $Maybe.Just(i)) ? {ctor: "_Tuple2"
                                           ,_0: _v49._0
                                           ,_1: {ctor: "_Tuple2"
                                                ,_0: A2(lift,
                                                onMouse.posX,
                                                _v49._1._0)
                                                ,_1: A2(lift,
                                                onMouse.posY,
                                                _v49._1._1)}} : {ctor: "_Tuple2"
                                                                ,_0: _v49._0
                                                                ,_1: {ctor: "_Tuple2"
                                                                     ,_0: _v49._1._0
                                                                     ,_1: _v49._1._1}};}
                    break;}
               _U.badCase($moduleName,
               "between lines 413 and 414");
            }();
         };
         var addFakePts = $List.foldl(F2(function (_v55,
         acc) {
            return function () {
               switch (_v55.ctor)
               {case "_Tuple2":
                  switch (_v55._1.ctor)
                    {case "_Tuple2":
                       return _U.eq(_v55._0,
                         $Maybe.Just(i)) ? A2($List._op["::"],
                         {ctor: "_Tuple2"
                         ,_0: A2($LangSvg.addi,"x",i)
                         ,_1: $LangSvg.ANum(_v55._1._0)},
                         A2($List._op["::"],
                         {ctor: "_Tuple2"
                         ,_0: A2($LangSvg.addi,"y",i)
                         ,_1: $LangSvg.ANum(_v55._1._1)},
                         acc)) : acc;}
                    break;}
               _U.badCase($moduleName,
               "between lines 417 and 420");
            }();
         }));
         var _ = A2($Dict.get,
         objid,
         $Basics.snd(old.slate));
         var nodeAttrs = function () {
            switch (_.ctor)
            {case "Just": switch (_._0.ctor)
                 {case "SvgNode":
                    return _._0._1;}
                 break;}
            _U.badCase($moduleName,
            "on line 422, column 48 to 77");
         }();
         var $ = $LangSvg.toPath(A2($Utils.find_,
         nodeAttrs,
         "d")),
         cmds = $._0,
         counts = $._1;
         var accs = function () {
            var foo = F2(function (c,
            _v66) {
               return function () {
                  switch (_v66.ctor)
                  {case "_Tuple2":
                     return function () {
                          var $ = function () {
                             switch (c.ctor)
                             {case "CmdA":
                                return function () {
                                     var pt$ = updatePt(c._6);
                                     return {ctor: "_Tuple2"
                                            ,_0: A7($LangSvg.CmdA,
                                            c._0,
                                            c._1,
                                            c._2,
                                            c._3,
                                            c._4,
                                            c._5,
                                            pt$)
                                            ,_1: A2(addFakePts,
                                            _v66._1,
                                            _L.fromArray([pt$]))};
                                  }();
                                case "CmdC":
                                return function () {
                                     var _ = A2($List.map,
                                     updatePt,
                                     _L.fromArray([c._1,c._2,c._3]));
                                     var pt1$ = function () {
                                        switch (_.ctor)
                                        {case "::": switch (_._1.ctor)
                                             {case "::":
                                                switch (_._1._1.ctor)
                                                  {case "::":
                                                     switch (_._1._1._1.ctor)
                                                       {case "[]": return _._0;}
                                                       break;}
                                                  break;}
                                             break;}
                                        _U.badCase($moduleName,
                                        "on line 435, column 34 to 65");
                                     }();
                                     var pt2$ = function () {
                                        switch (_.ctor)
                                        {case "::": switch (_._1.ctor)
                                             {case "::":
                                                switch (_._1._1.ctor)
                                                  {case "::":
                                                     switch (_._1._1._1.ctor)
                                                       {case "[]":
                                                          return _._1._0;}
                                                       break;}
                                                  break;}
                                             break;}
                                        _U.badCase($moduleName,
                                        "on line 435, column 34 to 65");
                                     }();
                                     var pt3$ = function () {
                                        switch (_.ctor)
                                        {case "::": switch (_._1.ctor)
                                             {case "::":
                                                switch (_._1._1.ctor)
                                                  {case "::":
                                                     switch (_._1._1._1.ctor)
                                                       {case "[]":
                                                          return _._1._1._0;}
                                                       break;}
                                                  break;}
                                             break;}
                                        _U.badCase($moduleName,
                                        "on line 435, column 34 to 65");
                                     }();
                                     return {ctor: "_Tuple2"
                                            ,_0: A4($LangSvg.CmdC,
                                            c._0,
                                            pt1$,
                                            pt2$,
                                            pt3$)
                                            ,_1: A2(addFakePts,
                                            _v66._1,
                                            _L.fromArray([pt1$
                                                         ,pt2$
                                                         ,pt3$]))};
                                  }();
                                case "CmdHV":
                                return {ctor: "_Tuple2"
                                       ,_0: A2($LangSvg.CmdHV,
                                       c._0,
                                       c._1)
                                       ,_1: _v66._1};
                                case "CmdMLT":
                                return function () {
                                     var pt$ = updatePt(c._1);
                                     return {ctor: "_Tuple2"
                                            ,_0: A2($LangSvg.CmdMLT,
                                            c._0,
                                            pt$)
                                            ,_1: A2(addFakePts,
                                            _v66._1,
                                            _L.fromArray([pt$]))};
                                  }();
                                case "CmdSQ":
                                return function () {
                                     var _ = A2($List.map,
                                     updatePt,
                                     _L.fromArray([c._1,c._2]));
                                     var pt1$ = function () {
                                        switch (_.ctor)
                                        {case "::": switch (_._1.ctor)
                                             {case "::":
                                                switch (_._1._1.ctor)
                                                  {case "[]": return _._0;}
                                                  break;}
                                             break;}
                                        _U.badCase($moduleName,
                                        "on line 438, column 29 to 56");
                                     }();
                                     var pt2$ = function () {
                                        switch (_.ctor)
                                        {case "::": switch (_._1.ctor)
                                             {case "::":
                                                switch (_._1._1.ctor)
                                                  {case "[]": return _._1._0;}
                                                  break;}
                                             break;}
                                        _U.badCase($moduleName,
                                        "on line 438, column 29 to 56");
                                     }();
                                     return {ctor: "_Tuple2"
                                            ,_0: A3($LangSvg.CmdSQ,
                                            c._0,
                                            pt1$,
                                            pt2$)
                                            ,_1: A2(addFakePts,
                                            _v66._1,
                                            _L.fromArray([pt1$,pt2$]))};
                                  }();
                                case "CmdZ":
                                return {ctor: "_Tuple2"
                                       ,_0: $LangSvg.CmdZ(c._0)
                                       ,_1: _v66._1};}
                             _U.badCase($moduleName,
                             "between lines 426 and 443");
                          }(),
                          c$ = $._0,
                          acc2$ = $._1;
                          return {ctor: "_Tuple2"
                                 ,_0: A2($List._op["::"],
                                 c$,
                                 _v66._0)
                                 ,_1: acc2$};
                       }();}
                  _U.badCase($moduleName,
                  "between lines 426 and 444");
               }();
            });
            return A3($List.foldr,
            foo,
            {ctor: "_Tuple2"
            ,_0: _L.fromArray([])
            ,_1: _L.fromArray([])},
            cmds);
         }();
         var $ = $Utils.reverse2(accs),
         acc1 = $._0,
         acc2 = $._1;
         return {ctor: "_Tuple2"
                ,_0: _L.fromArray([{ctor: "_Tuple2"
                                   ,_0: "d"
                                   ,_1: $LangSvg.APath2({ctor: "_Tuple2"
                                                        ,_0: acc1
                                                        ,_1: counts})}])
                ,_1: acc2};
      }();
   });
   var createCallbackPath = F2(function (zone,
   shape) {
      return function () {
         var _ = A2($Utils.assert,
         "createCallbackPath",
         _U.eq(shape,"path"));
         return function () {
            var _v121 = $LangSvg.realZoneOf(zone);
            switch (_v121.ctor)
            {case "ZPoint":
               return pathPoint(_v121._0);}
            _U.badCase($moduleName,
            "between lines 407 and 408");
         }();
      }();
   });
   var createCallbackPoly = F2(function (zone,
   shape) {
      return function () {
         var _ = A2($Utils.assert,
         "createCallbackPoly",
         _U.eq(shape,
         "polygon") || _U.eq(shape,
         "polyline"));
         return function () {
            var _v123 = $LangSvg.realZoneOf(zone);
            switch (_v123.ctor)
            {case "Z": switch (_v123._0)
                 {case "Interior":
                    return polyInterior(shape);}
                 break;
               case "ZEdge":
               return A2(polyEdge,
                 _v123._0,
                 shape);
               case "ZPoint":
               return A2(polyPoint,
                 _v123._0,
                 shape);}
            _U.badCase($moduleName,
            "between lines 339 and 342");
         }();
      }();
   });
   var OnMouse = F4(function (a,
   b,
   c,
   d) {
      return {_: {}
             ,negX: c
             ,negY: d
             ,posX: a
             ,posY: b};
   });
   var switchOrient = function (m) {
      return function () {
         switch (m.ctor)
         {case "Horizontal":
            return $InterfaceModel.Vertical;
            case "Vertical":
            return $InterfaceModel.Horizontal;}
         _U.badCase($moduleName,
         "between lines 69 and 71");
      }();
   };
   var refreshMode = F2(function (model,
   e) {
      return function () {
         var _v128 = model.mode;
         switch (_v128.ctor)
         {case "Live":
            return A2($InterfaceModel.mkLive_,
              model.syncOptions,
              e);
            case "Print":
            return A2($InterfaceModel.mkLive_,
              model.syncOptions,
              e);}
         return _v128;
      }();
   });
   var refreshMode_ = function (model) {
      return A2(refreshMode,
      model,
      $Utils.fromJust(model.inputExp));
   };
   var upslate = F3(function (id,
   newattr,
   nodes) {
      return function () {
         var _v131 = A2($Dict.get,
         id,
         nodes);
         switch (_v131.ctor)
         {case "Just":
            return function () {
                 switch (_v131._0.ctor)
                 {case "SvgNode":
                    return function () {
                         var newnode = A3($LangSvg.SvgNode,
                         _v131._0._0,
                         A2($Utils.update,
                         newattr,
                         _v131._0._1),
                         _v131._0._2);
                         return A3($Dict.insert,
                         id,
                         newnode,
                         nodes);
                      }();
                    case "TextNode": return nodes;}
                 _U.badCase($moduleName,
                 "between lines 55 and 59");
              }();
            case "Nothing":
            return $Debug.crash("upslate");}
         _U.badCase($moduleName,
         "between lines 53 and 59");
      }();
   });
   var createMousePosCallback = F6(function (mx,
   my,
   objid,
   kind,
   zone,
   old) {
      return function () {
         var _ = A3($Utils.justGet_,
         "#3",
         objid,
         $Basics.snd(old.slate));
         var attrs = function () {
            switch (_.ctor)
            {case "SvgNode": return _._1;}
            _U.badCase($moduleName,
            "on line 238, column 37 to 77");
         }();
         var numAttr = function ($) {
            return $LangSvg.toNum($Utils.find_(attrs)($));
         };
         var mapNumAttr = F2(function (f,
         a) {
            return function () {
               var $ = $LangSvg.toNumTr(A2($Utils.find_,
               attrs,
               a)),
               n = $._0,
               trace = $._1;
               return {ctor: "_Tuple2"
                      ,_0: a
                      ,_1: $LangSvg.ANum({ctor: "_Tuple2"
                                         ,_0: f(n)
                                         ,_1: trace})};
            }();
         });
         return function (_v142) {
            return function () {
               switch (_v142.ctor)
               {case "_Tuple2":
                  return function () {
                       var posX = function (n) {
                          return n - $Basics.toFloat(mx) + $Basics.toFloat(_v142._0);
                       };
                       var posY = function (n) {
                          return n - $Basics.toFloat(my) + $Basics.toFloat(_v142._1);
                       };
                       var negX = function (n) {
                          return n + $Basics.toFloat(mx) - $Basics.toFloat(_v142._0);
                       };
                       var negY = function (n) {
                          return n + $Basics.toFloat(my) - $Basics.toFloat(_v142._1);
                       };
                       var onMouse = {_: {}
                                     ,negX: negX
                                     ,negY: negY
                                     ,posX: posX
                                     ,posY: posY};
                       var fx = mapNumAttr(posX);
                       var fy = mapNumAttr(posY);
                       var fx_ = mapNumAttr(negX);
                       var fy_ = mapNumAttr(negY);
                       var ret = function (l) {
                          return {ctor: "_Tuple2"
                                 ,_0: l
                                 ,_1: l};
                       };
                       var $ = function () {
                          var _v146 = {ctor: "_Tuple2"
                                      ,_0: kind
                                      ,_1: zone};
                          switch (_v146.ctor)
                          {case "_Tuple2":
                             switch (_v146._0)
                               {case "circle":
                                  switch (_v146._1)
                                    {case "Edge":
                                       return function () {
                                            var _ = A2($List.map,
                                            numAttr,
                                            _L.fromArray(["cx","cy"]));
                                            var cx = function () {
                                               switch (_.ctor)
                                               {case "::": switch (_._1.ctor)
                                                    {case "::":
                                                       switch (_._1._1.ctor)
                                                         {case "[]":
                                                            return _._0;}
                                                         break;}
                                                    break;}
                                               _U.badCase($moduleName,
                                               "on line 287, column 25 to 54");
                                            }();
                                            var cy = function () {
                                               switch (_.ctor)
                                               {case "::": switch (_._1.ctor)
                                                    {case "::":
                                                       switch (_._1._1.ctor)
                                                         {case "[]":
                                                            return _._1._0;}
                                                         break;}
                                                    break;}
                                               _U.badCase($moduleName,
                                               "on line 287, column 25 to 54");
                                            }();
                                            var dx = _U.cmp($Basics.toFloat(mx),
                                            cx) > -1 ? _v142._0 - mx : mx - _v142._0;
                                            var dy = _U.cmp($Basics.toFloat(my),
                                            cy) > -1 ? _v142._1 - my : my - _v142._1;
                                            return ret(_L.fromArray([A2(mapNumAttr,
                                            function (r) {
                                               return r + $Basics.toFloat(A2($Basics.max,
                                               dx,
                                               dy));
                                            },
                                            "r")]));
                                         }();
                                       case "Interior":
                                       return ret(_L.fromArray([fx("cx")
                                                               ,fy("cy")]));}
                                    break;
                                  case "ellipse":
                                  switch (_v146._1)
                                    {case "Edge":
                                       return function () {
                                            var _ = A2($List.map,
                                            numAttr,
                                            _L.fromArray(["cx","cy"]));
                                            var cx = function () {
                                               switch (_.ctor)
                                               {case "::": switch (_._1.ctor)
                                                    {case "::":
                                                       switch (_._1._1.ctor)
                                                         {case "[]":
                                                            return _._0;}
                                                         break;}
                                                    break;}
                                               _U.badCase($moduleName,
                                               "on line 294, column 25 to 54");
                                            }();
                                            var cy = function () {
                                               switch (_.ctor)
                                               {case "::": switch (_._1.ctor)
                                                    {case "::":
                                                       switch (_._1._1.ctor)
                                                         {case "[]":
                                                            return _._1._0;}
                                                         break;}
                                                    break;}
                                               _U.badCase($moduleName,
                                               "on line 294, column 25 to 54");
                                            }();
                                            var dx = _U.cmp($Basics.toFloat(mx),
                                            cx) > -1 ? fx : fx_;
                                            var dy = _U.cmp($Basics.toFloat(my),
                                            cy) > -1 ? fy : fy_;
                                            return ret(_L.fromArray([dx("rx")
                                                                    ,dy("ry")]));
                                         }();
                                       case "Interior":
                                       return ret(_L.fromArray([fx("cx")
                                                               ,fy("cy")]));}
                                    break;
                                  case "line": switch (_v146._1)
                                    {case "Edge":
                                       return ret(_L.fromArray([fx("x1")
                                                               ,fx("x2")
                                                               ,fy("y1")
                                                               ,fy("y2")]));}
                                    return function () {
                                       var _v169 = $LangSvg.realZoneOf(zone);
                                       switch (_v169.ctor)
                                       {case "ZPoint":
                                          return ret(_L.fromArray([fx(A2($LangSvg.addi,
                                                                  "x",
                                                                  _v169._0))
                                                                  ,fy(A2($LangSvg.addi,
                                                                  "y",
                                                                  _v169._0))]));}
                                       _U.badCase($moduleName,
                                       "between lines 301 and 306");
                                    }();
                                  case "path":
                                  return A5(createCallbackPath,
                                    zone,
                                    kind,
                                    objid,
                                    old,
                                    onMouse);
                                  case "polygon":
                                  return A5(createCallbackPoly,
                                    zone,
                                    kind,
                                    objid,
                                    old,
                                    onMouse);
                                  case "polyline":
                                  return A5(createCallbackPoly,
                                    zone,
                                    kind,
                                    objid,
                                    old,
                                    onMouse);
                                  case "rect": switch (_v146._1)
                                    {case "BotEdge":
                                       return ret(_L.fromArray([fy("height")]));
                                       case "BotLeftCorner":
                                       return ret(_L.fromArray([fx("x")
                                                               ,fx_("width")
                                                               ,fy("height")]));
                                       case "BotRightCorner":
                                       return ret(_L.fromArray([fx("width")
                                                               ,fy("height")]));
                                       case "Interior":
                                       return ret(_L.fromArray([fx("x")
                                                               ,fy("y")]));
                                       case "LeftEdge":
                                       return ret(_L.fromArray([fx("x")
                                                               ,fx_("width")]));
                                       case "RightEdge":
                                       return ret(_L.fromArray([fx("width")]));
                                       case "TopEdge":
                                       return ret(_L.fromArray([fy("y")
                                                               ,fy_("height")]));
                                       case "TopLeftCorner":
                                       return ret(_L.fromArray([fx("x")
                                                               ,fy("y")
                                                               ,fx_("width")
                                                               ,fy_("height")]));
                                       case "TopRightCorner":
                                       return ret(_L.fromArray([fy("y")
                                                               ,fx("width")
                                                               ,fy_("height")]));}
                                    break;}
                               break;}
                          _U.badCase($moduleName,
                          "between lines 273 and 311");
                       }(),
                       newRealAttrs = $._0,
                       newFakeAttrs = $._1;
                       var newTree = A3($List.foldr,
                       upslate(objid),
                       $Basics.snd(old.slate),
                       newRealAttrs);
                       return function () {
                          var _v171 = old.mode;
                          switch (_v171.ctor)
                          {case "AdHoc":
                             return {ctor: "_Tuple2"
                                    ,_0: $Utils.fromJust(old.inputExp)
                                    ,_1: {ctor: "_Tuple2"
                                         ,_0: $Basics.fst(old.slate)
                                         ,_1: newTree}};
                             case "Live":
                             return function () {
                                  var _v173 = A3($Utils.justGet_,
                                  "#4",
                                  zone,
                                  A3($Utils.justGet_,
                                  "#5",
                                  objid,
                                  _v171._0.triggers));
                                  switch (_v173.ctor)
                                  {case "Just":
                                     return function () {
                                          var $ = _v173._0(A2($List.map,
                                          $Utils.mapSnd($LangSvg.toNum),
                                          newFakeAttrs)),
                                          newE = $._0,
                                          otherChanges = $._1;
                                          return $Basics.not($Sync.tryToBeSmart) ? {ctor: "_Tuple2"
                                                                                   ,_0: newE
                                                                                   ,_1: $LangSvg.valToIndexedTree($Eval.run(newE))} : $Debug.crash("Controller tryToBeSmart");
                                       }();
                                     case "Nothing":
                                     return $Debug.crash("shouldn\'t happen due to upstate SelectObject");}
                                  _U.badCase($moduleName,
                                  "between lines 316 and 333");
                               }();}
                          _U.badCase($moduleName,
                          "between lines 313 and 333");
                       }();
                    }();}
               _U.badCase($moduleName,
               "between lines 246 and 333");
            }();
         };
      }();
   });
   var slateToVal = function (_v175) {
      return function () {
         switch (_v175.ctor)
         {case "_Tuple2":
            return function () {
                 var foo = function (n) {
                    return function () {
                       switch (n.ctor)
                       {case "SvgNode":
                          return function () {
                               var vs1 = A2($List.map,
                               $LangSvg.valOfAttr,
                               n._1);
                               var vs2 = A2($List.map,
                               function ($) {
                                  return foo(A2($Basics.flip,
                                  $Utils.justGet,
                                  _v175._1)($));
                               },
                               n._2);
                               return $Lang.VList(_L.fromArray([$Lang.VBase($Lang.String(n._0))
                                                               ,$Lang.VList(vs1)
                                                               ,$Lang.VList(vs2)]));
                            }();
                          case "TextNode":
                          return $Lang.VList(_L.fromArray([$Lang.VBase($Lang.String("TEXT"))
                                                          ,$Lang.VBase($Lang.String(n._0))]));}
                       _U.badCase($moduleName,
                       "between lines 43 and 49");
                    }();
                 };
                 return foo(A2($Utils.justGet,
                 _v175._0,
                 _v175._1));
              }();}
         _U.badCase($moduleName,
         "between lines 42 and 50");
      }();
   };
   var upstate = F2(function (evt,
   old) {
      return function () {
         var _v184 = A2($Debug.log,
         "Event",
         evt);
         switch (_v184.ctor)
         {case "CodeUpdate":
            return _U.replace([["code"
                               ,_v184._0]],
              old);
            case "Edit":
            return _U.replace([["editingMode"
                               ,true]],
              old);
            case "MousePos":
            switch (_v184._0.ctor)
              {case "_Tuple2":
                 return function () {
                      var _v197 = old.mouseMode;
                      switch (_v197.ctor)
                      {case "MouseNothing":
                         return old;
                         case "MouseObject":
                         switch (_v197._0.ctor)
                           {case "_Tuple4":
                              switch (_v197._0._3.ctor)
                                {case "Just":
                                   return function () {
                                        var $ = _v197._0._3._0({ctor: "_Tuple2"
                                                               ,_0: _v184._0._0
                                                               ,_1: _v184._0._1}),
                                        newE = $._0,
                                        newSlate = $._1;
                                        return _U.replace([["code"
                                                           ,$Lang.sExp(newE)]
                                                          ,["inputExp"
                                                           ,$Maybe.Just(newE)]
                                                          ,["slate",newSlate]],
                                        old);
                                     }();
                                   case "Nothing":
                                   return function () {
                                        var onNewPos = A6(createMousePosCallback,
                                        _v184._0._0,
                                        _v184._0._1,
                                        _v197._0._0,
                                        _v197._0._1,
                                        _v197._0._2,
                                        old);
                                        return _U.replace([["mouseMode"
                                                           ,$InterfaceModel.MouseObject({ctor: "_Tuple4"
                                                                                        ,_0: _v197._0._0
                                                                                        ,_1: _v197._0._1
                                                                                        ,_2: _v197._0._2
                                                                                        ,_3: $Maybe.Just(onNewPos)})]],
                                        old);
                                     }();}
                                break;}
                           break;
                         case "MouseResizeMid":
                         switch (_v197._0.ctor)
                           {case "Just":
                              return function () {
                                   var $ = _v197._0._0({ctor: "_Tuple2"
                                                       ,_0: _v184._0._0
                                                       ,_1: _v184._0._1}),
                                   x = $._0,
                                   y = $._1;
                                   return _U.replace([["midOffsetX"
                                                      ,x]
                                                     ,["midOffsetY",y]],
                                   old);
                                }();
                              case "Nothing":
                              return function () {
                                   var f = function () {
                                      var _v206 = old.orient;
                                      switch (_v206.ctor)
                                      {case "Horizontal":
                                         return function (_v207) {
                                              return function () {
                                                 switch (_v207.ctor)
                                                 {case "_Tuple2":
                                                    return {ctor: "_Tuple2"
                                                           ,_0: old.midOffsetY
                                                           ,_1: old.midOffsetY + _v207._1 - _v184._0._1};}
                                                 _U.badCase($moduleName,
                                                 "on line 114, column 42 to 83");
                                              }();
                                           };
                                         case "Vertical":
                                         return function (_v211) {
                                              return function () {
                                                 switch (_v211.ctor)
                                                 {case "_Tuple2":
                                                    return {ctor: "_Tuple2"
                                                           ,_0: old.midOffsetX + _v211._0 - _v184._0._0
                                                           ,_1: old.midOffsetY};}
                                                 _U.badCase($moduleName,
                                                 "on line 113, column 42 to 83");
                                              }();
                                           };}
                                      _U.badCase($moduleName,
                                      "between lines 112 and 115");
                                   }();
                                   return _U.replace([["mouseMode"
                                                      ,$InterfaceModel.MouseResizeMid($Maybe.Just(f))]],
                                   old);
                                }();}
                           break;}
                      _U.badCase($moduleName,
                      "between lines 108 and 129");
                   }();}
              break;
            case "MouseUp":
            return function () {
                 var _v215 = old.mode;
                 switch (_v215.ctor)
                 {case "Print": return old;}
                 return _U.replace([["mouseMode"
                                    ,$InterfaceModel.MouseNothing]
                                   ,["mode",refreshMode_(old)]],
                 old);
              }();
            case "Noop": return old;
            case "Run": return function () {
                 var _v217 = $LangParser.parseE(old.code);
                 switch (_v217.ctor)
                 {case "Err":
                    return _U.replace([["caption"
                                       ,$Maybe.Just($InterfaceModel.LangError(A2($Basics._op["++"],
                                       "PARSE ERROR!\n",
                                       _v217._0)))]],
                      old);
                    case "Ok":
                    return _U.replace([["inputExp"
                                       ,$Maybe.Just(_v217._0)]
                                      ,["code",$Lang.sExp(_v217._0)]
                                      ,["slate"
                                       ,$LangSvg.valToIndexedTree($Eval.run(_v217._0))]
                                      ,["editingMode",false]
                                      ,["caption",$Maybe.Nothing]
                                      ,["mode"
                                       ,A2(refreshMode,old,_v217._0)]],
                      old);}
                 _U.badCase($moduleName,
                 "between lines 85 and 96");
              }();
            case "SelectExample":
            return _U.eq(_v184._0,
              $ExamplesGenerated.scratchName) ? A2(upstate,
              $InterfaceModel.Run,
              _U.replace([["exName",_v184._0]
                         ,["code",old.scratchCode]],
              old)) : function () {
                 var $ = _v184._1({ctor: "_Tuple0"}),
                 e = $.e,
                 v = $.v;
                 var m = function () {
                    var _v220 = old.mode;
                    switch (_v220.ctor)
                    {case "Live":
                       return A3($InterfaceModel.mkLive,
                         old.syncOptions,
                         e,
                         v);}
                    return old.mode;
                 }();
                 var scratchCode$ = _U.eq(old.exName,
                 $ExamplesGenerated.scratchName) ? old.code : old.scratchCode;
                 return _U.replace([["scratchCode"
                                    ,scratchCode$]
                                   ,["exName",_v184._0]
                                   ,["inputExp",$Maybe.Just(e)]
                                   ,["code",$Lang.sExp(e)]
                                   ,["mode",m]
                                   ,["slate"
                                    ,$LangSvg.valToIndexedTree(v)]],
                 old);
              }();
            case "SelectObject":
            return function () {
                 var _v222 = old.mode;
                 switch (_v222.ctor)
                 {case "AdHoc":
                    return _U.replace([["mouseMode"
                                       ,$InterfaceModel.MouseObject({ctor: "_Tuple4"
                                                                    ,_0: _v184._0
                                                                    ,_1: _v184._1
                                                                    ,_2: _v184._2
                                                                    ,_3: $Maybe.Nothing})]],
                      old);
                    case "Live":
                    return function () {
                         var _v226 = A2($Dict.get,
                         _v184._0,
                         _v222._0.triggers);
                         switch (_v226.ctor)
                         {case "Just":
                            return function () {
                                 var _v228 = A2($Dict.get,
                                 _v184._2,
                                 _v226._0);
                                 switch (_v228.ctor)
                                 {case "Just":
                                    switch (_v228._0.ctor)
                                      {case "Just":
                                         return _U.replace([["mouseMode"
                                                            ,$InterfaceModel.MouseObject({ctor: "_Tuple4"
                                                                                         ,_0: _v184._0
                                                                                         ,_1: _v184._1
                                                                                         ,_2: _v184._2
                                                                                         ,_3: $Maybe.Nothing})]],
                                           old);}
                                      break;}
                                 return _U.replace([["mouseMode"
                                                    ,$InterfaceModel.MouseNothing]],
                                 old);
                              }();
                            case "Nothing":
                            return _U.replace([["mouseMode"
                                               ,$InterfaceModel.MouseNothing]],
                              old);}
                         _U.badCase($moduleName,
                         "between lines 133 and 139");
                      }();
                    case "SyncSelect": return old;}
                 _U.badCase($moduleName,
                 "between lines 130 and 141");
              }();
            case "SelectOption":
            return function () {
                 var _raw = old.mode,
                 $ = _raw.ctor === "SyncSelect" ? _raw : _U.badCase($moduleName,
                 "on line 171, column 36 to 44"),
                 i = $._0,
                 options = $._1;
                 var _ = options;
                 var l = function () {
                    switch (_.ctor)
                    {case "_Tuple2": return _._1;}
                    _U.badCase($moduleName,
                    "on line 172, column 19 to 26");
                 }();
                 var $ = A2($Utils.geti,i,l),
                 ei = $._0,
                 vi = $._1;
                 return _U.replace([["code"
                                    ,$Lang.sExp(ei)]
                                   ,["inputExp",$Maybe.Just(ei)]
                                   ,["slate"
                                    ,$LangSvg.valToIndexedTree(vi)]
                                   ,["mode"
                                    ,A3($InterfaceModel.mkLive,
                                    old.syncOptions,
                                    ei,
                                    vi)]],
                 old);
              }();
            case "StartResizingMid":
            return _U.replace([["mouseMode"
                               ,$InterfaceModel.MouseResizeMid($Maybe.Nothing)]],
              old);
            case "SwitchMode":
            return _U.replace([["mode"
                               ,_v184._0]],
              old);
            case "SwitchOrient":
            return _U.replace([["orient"
                               ,switchOrient(old.orient)]],
              old);
            case "Sync":
            return function () {
                 var _v234 = {ctor: "_Tuple2"
                             ,_0: old.mode
                             ,_1: old.inputExp};
                 switch (_v234.ctor)
                 {case "_Tuple2":
                    switch (_v234._0.ctor)
                      {case "AdHoc":
                         switch (_v234._1.ctor)
                           {case "Just":
                              return function () {
                                   var newval = slateToVal(old.slate);
                                   var inputval = $Eval.run(_v234._1._0);
                                   var inputval$ = slateToVal($LangSvg.valToIndexedTree(inputval));
                                   var struct = A3($Sync.inferStructuralUpdate,
                                   _v234._1._0,
                                   inputval$,
                                   newval);
                                   var revert = {ctor: "_Tuple2"
                                                ,_0: _v234._1._0
                                                ,_1: inputval};
                                   return function () {
                                      var _v239 = A4($Sync.inferLocalUpdates,
                                      old.syncOptions,
                                      _v234._1._0,
                                      inputval$,
                                      newval);
                                      switch (_v239.ctor)
                                      {case "Err":
                                         return function () {
                                              var _ = A2($Debug.log,
                                              A2($Basics._op["++"],
                                              "bad sync: ++ ",
                                              _v239._0),
                                              {ctor: "_Tuple0"});
                                              var m = A2($InterfaceModel.SyncSelect,
                                              0,
                                              {ctor: "_Tuple2"
                                              ,_0: 0
                                              ,_1: _L.fromArray([struct
                                                                ,revert])});
                                              return A2(upstate,
                                              $InterfaceModel.TraverseOption(1),
                                              _U.replace([["mode",m]],old));
                                           }();
                                         case "Ok":
                                         switch (_v239._0.ctor)
                                           {case "[]":
                                              return _U.replace([["mode"
                                                                 ,A2($InterfaceModel.mkLive_,
                                                                 old.syncOptions,
                                                                 _v234._1._0)]],
                                                old);}
                                           return function () {
                                              var n = A2($Debug.log,
                                              "# of sync options",
                                              $List.length(_v239._0));
                                              var ls$ = A2($List.map,
                                              $Basics.fst,
                                              _v239._0);
                                              var m = A2($InterfaceModel.SyncSelect,
                                              0,
                                              {ctor: "_Tuple2"
                                              ,_0: n
                                              ,_1: A2($Basics._op["++"],
                                              ls$,
                                              _L.fromArray([struct
                                                           ,revert]))});
                                              return A2(upstate,
                                              $InterfaceModel.TraverseOption(1),
                                              _U.replace([["mode",m]],old));
                                           }();}
                                      _U.badCase($moduleName,
                                      "between lines 158 and 170");
                                   }();
                                }();}
                           break;
                         case "Live":
                         return $Debug.crash("upstate Sync: shouldn\'t happen anymore");}
                      break;}
                 _U.badCase($moduleName,
                 "between lines 147 and 170");
              }();
            case "ToggleOutput":
            return function () {
                 var m = function () {
                    var _v242 = old.mode;
                    switch (_v242.ctor)
                    {case "Print":
                       return refreshMode_(old);}
                    return $InterfaceModel.Print($LangSvg.printSvg(old.slate));
                 }();
                 return _U.replace([["mode",m]],
                 old);
              }();
            case "ToggleThawed":
            return function () {
                 var so = old.syncOptions;
                 var so$ = _U.replace([["thawedByDefault"
                                       ,$Basics.not(so.thawedByDefault)]],
                 so);
                 var model$ = _U.replace([["syncOptions"
                                          ,so$]],
                 old);
                 return _U.replace([["mode"
                                    ,refreshMode_(model$)]],
                 model$);
              }();
            case "ToggleZones":
            return _U.replace([["showZones"
                               ,$Basics.not(old.showZones)]],
              old);
            case "TraverseOption":
            return function () {
                 var _raw = old.mode,
                 $ = _raw.ctor === "SyncSelect" ? _raw : _U.badCase($moduleName,
                 "on line 180, column 36 to 44"),
                 i = $._0,
                 options = $._1;
                 var _ = options;
                 var l = function () {
                    switch (_.ctor)
                    {case "_Tuple2": return _._1;}
                    _U.badCase($moduleName,
                    "on line 181, column 19 to 26");
                 }();
                 var j = i + _v184._0;
                 var $ = A2($Utils.geti,j,l),
                 ei = $._0,
                 vi = $._1;
                 return _U.replace([["code"
                                    ,$Lang.sExp(ei)]
                                   ,["inputExp",$Maybe.Just(ei)]
                                   ,["slate"
                                    ,$LangSvg.valToIndexedTree(vi)]
                                   ,["mode"
                                    ,A2($InterfaceModel.SyncSelect,
                                    j,
                                    options)]],
                 old);
              }();
            case "UpdateModel":
            return _v184._0(old);}
         return $Debug.crash(A2($Basics._op["++"],
         "upstate, unhandled evt: ",
         $Basics.toString(evt)));
      }();
   });
   _elm.InterfaceController.values = {_op: _op
                                     ,upstate: upstate};
   return _elm.InterfaceController.values;
};
Elm.InterfaceModel = Elm.InterfaceModel || {};
Elm.InterfaceModel.make = function (_elm) {
   "use strict";
   _elm.InterfaceModel = _elm.InterfaceModel || {};
   if (_elm.InterfaceModel.values)
   return _elm.InterfaceModel.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "InterfaceModel",
   $Basics = Elm.Basics.make(_elm),
   $Eval = Elm.Eval.make(_elm),
   $ExamplesGenerated = Elm.ExamplesGenerated.make(_elm),
   $Lang = Elm.Lang.make(_elm),
   $LangSvg = Elm.LangSvg.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Sync = Elm.Sync.make(_elm),
   $Utils = Elm.Utils.make(_elm);
   var UpdateModel = function (a) {
      return {ctor: "UpdateModel"
             ,_0: a};
   };
   var Noop = {ctor: "Noop"};
   var StartResizingMid = {ctor: "StartResizingMid"};
   var SwitchOrient = {ctor: "SwitchOrient"};
   var ToggleThawed = {ctor: "ToggleThawed"};
   var ToggleZones = {ctor: "ToggleZones"};
   var ToggleOutput = {ctor: "ToggleOutput"};
   var Run = {ctor: "Run"};
   var Edit = {ctor: "Edit"};
   var SelectExample = F2(function (a,
   b) {
      return {ctor: "SelectExample"
             ,_0: a
             ,_1: b};
   });
   var SwitchMode = function (a) {
      return {ctor: "SwitchMode"
             ,_0: a};
   };
   var SelectOption = {ctor: "SelectOption"};
   var TraverseOption = function (a) {
      return {ctor: "TraverseOption"
             ,_0: a};
   };
   var Sync = {ctor: "Sync"};
   var MousePos = function (a) {
      return {ctor: "MousePos"
             ,_0: a};
   };
   var MouseUp = {ctor: "MouseUp"};
   var SelectObject = F3(function (a,
   b,
   c) {
      return {ctor: "SelectObject"
             ,_0: a
             ,_1: b
             ,_2: c};
   });
   var CodeUpdate = function (a) {
      return {ctor: "CodeUpdate"
             ,_0: a};
   };
   var events = $Signal.mailbox(CodeUpdate(""));
   var LangError = function (a) {
      return {ctor: "LangError"
             ,_0: a};
   };
   var Hovering = function (a) {
      return {ctor: "Hovering"
             ,_0: a};
   };
   var Horizontal = {ctor: "Horizontal"};
   var Vertical = {ctor: "Vertical"};
   var MouseResizeMid = function (a) {
      return {ctor: "MouseResizeMid"
             ,_0: a};
   };
   var MouseObject = function (a) {
      return {ctor: "MouseObject"
             ,_0: a};
   };
   var MouseNothing = {ctor: "MouseNothing"};
   var Print = function (a) {
      return {ctor: "Print",_0: a};
   };
   var Live = function (a) {
      return {ctor: "Live",_0: a};
   };
   var mkLive = F3(function (opts,
   e,
   v) {
      return Live(A3($Sync.prepareLiveUpdates,
      opts,
      e,
      v));
   });
   var mkLive_ = F2(function (opts,
   e) {
      return A3(mkLive,
      opts,
      e,
      $Eval.run(e));
   });
   var sampleModel = function () {
      var $ = $Utils.head_($ExamplesGenerated.list),
      name = $._0,
      f = $._1;
      var $ = f({ctor: "_Tuple0"}),
      e = $.e,
      v = $.v;
      return {_: {}
             ,caption: $Maybe.Nothing
             ,code: $Lang.sExp(e)
             ,editingMode: false
             ,exName: name
             ,inputExp: $Maybe.Just(e)
             ,midOffsetX: 0
             ,midOffsetY: -100
             ,mode: A3(mkLive,
             $Sync.defaultOptions,
             e,
             v)
             ,mouseMode: MouseNothing
             ,orient: Vertical
             ,scratchCode: $ExamplesGenerated.scratch
             ,showZones: false
             ,slate: $LangSvg.valToIndexedTree(v)
             ,syncOptions: $Sync.defaultOptions};
   }();
   var SyncSelect = F2(function (a,
   b) {
      return {ctor: "SyncSelect"
             ,_0: a
             ,_1: b};
   });
   var AdHoc = {ctor: "AdHoc"};
   var Model = function (a) {
      return function (b) {
         return function (c) {
            return function (d) {
               return function (e) {
                  return function (f) {
                     return function (g) {
                        return function (h) {
                           return function (i) {
                              return function (j) {
                                 return function (k) {
                                    return function (l) {
                                       return function (m) {
                                          return function (n) {
                                             return {_: {}
                                                    ,caption: n
                                                    ,code: c
                                                    ,editingMode: m
                                                    ,exName: b
                                                    ,inputExp: d
                                                    ,midOffsetX: i
                                                    ,midOffsetY: j
                                                    ,mode: f
                                                    ,mouseMode: g
                                                    ,orient: h
                                                    ,scratchCode: a
                                                    ,showZones: k
                                                    ,slate: e
                                                    ,syncOptions: l};
                                          };
                                       };
                                    };
                                 };
                              };
                           };
                        };
                     };
                  };
               };
            };
         };
      };
   };
   _elm.InterfaceModel.values = {_op: _op
                                ,Model: Model
                                ,AdHoc: AdHoc
                                ,SyncSelect: SyncSelect
                                ,Live: Live
                                ,Print: Print
                                ,MouseNothing: MouseNothing
                                ,MouseObject: MouseObject
                                ,MouseResizeMid: MouseResizeMid
                                ,Vertical: Vertical
                                ,Horizontal: Horizontal
                                ,Hovering: Hovering
                                ,LangError: LangError
                                ,CodeUpdate: CodeUpdate
                                ,SelectObject: SelectObject
                                ,MouseUp: MouseUp
                                ,MousePos: MousePos
                                ,Sync: Sync
                                ,TraverseOption: TraverseOption
                                ,SelectOption: SelectOption
                                ,SwitchMode: SwitchMode
                                ,SelectExample: SelectExample
                                ,Edit: Edit
                                ,Run: Run
                                ,ToggleOutput: ToggleOutput
                                ,ToggleZones: ToggleZones
                                ,ToggleThawed: ToggleThawed
                                ,SwitchOrient: SwitchOrient
                                ,StartResizingMid: StartResizingMid
                                ,Noop: Noop
                                ,UpdateModel: UpdateModel
                                ,events: events
                                ,mkLive: mkLive
                                ,mkLive_: mkLive_
                                ,sampleModel: sampleModel};
   return _elm.InterfaceModel.values;
};
Elm.InterfaceView2 = Elm.InterfaceView2 || {};
Elm.InterfaceView2.make = function (_elm) {
   "use strict";
   _elm.InterfaceView2 = _elm.InterfaceView2 || {};
   if (_elm.InterfaceView2.values)
   return _elm.InterfaceView2.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "InterfaceView2",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Config = Elm.Config.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $ExamplesGenerated = Elm.ExamplesGenerated.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Graphics$Input = Elm.Graphics.Input.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $InterfaceModel = Elm.InterfaceModel.make(_elm),
   $Lang = Elm.Lang.make(_elm),
   $LangSvg = Elm.LangSvg.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm),
   $Svg = Elm.Svg.make(_elm),
   $Svg$Events = Elm.Svg.Events.make(_elm),
   $Text = Elm.Text.make(_elm),
   $Utils = Elm.Utils.make(_elm),
   $VirtualDom = Elm.VirtualDom.make(_elm);
   var hoverInfo = F2(function (info,
   _v0) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple3":
            return function () {
                 var err = function (y) {
                    return A2($Basics._op["++"],
                    "hoverInfo: ",
                    $Basics.toString(y));
                 };
                 return A2($Basics.flip,
                 $Utils.bindMaybe,
                 A2($Dict.get,
                 _v0._0,
                 info.assignments))(function (d) {
                    return A2($Basics.flip,
                    $Utils.bindMaybe,
                    A2($Dict.get,
                    _v0._2,
                    d))(function (locs) {
                       return $Maybe.Just(A2($List.map,
                       function (_v5) {
                          return function () {
                             switch (_v5.ctor)
                             {case "_Tuple3":
                                return function () {
                                     var n = A3($Utils.justGet_,
                                     err({ctor: "_Tuple3"
                                         ,_0: _v0._0
                                         ,_1: _v0._2
                                         ,_2: _v5._0}),
                                     _v5._0,
                                     info.initSubst);
                                     return _U.eq(_v5._2,
                                     "") ? {ctor: "_Tuple2"
                                           ,_0: A2($Basics._op["++"],
                                           "loc_",
                                           $Basics.toString(_v5._0))
                                           ,_1: n} : {ctor: "_Tuple2"
                                                     ,_0: _v5._2
                                                     ,_1: n};
                                  }();}
                             _U.badCase($moduleName,
                             "between lines 543 and 545");
                          }();
                       },
                       locs));
                    });
                 });
              }();}
         _U.badCase($moduleName,
         "between lines 538 and 545");
      }();
   });
   var dropdownExamples = F3(function (model,
   w,
   h) {
      return function () {
         var examples = function () {
            var _v10 = model.mode;
            switch (_v10.ctor)
            {case "AdHoc":
               return function () {
                    var foo = function (_v11) {
                       return function () {
                          switch (_v11.ctor)
                          {case "_Tuple2":
                             return {ctor: "_Tuple2"
                                    ,_0: _v11._0
                                    ,_1: $InterfaceModel.Noop};}
                          _U.badCase($moduleName,
                          "on line 486, column 33 to 43");
                       }();
                    };
                    return A2($List.map,
                    foo,
                    A2($List.filter,
                    function ($) {
                       return F2(function (x,y) {
                          return _U.eq(x,y);
                       })(model.exName)($Basics.fst($));
                    },
                    $ExamplesGenerated.list));
                 }();}
            return function () {
               var foo = function (_v15) {
                  return function () {
                     switch (_v15.ctor)
                     {case "_Tuple2":
                        return {ctor: "_Tuple2"
                               ,_0: _v15._0
                               ,_1: A2($InterfaceModel.SelectExample,
                               _v15._0,
                               _v15._1)};}
                     _U.badCase($moduleName,
                     "on line 489, column 33 to 65");
                  }();
               };
               return A2($List.map,
               foo,
               $ExamplesGenerated.list);
            }();
         }();
         return A2($Graphics$Input.dropDown,
         $Signal.message($InterfaceModel.events.address),
         examples);
      }();
   });
   var hBtn = $Config.params.mainSection.widgets.hBtn;
   var wBtn = $Config.params.mainSection.widgets.wBtn;
   var gapWidget = F2(function (w,
   h) {
      return A2($Graphics$Element.spacer,
      w,
      h);
   });
   var codebox_ = F5(function (w,
   h,
   event,
   s,
   readOnly) {
      return A2($Html.toElement,
      w,
      h)(A2($Html.textarea,
      A2($Basics._op["++"],
      _L.fromArray([$Html$Attributes.id("codeBox")
                   ,$Html$Attributes.spellcheck(false)
                   ,$Html$Attributes.readonly(readOnly)
                   ,$Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                         ,_0: "font-family"
                                                         ,_1: $Config.params.mainSection.codebox.font}
                                                        ,{ctor: "_Tuple2"
                                                         ,_0: "font-size"
                                                         ,_1: $Config.params.mainSection.codebox.fontSize}
                                                        ,{ctor: "_Tuple2"
                                                         ,_0: "border"
                                                         ,_1: $Config.params.mainSection.codebox.border}
                                                        ,{ctor: "_Tuple2"
                                                         ,_0: "whiteSpace"
                                                         ,_1: "pre"}
                                                        ,{ctor: "_Tuple2"
                                                         ,_0: "height"
                                                         ,_1: "99%"}
                                                        ,{ctor: "_Tuple2"
                                                         ,_0: "width"
                                                         ,_1: "99%"}
                                                        ,{ctor: "_Tuple2"
                                                         ,_0: "resize"
                                                         ,_1: "none"}
                                                        ,{ctor: "_Tuple2"
                                                         ,_0: "overflow"
                                                         ,_1: "auto"}]))
                   ,$Html$Attributes.value(s)
                   ,A2($Html$Events.onMouseUp,
                   $InterfaceModel.events.address,
                   $InterfaceModel.MouseUp)]),
      event),
      _L.fromArray([])));
   });
   var codebox = F3(function (w,
   h,
   model) {
      return function () {
         var event = function () {
            var _v19 = model.mode;
            switch (_v19.ctor)
            {case "SyncSelect":
               return _L.fromArray([]);}
            return _L.fromArray([A3($Html$Events.on,
            "input",
            $Html$Events.targetValue,
            function ($) {
               return $Signal.message($InterfaceModel.events.address)($InterfaceModel.CodeUpdate($));
            })]);
         }();
         return A5(codebox_,
         w,
         h,
         event,
         model.code,
         $Basics.not(model.editingMode));
      }();
   });
   var colorDebug_ = F2(function (c1,
   c2) {
      return $Config.params.debugLayout ? $Graphics$Element.color(c1) : $Graphics$Element.color(c2);
   });
   var colorDebug = function (c1) {
      return A2(colorDebug_,
      c1,
      $Color.darkGray);
   };
   var caption = F3(function (model,
   w,
   h) {
      return function () {
         var eStr = function ($) {
            return $Graphics$Element.leftAligned($Text.monospace($Text.fromString($)));
         };
         return colorDebug($Color.orange)(A3($Graphics$Element.container,
         w,
         h,
         $Graphics$Element.topLeft)(function () {
            var _v22 = {ctor: "_Tuple3"
                       ,_0: model.caption
                       ,_1: model.mode
                       ,_2: model.mouseMode};
            switch (_v22.ctor)
            {case "_Tuple3":
               switch (_v22._0.ctor)
                 {case "Just":
                    switch (_v22._0._0.ctor)
                      {case "Hovering":
                         switch (_v22._0._0._0.ctor)
                           {case "_Tuple3":
                              switch (_v22._1.ctor)
                                {case "Live":
                                   switch (_v22._2.ctor)
                                     {case "MouseNothing":
                                        return function () {
                                             var _v33 = A2(hoverInfo,
                                             _v22._1._0,
                                             {ctor: "_Tuple3"
                                             ,_0: _v22._0._0._0._0
                                             ,_1: _v22._0._0._0._1
                                             ,_2: _v22._0._0._0._2});
                                             switch (_v33.ctor)
                                             {case "Just":
                                                return function () {
                                                     var numLocs = A2($List.map,
                                                     function (_v35) {
                                                        return function () {
                                                           switch (_v35.ctor)
                                                           {case "_Tuple2":
                                                              return A2($Basics._op["++"],
                                                                $Basics.toString(_v35._1),
                                                                $Utils.braces(_v35._0));}
                                                           _U.badCase($moduleName,
                                                           "on line 528, column 49 to 77");
                                                        }();
                                                     },
                                                     _v33._0);
                                                     var line1 = A2($Basics._op["++"],
                                                     A2($Basics._op["++"],
                                                     _v22._0._0._0._1,
                                                     $Basics.toString(_v22._0._0._0._0)),
                                                     A2($Basics._op["++"],
                                                     " ",
                                                     _v22._0._0._0._2));
                                                     var line2 = $Utils.spaces(numLocs);
                                                     return eStr(A2($Basics._op["++"],
                                                     " ",
                                                     A2($Basics._op["++"],
                                                     line1,
                                                     A2($Basics._op["++"],
                                                     "\n ",
                                                     line2))));
                                                  }();
                                                case "Nothing":
                                                return $Graphics$Element.empty;}
                                             _U.badCase($moduleName,
                                             "between lines 525 and 532");
                                          }();}
                                     break;}
                                break;}
                           break;
                         case "LangError":
                         return eStr(_v22._0._0._0);}
                      break;}
                 break;}
            return $Graphics$Element.empty;
         }()));
      }();
   });
   var strTitle = A2($Basics._op["++"],
   " sketch-n-sketch ",
   $Config.params.strVersion);
   var cursorStyle = function (s) {
      return A2($LangSvg.attr,
      "cursor",
      s);
   };
   var cursorOfZone = function (zone) {
      return _U.eq(zone,
      "Interior") ? cursorStyle("move") : _U.eq(zone,
      "RightEdge") ? cursorStyle("ew-resize") : _U.eq(zone,
      "BotRightCorner") ? cursorStyle("nwse-resize") : _U.eq(zone,
      "BotEdge") ? cursorStyle("ns-resize") : _U.eq(zone,
      "BotLeftCorner") ? cursorStyle("nesw-resize") : _U.eq(zone,
      "LeftEdge") ? cursorStyle("ew-resize") : _U.eq(zone,
      "TopLeftCorner") ? cursorStyle("nwse-resize") : _U.eq(zone,
      "TopEdge") ? cursorStyle("ns-resize") : _U.eq(zone,
      "TopRightCorner") ? cursorStyle("nesw-resize") : _U.eq(zone,
      "Edge") ? cursorStyle("pointer") : cursorStyle("default");
   };
   var onMouseOut = function ($) {
      return $Svg$Events.onMouseOut($Signal.message($InterfaceModel.events.address)($));
   };
   var onMouseOver = function ($) {
      return $Svg$Events.onMouseOver($Signal.message($InterfaceModel.events.address)($));
   };
   var onMouseUp = function ($) {
      return $Svg$Events.onMouseUp($Signal.message($InterfaceModel.events.address)($));
   };
   var onMouseDown = function ($) {
      return $Svg$Events.onMouseDown($Signal.message($InterfaceModel.events.address)($));
   };
   var zoneEvents = F3(function (id,
   shape,
   zone) {
      return _L.fromArray([onMouseDown(A3($InterfaceModel.SelectObject,
                          id,
                          shape,
                          zone))
                          ,onMouseUp($InterfaceModel.MouseUp)
                          ,onMouseOver($InterfaceModel.UpdateModel(function (m) {
                             return _U.replace([["caption"
                                                ,$Maybe.Just($InterfaceModel.Hovering({ctor: "_Tuple3"
                                                                                      ,_0: id
                                                                                      ,_1: shape
                                                                                      ,_2: zone}))]],
                             m);
                          }))
                          ,onMouseOut($InterfaceModel.UpdateModel(function (m) {
                             return _U.replace([["caption"
                                                ,$Maybe.Nothing]],
                             m);
                          }))]);
   });
   var zone = F5(function (svgFunc,
   id,
   shape,
   zone,
   l) {
      return A2(svgFunc,
      A2($Basics._op["++"],
      A3(zoneEvents,id,shape,zone),
      l),
      _L.fromArray([]));
   });
   var zoneBorder = F6(function (svgFunc,
   id,
   shape,
   zone,
   flag,
   show) {
      return function ($) {
         return A2($Basics.flip,
         svgFunc,
         _L.fromArray([]))(F2(function (x,
         y) {
            return A2($Basics._op["++"],
            x,
            y);
         })(A3(zoneEvents,
         id,
         shape,
         zone))(F2(function (x,y) {
            return A2($Basics._op["++"],
            x,
            y);
         })(_L.fromArray([flag && show ? A2($LangSvg.attr,
                         "stroke",
                         "rgba(255,0,0,0.5)") : A2($LangSvg.attr,
                         "stroke",
                         "rgba(0,0,0,0.0)")
                         ,A2($LangSvg.attr,
                         "strokeWidth",
                         flag ? "5" : "0")
                         ,A2($LangSvg.attr,
                         "fill",
                         "rgba(0,0,0,0)")
                         ,cursorOfZone(zone)]))($)));
      };
   });
   var zonePoint = F4(function (id,
   shape,
   zone,
   show) {
      return function ($) {
         return A2($Basics.flip,
         $Svg.circle,
         _L.fromArray([]))(F2(function (x,
         y) {
            return A2($Basics._op["++"],
            x,
            y);
         })(A3(zoneEvents,
         id,
         shape,
         zone))(F2(function (x,y) {
            return A2($Basics._op["++"],
            x,
            y);
         })(_L.fromArray([A2($LangSvg.attr,
                         "r",
                         "6")
                         ,show ? A2($LangSvg.attr,
                         "fill",
                         "rgba(255,0,0,0.5)") : A2($LangSvg.attr,
                         "fill",
                         "rgba(0,0,0,0.0)")
                         ,cursorStyle("pointer")]))($)));
      };
   });
   var attrNumTr = F2(function (k,
   nt) {
      return A2($LangSvg.compileAttr,
      k,
      $LangSvg.ANum(nt));
   });
   var zonePoints = F4(function (id,
   shape,
   show,
   pts) {
      return A2($Basics.flip,
      $Utils.mapi,
      pts)(function (_v39) {
         return function () {
            switch (_v39.ctor)
            {case "_Tuple2":
               switch (_v39._1.ctor)
                 {case "_Tuple2":
                    return A5(zonePoint,
                      id,
                      shape,
                      A2($LangSvg.addi,
                      "Point",
                      _v39._0),
                      show,
                      _L.fromArray([A2(attrNumTr,
                                   "cx",
                                   _v39._1._0)
                                   ,A2(attrNumTr,
                                   "cy",
                                   _v39._1._1)]));}
                 break;}
            _U.badCase($moduleName,
            "on line 136, column 5 to 84");
         }();
      });
   });
   var makeZonesPath = F4(function (showZones,
   shape,
   id,
   l) {
      return function () {
         var _ = A2($Utils.assert,
         "makeZonesPoly",
         _U.eq(shape,"path"));
         var cmds = $Basics.fst($LangSvg.toPath(A2($Utils.find_,
         l,
         "d")));
         _op["+++"] = F2(function (_v45,
         acc) {
            return function () {
               switch (_v45.ctor)
               {case "_Tuple2":
                  return function () {
                       switch (_v45._0.ctor)
                       {case "Nothing": return acc;}
                       return A2($List._op["::"],
                       _v45._1,
                       acc);
                    }();}
               _U.badCase($moduleName,
               "on line 226, column 25 to 68");
            }();
         });
         var pts = A3($List.foldr,
         F2(function (c,acc) {
            return function () {
               switch (c.ctor)
               {case "CmdA":
                  return A2(_op["+++"],c._6,acc);
                  case "CmdC":
                  return A2(_op["+++"],
                    c._1,
                    A2(_op["+++"],
                    c._2,
                    A2(_op["+++"],c._3,acc)));
                  case "CmdHV": return acc;
                  case "CmdMLT":
                  return A2(_op["+++"],c._1,acc);
                  case "CmdSQ":
                  return A2(_op["+++"],
                    c._1,
                    A2(_op["+++"],c._2,acc));
                  case "CmdZ": return acc;}
               _U.badCase($moduleName,
               "between lines 228 and 234");
            }();
         }),
         _L.fromArray([]),
         cmds);
         return A4(zonePoints,
         id,
         shape,
         showZones,
         pts);
      }();
   });
   var zoneLine = F6(function (id,
   shape,
   zone,
   show,
   _v70,
   _v71) {
      return function () {
         switch (_v71.ctor)
         {case "_Tuple2":
            return function () {
                 switch (_v70.ctor)
                 {case "_Tuple2":
                    return A7(zoneBorder,
                      $Svg.line,
                      id,
                      shape,
                      zone,
                      true,
                      show,
                      _L.fromArray([A2(attrNumTr,
                                   "x1",
                                   _v70._0)
                                   ,A2(attrNumTr,"y1",_v70._1)
                                   ,A2(attrNumTr,"x2",_v71._0)
                                   ,A2(attrNumTr,"y2",_v71._1)
                                   ,cursorStyle("pointer")]));}
                 _U.badCase($moduleName,
                 "between lines 139 and 142");
              }();}
         _U.badCase($moduleName,
         "between lines 139 and 142");
      }();
   });
   var makeZonesPoly = F4(function (showZones,
   shape,
   id,
   l) {
      return function () {
         var _ = A2($Utils.assert,
         "makeZonesPoly",
         _U.eq(shape,
         "polygon") || _U.eq(shape,
         "polyline"));
         var pts = $LangSvg.toPoints(A2($Utils.find_,
         l,
         "points"));
         var zPts = A4(zonePoints,
         id,
         shape,
         showZones,
         pts);
         var zLines = function () {
            var pairs = A2($Utils.adjacentPairs,
            _U.eq(shape,"polygon"),
            pts);
            var f = function (_v78) {
               return function () {
                  switch (_v78.ctor)
                  {case "_Tuple2":
                     switch (_v78._1.ctor)
                       {case "_Tuple2":
                          return A6(zoneLine,
                            id,
                            shape,
                            A2($LangSvg.addi,
                            "Edge",
                            _v78._0),
                            showZones,
                            _v78._1._0,
                            _v78._1._1);}
                       break;}
                  _U.badCase($moduleName,
                  "on line 212, column 27 to 78");
               }();
            };
            return A2($Utils.mapi,f,pairs);
         }();
         var zInterior = A7(zoneBorder,
         $Svg.polygon,
         id,
         shape,
         "Interior",
         false,
         showZones,
         _L.fromArray([A2($LangSvg.compileAttr,
         "points",
         $LangSvg.APoints(pts))]));
         var firstEqLast = function (xs) {
            return _U.eq($Utils.head_(xs),
            $Utils.head_($List.reverse(xs)));
         };
         return _U.eq(shape,
         "polygon") ? A2($List._op["::"],
         zInterior,
         A2($Basics._op["++"],
         zLines,
         zPts)) : firstEqLast(pts) ? A2($List._op["::"],
         zInterior,
         A2($Basics._op["++"],
         zLines,
         zPts)) : A2($Basics._op["++"],
         zLines,
         zPts);
      }();
   });
   var attrNum = F2(function (k,
   n) {
      return A2($LangSvg.compileAttr,
      k,
      $LangSvg.ANum({ctor: "_Tuple2"
                    ,_0: n
                    ,_1: $Lang.dummyTrace}));
   });
   var makeZonesEllipse = F4(function (showZones,
   shape,
   id,
   l) {
      return function () {
         var _ = A2($Utils.assert,
         "makeZonesEllipse",
         _U.eq(shape,
         "circle") || _U.eq(shape,
         "ellipse"));
         var foo = function () {
            var _ = A2($List.map,
            function ($) {
               return $LangSvg.toNum($Utils.find_(l)($));
            },
            _L.fromArray(["cx","cy"]));
            var cx = function () {
               switch (_.ctor)
               {case "::": switch (_._1.ctor)
                    {case "::":
                       switch (_._1._1.ctor)
                         {case "[]": return _._0;}
                         break;}
                    break;}
               _U.badCase($moduleName,
               "on line 193, column 19 to 64");
            }();
            var cy = function () {
               switch (_.ctor)
               {case "::": switch (_._1.ctor)
                    {case "::":
                       switch (_._1._1.ctor)
                         {case "[]": return _._1._0;}
                         break;}
                    break;}
               _U.badCase($moduleName,
               "on line 193, column 19 to 64");
            }();
            return _L.fromArray([A2(attrNum,
                                "cx",
                                cx)
                                ,A2(attrNum,"cy",cy)]);
         }();
         var $ = _U.eq(shape,
         "circle") ? function () {
            var _ = A2($List.map,
            function ($) {
               return $LangSvg.toNum($Utils.find_(l)($));
            },
            _L.fromArray(["r"]));
            var r = function () {
               switch (_.ctor)
               {case "::": switch (_._1.ctor)
                    {case "[]": return _._0;}
                    break;}
               _U.badCase($moduleName,
               "on line 197, column 17 to 56");
            }();
            return {ctor: "_Tuple2"
                   ,_0: $Svg.circle
                   ,_1: _L.fromArray([A2(attrNum,
                   "r",
                   r)])};
         }() : function () {
            var _ = A2($List.map,
            function ($) {
               return $LangSvg.toNum($Utils.find_(l)($));
            },
            _L.fromArray(["rx","ry"]));
            var rx = function () {
               switch (_.ctor)
               {case "::": switch (_._1.ctor)
                    {case "::":
                       switch (_._1._1.ctor)
                         {case "[]": return _._0;}
                         break;}
                    break;}
               _U.badCase($moduleName,
               "on line 200, column 21 to 66");
            }();
            var ry = function () {
               switch (_.ctor)
               {case "::": switch (_._1.ctor)
                    {case "::":
                       switch (_._1._1.ctor)
                         {case "[]": return _._1._0;}
                         break;}
                    break;}
               _U.badCase($moduleName,
               "on line 200, column 21 to 66");
            }();
            return {ctor: "_Tuple2"
                   ,_0: $Svg.ellipse
                   ,_1: _L.fromArray([A2(attrNum,
                                     "rx",
                                     rx)
                                     ,A2(attrNum,"ry",ry)])};
         }(),
         f = $._0,
         bar = $._1;
         var zInterior = A7(zoneBorder,
         f,
         id,
         shape,
         "Interior",
         false,
         showZones,
         A2($Basics._op["++"],foo,bar));
         var zEdge = A7(zoneBorder,
         f,
         id,
         shape,
         "Edge",
         true,
         showZones,
         A2($Basics._op["++"],foo,bar));
         return _L.fromArray([zEdge
                             ,zInterior]);
      }();
   });
   var makeZones = F4(function (showZones,
   shape,
   id,
   l) {
      return function () {
         switch (shape)
         {case "circle":
            return A4(makeZonesEllipse,
              showZones,
              shape,
              id,
              l);
            case "ellipse":
            return A4(makeZonesEllipse,
              showZones,
              shape,
              id,
              l);
            case "line":
            return function () {
                 var _ = A2($List.map,
                 function ($) {
                    return $LangSvg.toNumTr($Utils.find_(l)($));
                 },
                 _L.fromArray(["x1"
                              ,"y1"
                              ,"x2"
                              ,"y2"]));
                 var x1 = function () {
                    switch (_.ctor)
                    {case "::": switch (_._1.ctor)
                         {case "::":
                            switch (_._1._1.ctor)
                              {case "::":
                                 switch (_._1._1._1.ctor)
                                   {case "::":
                                      switch (_._1._1._1._1.ctor)
                                        {case "[]": return _._0;}
                                        break;}
                                   break;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 178, column 29 to 86");
                 }();
                 var x2 = function () {
                    switch (_.ctor)
                    {case "::": switch (_._1.ctor)
                         {case "::":
                            switch (_._1._1.ctor)
                              {case "::":
                                 switch (_._1._1._1.ctor)
                                   {case "::":
                                      switch (_._1._1._1._1.ctor)
                                        {case "[]": return _._1._1._0;}
                                        break;}
                                   break;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 178, column 29 to 86");
                 }();
                 var y1 = function () {
                    switch (_.ctor)
                    {case "::": switch (_._1.ctor)
                         {case "::":
                            switch (_._1._1.ctor)
                              {case "::":
                                 switch (_._1._1._1.ctor)
                                   {case "::":
                                      switch (_._1._1._1._1.ctor)
                                        {case "[]": return _._1._0;}
                                        break;}
                                   break;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 178, column 29 to 86");
                 }();
                 var y2 = function () {
                    switch (_.ctor)
                    {case "::": switch (_._1.ctor)
                         {case "::":
                            switch (_._1._1.ctor)
                              {case "::":
                                 switch (_._1._1._1.ctor)
                                   {case "::":
                                      switch (_._1._1._1._1.ctor)
                                        {case "[]":
                                           return _._1._1._1._0;}
                                        break;}
                                   break;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 178, column 29 to 86");
                 }();
                 var zLine = A6(zoneLine,
                 id,
                 shape,
                 "Edge",
                 showZones,
                 {ctor: "_Tuple2",_0: x1,_1: y1},
                 {ctor: "_Tuple2"
                 ,_0: x2
                 ,_1: y2});
                 var zPts = A4(zonePoints,
                 id,
                 shape,
                 showZones,
                 _L.fromArray([{ctor: "_Tuple2"
                               ,_0: x1
                               ,_1: y1}
                              ,{ctor: "_Tuple2"
                               ,_0: x2
                               ,_1: y2}]));
                 return A2($List._op["::"],
                 zLine,
                 zPts);
              }();
            case "path":
            return A4(makeZonesPath,
              showZones,
              shape,
              id,
              l);
            case "polygon":
            return A4(makeZonesPoly,
              showZones,
              shape,
              id,
              l);
            case "polyline":
            return A4(makeZonesPoly,
              showZones,
              shape,
              id,
              l);
            case "rect":
            return function () {
                 var mk = F5(function (zone,
                 x_,
                 y_,
                 w_,
                 h_) {
                    return A7(zoneBorder,
                    $Svg.rect,
                    id,
                    shape,
                    zone,
                    true,
                    showZones,
                    _L.fromArray([A2(attrNum,"x",x_)
                                 ,A2(attrNum,"y",y_)
                                 ,A2(attrNum,"width",w_)
                                 ,A2(attrNum,"height",h_)]));
                 });
                 var gut = 0.125;
                 var _ = A2($List.map,
                 function ($) {
                    return $LangSvg.toNum($Utils.find_(l)($));
                 },
                 _L.fromArray(["x"
                              ,"y"
                              ,"width"
                              ,"height"]));
                 var h = function () {
                    switch (_.ctor)
                    {case "::": switch (_._1.ctor)
                         {case "::":
                            switch (_._1._1.ctor)
                              {case "::":
                                 switch (_._1._1._1.ctor)
                                   {case "::":
                                      switch (_._1._1._1._1.ctor)
                                        {case "[]":
                                           return _._1._1._1._0;}
                                        break;}
                                   break;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 156, column 27 to 87");
                 }();
                 var w = function () {
                    switch (_.ctor)
                    {case "::": switch (_._1.ctor)
                         {case "::":
                            switch (_._1._1.ctor)
                              {case "::":
                                 switch (_._1._1._1.ctor)
                                   {case "::":
                                      switch (_._1._1._1._1.ctor)
                                        {case "[]": return _._1._1._0;}
                                        break;}
                                   break;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 156, column 27 to 87");
                 }();
                 var x = function () {
                    switch (_.ctor)
                    {case "::": switch (_._1.ctor)
                         {case "::":
                            switch (_._1._1.ctor)
                              {case "::":
                                 switch (_._1._1._1.ctor)
                                   {case "::":
                                      switch (_._1._1._1._1.ctor)
                                        {case "[]": return _._0;}
                                        break;}
                                   break;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 156, column 27 to 87");
                 }();
                 var y = function () {
                    switch (_.ctor)
                    {case "::": switch (_._1.ctor)
                         {case "::":
                            switch (_._1._1.ctor)
                              {case "::":
                                 switch (_._1._1._1.ctor)
                                   {case "::":
                                      switch (_._1._1._1._1.ctor)
                                        {case "[]": return _._1._0;}
                                        break;}
                                   break;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 156, column 27 to 87");
                 }();
                 var $ = {ctor: "_Tuple3"
                         ,_0: x
                         ,_1: x + gut * w
                         ,_2: x + (1 - gut) * w},
                 x0 = $._0,
                 x1 = $._1,
                 x2 = $._2;
                 var $ = {ctor: "_Tuple3"
                         ,_0: y
                         ,_1: y + gut * h
                         ,_2: y + (1 - gut) * h},
                 y0 = $._0,
                 y1 = $._1,
                 y2 = $._2;
                 var $ = {ctor: "_Tuple2"
                         ,_0: gut * w
                         ,_1: (1 - 2 * gut) * w},
                 wSlim = $._0,
                 wWide = $._1;
                 var $ = {ctor: "_Tuple2"
                         ,_0: gut * h
                         ,_1: (1 - 2 * gut) * h},
                 hSlim = $._0,
                 hWide = $._1;
                 return _L.fromArray([A5(mk,
                                     "Interior",
                                     x1,
                                     y1,
                                     wWide,
                                     hWide)
                                     ,A5(mk,
                                     "RightEdge",
                                     x2,
                                     y1,
                                     wSlim,
                                     hWide)
                                     ,A5(mk,
                                     "BotRightCorner",
                                     x2,
                                     y2,
                                     wSlim,
                                     hSlim)
                                     ,A5(mk,
                                     "BotEdge",
                                     x1,
                                     y2,
                                     wWide,
                                     hSlim)
                                     ,A5(mk,
                                     "BotLeftCorner",
                                     x0,
                                     y2,
                                     wSlim,
                                     hSlim)
                                     ,A5(mk,
                                     "LeftEdge",
                                     x0,
                                     y1,
                                     wSlim,
                                     hWide)
                                     ,A5(mk,
                                     "TopLeftCorner",
                                     x0,
                                     y0,
                                     wSlim,
                                     hSlim)
                                     ,A5(mk,
                                     "TopEdge",
                                     x1,
                                     y0,
                                     wWide,
                                     hSlim)
                                     ,A5(mk,
                                     "TopRightCorner",
                                     x2,
                                     y0,
                                     wSlim,
                                     hSlim)]);
              }();}
         return _L.fromArray([]);
      }();
   });
   var buildSvg_ = F4(function (addZones,
   showZones,
   d,
   i) {
      return function () {
         var _v180 = A3($Utils.justGet_,
         A2($Basics._op["++"],
         "buildSvg_ ",
         $Basics.toString(i)),
         i,
         d);
         switch (_v180.ctor)
         {case "SvgNode":
            return function () {
                 var zones = addZones ? A4(makeZones,
                 showZones,
                 _v180._0,
                 i,
                 _v180._1) : _L.fromArray([]);
                 var children = A2($List.map,
                 A3(buildSvg_,
                 addZones,
                 showZones,
                 d),
                 _v180._2);
                 var mainshape = A3($LangSvg.svg,
                 _v180._0,
                 $LangSvg.compileAttrs(_v180._1),
                 children);
                 return A2($Svg.svg,
                 _L.fromArray([]),
                 A2($List._op["::"],
                 mainshape,
                 zones));
              }();
            case "TextNode":
            return $VirtualDom.text(_v180._0);}
         _U.badCase($moduleName,
         "between lines 59 and 68");
      }();
   });
   var buildSvg = F3(function (addZones,
   showZones,
   _v185) {
      return function () {
         switch (_v185.ctor)
         {case "_Tuple2":
            return A4(buildSvg_,
              addZones,
              showZones,
              _v185._1,
              _v185._0);}
         _U.badCase($moduleName,
         "on line 55, column 37 to 69");
      }();
   });
   var canvas_ = F3(function (w,
   h,
   model) {
      return function () {
         var addZones = $Basics.not(model.editingMode);
         var svg = A3(buildSvg,
         addZones,
         model.showZones,
         model.slate);
         return A2($Html.toElement,
         w,
         h)(A2($Svg.svg,
         _L.fromArray([onMouseUp($InterfaceModel.MouseUp)
                      ,$Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                            ,_0: "width"
                                                            ,_1: "99%"}
                                                           ,{ctor: "_Tuple2"
                                                            ,_0: "height"
                                                            ,_1: "99%"}
                                                           ,{ctor: "_Tuple2"
                                                            ,_0: "border"
                                                            ,_1: $Config.params.mainSection.canvas.border}]))]),
         _L.fromArray([svg])));
      }();
   });
   var canvas = F3(function (w,
   h,
   model) {
      return function () {
         var _v189 = model.mode;
         switch (_v189.ctor)
         {case "Print":
            return A5(codebox_,
              w,
              h,
              _L.fromArray([]),
              _v189._0,
              true);}
         return A3(canvas_,w,h,model);
      }();
   });
   var dimToPix = function (d) {
      return A2($String.append,
      $Basics.toString(d),
      "px");
   };
   var buttonAttrs = F2(function (w,
   h) {
      return $Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                  ,_0: "width"
                                                  ,_1: dimToPix(w)}
                                                 ,{ctor: "_Tuple2"
                                                  ,_0: "height"
                                                  ,_1: dimToPix(h)}
                                                 ,{ctor: "_Tuple2"
                                                  ,_0: "font-family"
                                                  ,_1: $Config.params.mainSection.widgets.font}
                                                 ,{ctor: "_Tuple2"
                                                  ,_0: "font-size"
                                                  ,_1: $Config.params.mainSection.widgets.fontSize}]));
   });
   var simpleButton_ = F7(function (disabled,
   evt,
   value,
   name,
   text,
   w,
   h) {
      return A2($Html.toElement,
      w,
      h)(A2($Html.button,
      _L.fromArray([A2(buttonAttrs,
                   w,
                   h)
                   ,A2($Html$Events.onClick,
                   $InterfaceModel.events.address,
                   evt)
                   ,$Html$Attributes.value(value)
                   ,$Html$Attributes.name(name)
                   ,$Html$Attributes.disabled(disabled)]),
      _L.fromArray([$Html.text(text)])));
   });
   var simpleButton = simpleButton_(false);
   var syncButton = A4(simpleButton,
   $InterfaceModel.Sync,
   "Sync",
   "Sync the code to the canvas",
   "Sync");
   var syncButton_ = F3(function (w,
   h,
   model) {
      return function () {
         var _v191 = model.mode;
         switch (_v191.ctor)
         {case "AdHoc":
            return _L.fromArray([A2(syncButton,
              w,
              h)]);}
         return _L.fromArray([]);
      }();
   });
   var zoneButton = function (model) {
      return function () {
         var cap = model.showZones ? "[Zones] Shown" : "[Zones] Hidden";
         return A4(simpleButton,
         $InterfaceModel.ToggleZones,
         "ToggleZones",
         "Show/Hide Zones",
         cap);
      }();
   };
   var frozenButton = function (model) {
      return function () {
         var cap = model.syncOptions.thawedByDefault ? "[Default] n?" : "[Default] n!";
         return A4(simpleButton,
         $InterfaceModel.ToggleThawed,
         "ToggleThawed ",
         "Toggle ?/!",
         cap);
      }();
   };
   var chooseButton = F2(function (i,
   _v192) {
      return function () {
         switch (_v192.ctor)
         {case "_Tuple2":
            return function () {
                 var cap = _U.eq(i,
                 _v192._0 + 2) ? "Revert" : A2($Basics._op["++"],
                 "Select ",
                 $Utils.parens(A2($Basics._op["++"],
                 $Basics.toString(i),
                 A2($Basics._op["++"],
                 "/",
                 $Basics.toString(_v192._0 + 1)))));
                 return A4(simpleButton,
                 $InterfaceModel.SelectOption,
                 "Choose",
                 "Choose",
                 cap);
              }();}
         _U.badCase($moduleName,
         "between lines 467 and 471");
      }();
   });
   var editRunButton = F3(function (model,
   w,
   h) {
      return function () {
         var disabled = _U.eq(model.mode,
         $InterfaceModel.AdHoc);
         return function () {
            var _v196 = model.editingMode;
            switch (_v196)
            {case false:
               return A7(simpleButton_,
                 disabled,
                 $InterfaceModel.Edit,
                 "Edit",
                 "Edit",
                 "Edit Code",
                 w,
                 h);
               case true:
               return A7(simpleButton_,
                 disabled,
                 $InterfaceModel.Run,
                 "Run",
                 "Run",
                 "Run Code",
                 w,
                 h);}
            _U.badCase($moduleName,
            "between lines 442 and 444");
         }();
      }();
   });
   var outputButton = F3(function (model,
   w,
   h) {
      return function () {
         var disabled = _U.eq(model.mode,
         $InterfaceModel.AdHoc);
         var cap = function () {
            var _v197 = model.mode;
            switch (_v197.ctor)
            {case "Print":
               return "[Out] SVG";}
            return "[Out] Canvas";
         }();
         return A7(simpleButton_,
         disabled,
         $InterfaceModel.ToggleOutput,
         "Toggle Output",
         "Toggle Output",
         cap,
         w,
         h);
      }();
   });
   var prevButton = function (i) {
      return function () {
         var enabled = _U.cmp(i,
         1) > 0;
         return A5(simpleButton_,
         $Basics.not(enabled),
         $InterfaceModel.TraverseOption(-1),
         "Prev",
         "Prev",
         "Show Prev");
      }();
   };
   var nextButton = F2(function (i,
   _v199) {
      return function () {
         switch (_v199.ctor)
         {case "_Tuple2":
            return function () {
                 var enabled = _U.cmp(i,
                 _v199._0 + 2) < 0;
                 return A5(simpleButton_,
                 $Basics.not(enabled),
                 $InterfaceModel.TraverseOption(1),
                 "Next",
                 "Next",
                 "Show Next");
              }();}
         _U.badCase($moduleName,
         "between lines 478 and 479");
      }();
   });
   var modeButton = function (model) {
      return _U.eq(model.mode,
      $InterfaceModel.AdHoc) ? A5(simpleButton_,
      true,
      $InterfaceModel.Noop,
      "SwitchMode",
      "SwitchMode",
      "[Mode] Ad Hoc") : A5(simpleButton_,
      false,
      $InterfaceModel.SwitchMode($InterfaceModel.AdHoc),
      "SwitchMode",
      "SwitchMode",
      "[Mode] Live");
   };
   var middleWidgets = F5(function (w,
   h,
   wWrap,
   hWrap,
   model) {
      return $List.map(A3($Graphics$Element.container,
      wWrap,
      hWrap,
      $Graphics$Element.middle))(function () {
         var _v203 = {ctor: "_Tuple2"
                     ,_0: model.editingMode
                     ,_1: model.mode};
         switch (_v203.ctor)
         {case "_Tuple2":
            switch (_v203._0)
              {case false:
                 switch (_v203._1.ctor)
                   {case "Print":
                      return _L.fromArray([A3(dropdownExamples,
                                          model,
                                          w,
                                          h)
                                          ,A3(editRunButton,model,w,h)
                                          ,A3(outputButton,model,w,h)]);
                      case "SyncSelect":
                      return _L.fromArray([A2(gapWidget,
                                          w,
                                          h)
                                          ,A2(gapWidget,w,h)
                                          ,A3(prevButton,_v203._1._0,w,h)
                                          ,A4(chooseButton,
                                          _v203._1._0,
                                          _v203._1._1,
                                          w,
                                          h)
                                          ,A4(nextButton,
                                          _v203._1._0,
                                          _v203._1._1,
                                          w,
                                          h)]);}
                   return A2($Basics._op["++"],
                   _L.fromArray([A3(dropdownExamples,
                                model,
                                w,
                                h)
                                ,A3(editRunButton,model,w,h)
                                ,A3(outputButton,model,w,h)
                                ,A2(gapWidget,w,h)
                                ,A3(zoneButton,model,w,h)
                                ,A3(frozenButton,model,w,h)
                                ,A3(modeButton,model,w,h)]),
                   A3(syncButton_,w,h,model));
                 case true:
                 return _L.fromArray([A3(dropdownExamples,
                                     model,
                                     w,
                                     h)
                                     ,A3(editRunButton,model,w,h)]);}
              break;}
         _U.badCase($moduleName,
         "between lines 301 and 326");
      }());
   });
   var orientationButton = F3(function (w,
   h,
   model) {
      return A2($Html.button,
      _L.fromArray([A2(buttonAttrs,
                   w,
                   h)
                   ,A2($Html$Events.onClick,
                   $InterfaceModel.events.address,
                   $InterfaceModel.SwitchOrient)]),
      _L.fromArray([$Html.text(A2($Basics._op["++"],
      "[Orientation] ",
      $Basics.toString(model.orient)))]));
   });
   var gutterForResizing = F3(function (orient,
   w,
   h) {
      return function () {
         var s = _U.eq(orient,
         $InterfaceModel.Vertical) ? "ew-resize" : "ns-resize";
         return colorDebug($Color.darkBlue)(A2($Html.toElement,
         w,
         h)(A2($Html.div,
         _L.fromArray([A2($Html$Events.onMouseDown,
                      $InterfaceModel.events.address,
                      $InterfaceModel.StartResizingMid)
                      ,A2($Html$Events.onMouseUp,
                      $InterfaceModel.events.address,
                      $InterfaceModel.MouseUp)
                      ,$Html$Attributes.style(_L.fromArray([{ctor: "_Tuple2"
                                                            ,_0: "width"
                                                            ,_1: dimToPix(w)}
                                                           ,{ctor: "_Tuple2"
                                                            ,_0: "height"
                                                            ,_1: dimToPix(h)}
                                                           ,{ctor: "_Tuple2"
                                                            ,_0: "cursor"
                                                            ,_1: s}]))]),
         _L.fromArray([]))));
      }();
   });
   var mainSectionVertical = F3(function (w,
   h,
   model) {
      return function () {
         var hWidget = $Config.params.mainSection.widgets.hBtn + $Config.params.mainSection.vertical.hExtra;
         var hZInfo = $Config.params.mainSection.canvas.hZoneInfo;
         var hCanvas = h - hZInfo;
         var wMiddle = wBtn;
         var wGut = $Config.params.mainSection.vertical.wGut;
         var wCode_ = (w - wMiddle - wGut - wGut) / 2 | 0;
         var wCode = wCode_ + model.midOffsetX;
         var wCanvas = wCode_ - model.midOffsetX;
         var codeSection = A3(codebox,
         wCode,
         h,
         model);
         var canvasSection = A2($Graphics$Element.size,
         wCanvas,
         h)(A2($Graphics$Element.flow,
         $Graphics$Element.down,
         _L.fromArray([A3(canvas,
                      wCanvas,
                      hCanvas,
                      model)
                      ,A3(caption,
                      model,
                      wCanvas + 1,
                      hZInfo)])));
         var gutter = A3(gutterForResizing,
         model.orient,
         wGut,
         h);
         var middleSection = colorDebug($Color.lightBlue)(A2($Graphics$Element.size,
         wMiddle,
         h)($Graphics$Element.flow($Graphics$Element.down)(A5(middleWidgets,
         wBtn,
         hBtn,
         wMiddle,
         hWidget,
         model))));
         return $Graphics$Element.flow($Graphics$Element.right)(_L.fromArray([codeSection
                                                                             ,gutter
                                                                             ,middleSection
                                                                             ,gutter
                                                                             ,canvasSection]));
      }();
   });
   var mainSectionHorizontal = F3(function (w,
   h,
   model) {
      return function () {
         var wWidget = $Config.params.mainSection.widgets.wBtn + $Config.params.mainSection.horizontal.wExtra;
         var hZInfo = $Config.params.mainSection.canvas.hZoneInfo;
         var hMiddle = hBtn;
         var hGut = $Config.params.mainSection.horizontal.hGut;
         var hCode_ = (h - hMiddle - hGut - hGut) / 2 | 0;
         var hCode = hCode_ + model.midOffsetY;
         var hCanvas = hCode_ - model.midOffsetY - hZInfo;
         var codeSection = A3(codebox,
         w,
         hCode,
         model);
         var canvasSection = A2($Graphics$Element.size,
         w,
         hCanvas + hZInfo)(A2($Graphics$Element.flow,
         $Graphics$Element.down,
         _L.fromArray([A3(canvas,
                      w,
                      hCanvas,
                      model)
                      ,A3(caption,
                      model,
                      w,
                      hZInfo + 1)])));
         var gutter = A3(gutterForResizing,
         model.orient,
         w,
         hGut);
         var middleSection = colorDebug($Color.lightBlue)(A2($Graphics$Element.size,
         w,
         hMiddle)($Graphics$Element.flow($Graphics$Element.right)(A5(middleWidgets,
         wBtn,
         hBtn,
         wWidget,
         hMiddle,
         model))));
         return $Graphics$Element.flow($Graphics$Element.down)(_L.fromArray([codeSection
                                                                            ,gutter
                                                                            ,middleSection
                                                                            ,gutter
                                                                            ,canvasSection]));
      }();
   });
   var view = F2(function (_v209,
   model) {
      return function () {
         switch (_v209.ctor)
         {case "_Tuple2":
            return function () {
                 var hBot = $Config.params.botSection.h;
                 var hTop = $Config.params.topSection.h;
                 var hMid = _v209._1 - hTop - hBot - 1;
                 var hTot = hTop + hMid + hBot;
                 var wGut = $Config.params.wGut;
                 var wAll = _v209._0 - 2 * wGut - 1;
                 var topSection = function () {
                    var wJunk = $Config.params.topSection.wJunk;
                    var hBtnO = $Config.params.topSection.hBtnO;
                    var wBtnO = $Config.params.topSection.wBtnO;
                    var btnO = A2($Html.toElement,
                    wBtnO,
                    hBtnO)(A3(orientationButton,
                    wBtnO,
                    hBtnO,
                    model));
                    var wLogo = $Config.params.topSection.wLogo;
                    var logo = A3($Graphics$Element.image,
                    wLogo,
                    wLogo,
                    "sketch-n-sketch-logo.png");
                    var wSep = A2($Graphics$Element.spacer,
                    wAll - (wLogo + wBtnO + wJunk),
                    1);
                    var titleStyle = _U.replace([["typeface"
                                                 ,_L.fromArray(["Courier"
                                                               ,"monospace"])]
                                                ,["height",$Maybe.Just(18)]
                                                ,["bold",false]],
                    $Text.defaultStyle);
                    var title = $Graphics$Element.leftAligned(A2($Text.style,
                    titleStyle,
                    $Text.fromString(strTitle)));
                    return A2($Graphics$Element.size,
                    wAll,
                    hTop)(A2($Graphics$Element.flow,
                    $Graphics$Element.right,
                    _L.fromArray([A4($Graphics$Element.container,
                                 wLogo,
                                 hTop,
                                 $Graphics$Element.middle,
                                 logo)
                                 ,A3($Graphics$Element.container,
                                 wAll - wLogo,
                                 hTop,
                                 $Graphics$Element.middle)(A2($Graphics$Element.flow,
                                 $Graphics$Element.right,
                                 _L.fromArray([title
                                              ,wSep
                                              ,btnO])))])));
                 }();
                 var midSection = A2($Graphics$Element.size,
                 wAll,
                 hMid)(function () {
                    var _v213 = model.orient;
                    switch (_v213.ctor)
                    {case "Horizontal":
                       return A3(mainSectionHorizontal,
                         wAll,
                         hMid,
                         model);
                       case "Vertical":
                       return A3(mainSectionVertical,
                         wAll,
                         hMid,
                         model);}
                    _U.badCase($moduleName,
                    "between lines 586 and 588");
                 }());
                 var botSection = A2($Graphics$Element.spacer,
                 wAll,
                 hBot);
                 var sideGutter = colorDebug($Color.black)(A2($Graphics$Element.spacer,
                 wGut,
                 hTot));
                 return A2($Graphics$Element.flow,
                 $Graphics$Element.right,
                 _L.fromArray([sideGutter
                              ,A2($Graphics$Element.flow,
                              $Graphics$Element.down,
                              _L.fromArray([colorDebug($Color.lightYellow)(topSection)
                                           ,midSection
                                           ,colorDebug($Color.lightYellow)(botSection)]))
                              ,sideGutter]));
              }();}
         _U.badCase($moduleName,
         "between lines 549 and 601");
      }();
   });
   _elm.InterfaceView2.values = {_op: _op
                                ,view: view};
   return _elm.InterfaceView2.values;
};
Elm.Json = Elm.Json || {};
Elm.Json.Decode = Elm.Json.Decode || {};
Elm.Json.Decode.make = function (_elm) {
   "use strict";
   _elm.Json = _elm.Json || {};
   _elm.Json.Decode = _elm.Json.Decode || {};
   if (_elm.Json.Decode.values)
   return _elm.Json.Decode.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Json.Decode",
   $Array = Elm.Array.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Json$Encode = Elm.Json.Encode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Native$Json = Elm.Native.Json.make(_elm),
   $Result = Elm.Result.make(_elm);
   var tuple8 = $Native$Json.decodeTuple8;
   var tuple7 = $Native$Json.decodeTuple7;
   var tuple6 = $Native$Json.decodeTuple6;
   var tuple5 = $Native$Json.decodeTuple5;
   var tuple4 = $Native$Json.decodeTuple4;
   var tuple3 = $Native$Json.decodeTuple3;
   var tuple2 = $Native$Json.decodeTuple2;
   var tuple1 = $Native$Json.decodeTuple1;
   var succeed = $Native$Json.succeed;
   var fail = $Native$Json.fail;
   var andThen = $Native$Json.andThen;
   var customDecoder = $Native$Json.customDecoder;
   var decodeValue = $Native$Json.runDecoderValue;
   var value = $Native$Json.decodeValue;
   var maybe = $Native$Json.decodeMaybe;
   var $null = $Native$Json.decodeNull;
   var array = $Native$Json.decodeArray;
   var list = $Native$Json.decodeList;
   var bool = $Native$Json.decodeBool;
   var $int = $Native$Json.decodeInt;
   var $float = $Native$Json.decodeFloat;
   var string = $Native$Json.decodeString;
   var oneOf = $Native$Json.oneOf;
   var keyValuePairs = $Native$Json.decodeKeyValuePairs;
   var object8 = $Native$Json.decodeObject8;
   var object7 = $Native$Json.decodeObject7;
   var object6 = $Native$Json.decodeObject6;
   var object5 = $Native$Json.decodeObject5;
   var object4 = $Native$Json.decodeObject4;
   var object3 = $Native$Json.decodeObject3;
   var object2 = $Native$Json.decodeObject2;
   var object1 = $Native$Json.decodeObject1;
   _op[":="] = $Native$Json.decodeField;
   var at = F2(function (fields,
   decoder) {
      return A3($List.foldr,
      F2(function (x,y) {
         return A2(_op[":="],x,y);
      }),
      decoder,
      fields);
   });
   var decodeString = $Native$Json.runDecoderString;
   var map = $Native$Json.decodeObject1;
   var dict = function (decoder) {
      return A2(map,
      $Dict.fromList,
      keyValuePairs(decoder));
   };
   var Decoder = {ctor: "Decoder"};
   _elm.Json.Decode.values = {_op: _op
                             ,Decoder: Decoder
                             ,map: map
                             ,decodeString: decodeString
                             ,at: at
                             ,object1: object1
                             ,object2: object2
                             ,object3: object3
                             ,object4: object4
                             ,object5: object5
                             ,object6: object6
                             ,object7: object7
                             ,object8: object8
                             ,keyValuePairs: keyValuePairs
                             ,dict: dict
                             ,oneOf: oneOf
                             ,string: string
                             ,$float: $float
                             ,$int: $int
                             ,bool: bool
                             ,list: list
                             ,array: array
                             ,$null: $null
                             ,maybe: maybe
                             ,value: value
                             ,decodeValue: decodeValue
                             ,customDecoder: customDecoder
                             ,andThen: andThen
                             ,fail: fail
                             ,succeed: succeed
                             ,tuple1: tuple1
                             ,tuple2: tuple2
                             ,tuple3: tuple3
                             ,tuple4: tuple4
                             ,tuple5: tuple5
                             ,tuple6: tuple6
                             ,tuple7: tuple7
                             ,tuple8: tuple8};
   return _elm.Json.Decode.values;
};
Elm.Json = Elm.Json || {};
Elm.Json.Encode = Elm.Json.Encode || {};
Elm.Json.Encode.make = function (_elm) {
   "use strict";
   _elm.Json = _elm.Json || {};
   _elm.Json.Encode = _elm.Json.Encode || {};
   if (_elm.Json.Encode.values)
   return _elm.Json.Encode.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Json.Encode",
   $Array = Elm.Array.make(_elm),
   $Native$Json = Elm.Native.Json.make(_elm);
   var list = $Native$Json.encodeList;
   var array = $Native$Json.encodeArray;
   var object = $Native$Json.encodeObject;
   var $null = $Native$Json.encodeNull;
   var bool = $Native$Json.identity;
   var $float = $Native$Json.identity;
   var $int = $Native$Json.identity;
   var string = $Native$Json.identity;
   var encode = $Native$Json.encode;
   var Value = {ctor: "Value"};
   _elm.Json.Encode.values = {_op: _op
                             ,Value: Value
                             ,encode: encode
                             ,string: string
                             ,$int: $int
                             ,$float: $float
                             ,bool: bool
                             ,$null: $null
                             ,object: object
                             ,array: array
                             ,list: list};
   return _elm.Json.Encode.values;
};
Elm.Lang = Elm.Lang || {};
Elm.Lang.make = function (_elm) {
   "use strict";
   _elm.Lang = _elm.Lang || {};
   if (_elm.Lang.values)
   return _elm.Lang.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Lang",
   $Basics = Elm.Basics.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $String = Elm.String.make(_elm),
   $Utils = Elm.Utils.make(_elm);
   var dummyLoc_ = function (b) {
      return {ctor: "_Tuple3"
             ,_0: 0
             ,_1: b
             ,_2: ""};
   };
   var isLet = function (e) {
      return function () {
         switch (e.ctor)
         {case "EComment":
            return isLet(e._1);
            case "ELet": return true;}
         return false;
      }();
   };
   var fitsOnLine = function (s) {
      return _U.cmp($String.length(s),
      70) > 0 ? false : A2($List.member,
      _U.chr("\n"),
      $String.toList(s)) ? false : true;
   };
   var tab = function (k) {
      return A2($String.repeat,
      k,
      "  ");
   };
   var strPat = function (p) {
      return function () {
         switch (p.ctor)
         {case "PList":
            return function () {
                 var s = $Utils.spaces(A2($List.map,
                 strPat,
                 p._0));
                 return function () {
                    switch (p._1.ctor)
                    {case "Just":
                       return $Utils.bracks(A2($Basics._op["++"],
                         s,
                         A2($Basics._op["++"],
                         " | ",
                         strPat(p._1._0))));
                       case "Nothing":
                       return $Utils.bracks(s);}
                    _U.badCase($moduleName,
                    "between lines 129 and 131");
                 }();
              }();
            case "PVar": return p._0;}
         _U.badCase($moduleName,
         "between lines 126 and 131");
      }();
   };
   var strLoc = function (_v14) {
      return function () {
         switch (_v14.ctor)
         {case "_Tuple3":
            return A2($Basics._op["++"],
              "k",
              A2($Basics._op["++"],
              $Basics.toString(_v14._0),
              A2($Basics._op["++"],
              _U.eq(_v14._2,
              "") ? "" : A2($Basics._op["++"],
              "_",
              _v14._2),
              _v14._1)));}
         _U.badCase($moduleName,
         "on line 118, column 3 to 65");
      }();
   };
   var strOp = function (op) {
      return function () {
         switch (op.ctor)
         {case "ArcCos": return "arccos";
            case "ArcSin": return "arcsin";
            case "Ceil": return "ceiling";
            case "Cos": return "cos";
            case "Div": return "/";
            case "Eq": return "=";
            case "Floor": return "floor";
            case "Lt": return "<";
            case "Minus": return "-";
            case "Mult": return "*";
            case "Pi": return "pi";
            case "Plus": return "+";
            case "Round": return "round";
            case "Sin": return "sin";
            case "ToStr":
            return "toString";}
         _U.badCase($moduleName,
         "between lines 100 and 115");
      }();
   };
   var strTrace = function (tr) {
      return function () {
         switch (tr.ctor)
         {case "TrLoc":
            return strLoc(tr._0);
            case "TrOp":
            return $Utils.parens($String.concat(_L.fromArray([strOp(tr._0)
                                                             ," "
                                                             ,A2($String.join,
                                                             " ",
                                                             A2($List.map,
                                                             strTrace,
                                                             tr._1))])));}
         _U.badCase($moduleName,
         "between lines 120 and 124");
      }();
   };
   var strBaseVal = function (v) {
      return function () {
         switch (v.ctor)
         {case "Bool": switch (v._0)
              {case false: return "false";
                 case true: return "true";}
              break;
            case "Star": return "X";
            case "String":
            return A2($Basics._op["++"],
              "\'",
              A2($Basics._op["++"],
              v._0,
              "\'"));}
         _U.badCase($moduleName,
         "between lines 80 and 84");
      }();
   };
   var strVal_ = F2(function (showTraces,
   v) {
      return function () {
         var foo = strVal_(showTraces);
         return function () {
            switch (v.ctor)
            {case "VBase":
               return strBaseVal(v._0);
               case "VClosure": return "<fun>";
               case "VConst":
               switch (v._0.ctor)
                 {case "_Tuple2":
                    return A2($Basics._op["++"],
                      $Basics.toString(v._0._0),
                      showTraces ? $Utils.braces(strTrace(v._0._1)) : "");}
                 break;
               case "VHole":
               return A2($Basics._op["++"],
                 "HOLE_",
                 $Basics.toString(v._0));
               case "VList":
               return $Utils.bracks(A2($String.join,
                 " ",
                 A2($List.map,foo,v._0)));}
            _U.badCase($moduleName,
            "between lines 91 and 98");
         }();
      }();
   });
   var strVal = strVal_(false);
   var strValLocs = strVal_(true);
   var sExp_ = F3(function (showLocs,
   k,
   e) {
      return function () {
         var foo = sExp_(showLocs);
         var indent = A2(maybeIndent,
         showLocs,
         k);
         return function () {
            switch (e.ctor)
            {case "EApp": switch (e._1.ctor)
                 {case "::":
                    switch (e._1._1.ctor)
                      {case "[]":
                         return $Utils.parens(A2($Basics._op["++"],
                           A2(foo,k,e._0),
                           A2($Basics._op["++"],
                           " ",
                           indent(e._1._0))));}
                      break;}
                 return $Utils.parens(function () {
                    var ss = A2($List.map,
                    foo(k + 1),
                    e._1);
                    var s2 = $Utils.spaces(ss);
                    var s1 = A2(foo,k,e._0);
                    return fitsOnLine(s2) ? A2($Basics._op["++"],
                    s1,
                    A2($Basics._op["++"],
                    " ",
                    s2)) : A2($String.join,
                    A2($Basics._op["++"],
                    "\n",
                    tab(k + 1)),
                    A2($List._op["::"],s1,ss));
                 }());
               case "EBase":
               return strBaseVal(e._0);
               case "ECase":
               return function () {
                    var bar = function (_v67) {
                       return function () {
                          switch (_v67.ctor)
                          {case "_Tuple2":
                             return A2($Basics._op["++"],
                               tab(k + 1),
                               $Utils.parens(A2($Basics._op["++"],
                               strPat(_v67._0),
                               A2($Basics._op["++"],
                               " ",
                               A2(foo,k + 1,_v67._1)))));}
                          _U.badCase($moduleName,
                          "on line 202, column 9 to 68");
                       }();
                    };
                    return $Utils.parens(A2($Basics._op["++"],
                    "case ",
                    A2($Basics._op["++"],
                    A2(foo,k,e._0),
                    A2($Basics._op["++"],
                    "\n",
                    $Utils.lines(A2($List.map,
                    bar,
                    e._1))))));
                 }();
               case "EComment":
               return A2($Basics._op["++"],
                 ";",
                 A2($Basics._op["++"],
                 e._0,
                 A2($Basics._op["++"],
                 "\n",
                 A2($Basics._op["++"],
                 tab(k),
                 A2(foo,k,e._1)))));
               case "EConst":
               return function () {
                    var _ = e._1;
                    var b = function () {
                       switch (_.ctor)
                       {case "_Tuple3": return _._1;}
                       _U.badCase($moduleName,
                       "on line 146, column 21 to 22");
                    }();
                    return A2($Basics._op["++"],
                    $Basics.toString(e._0),
                    A2($Basics._op["++"],
                    b,
                    showLocs ? $Utils.braces(strLoc(e._1)) : ""));
                 }();
               case "EFun": switch (e._0.ctor)
                 {case "::":
                    switch (e._0._1.ctor)
                      {case "[]":
                         return $Utils.parens(A2($Basics._op["++"],
                           "\\",
                           A2($Basics._op["++"],
                           strPat(e._0._0),
                           indent(e._1))));}
                      break;}
                 return function () {
                    var args = $Utils.spaces(A2($List.map,
                    strPat,
                    e._0));
                    return $Utils.parens(A2($Basics._op["++"],
                    "\\",
                    A2($Basics._op["++"],
                    $Utils.parens(args),
                    indent(e._1))));
                 }();
               case "EIf": return function () {
                    var s = $Utils.parens($Utils.spaces(_L.fromArray(["if"
                                                                     ,A2(foo,
                                                                     k,
                                                                     e._0)
                                                                     ,A2(foo,
                                                                     k,
                                                                     e._1)
                                                                     ,A2(foo,
                                                                     k,
                                                                     e._2)])));
                    return fitsOnLine(s) ? s : $Utils.parens(A2($Basics._op["++"],
                    "if ",
                    A2($Basics._op["++"],
                    A2(foo,k,e._0),
                    A2($Basics._op["++"],
                    "\n",
                    A2($Basics._op["++"],
                    tab(k + 1),
                    A2($Basics._op["++"],
                    A2(foo,k + 1,e._1),
                    A2($Basics._op["++"],
                    "\n",
                    A2($Basics._op["++"],
                    tab(k + 1),
                    A2(foo,k + 1,e._2)))))))));
                 }();
               case "ELet": switch (e._0.ctor)
                 {case "Def":
                    return function () {
                         var s = e._1 ? "defrec " : "def ";
                         return A2($Basics._op["++"],
                         $Utils.parens(A2($Basics._op["++"],
                         s,
                         A2($Basics._op["++"],
                         strPat(e._2),
                         indent(e._3)))),
                         A2($Basics._op["++"],
                         "\n",
                         A2($Basics._op["++"],
                         tab(k),
                         A2(foo,k,e._4))));
                      }();
                    case "Let":
                    return $Utils.parens(function () {
                         var k$ = isLet(e._4) ? k : k + 1;
                         return A2($Basics._op["++"],
                         e._1 ? "letrec " : "let ",
                         A2($Basics._op["++"],
                         strPat(e._2),
                         A2($Basics._op["++"],
                         indent(e._3),
                         A2($Basics._op["++"],
                         "\n",
                         A2($Basics._op["++"],
                         tab(k$),
                         A2(foo,k$,e._4))))));
                      }());}
                 break;
               case "EList":
               return $Utils.bracks(function () {
                    var ss = A2($List.map,
                    foo(k),
                    e._0);
                    var s = $Utils.spaces(ss);
                    return fitsOnLine(s) ? function () {
                       switch (e._1.ctor)
                       {case "Just":
                          return A2($Basics._op["++"],
                            s,
                            A2($Basics._op["++"],
                            " | ",
                            A2(foo,k,e._1._0)));
                          case "Nothing": return s;}
                       _U.badCase($moduleName,
                       "between lines 182 and 185");
                    }() : function () {
                       var s = A2($String.join,
                       A2($Basics._op["++"],
                       "\n",
                       A2($Basics._op["++"],
                       tab(k),
                       " ")),
                       ss);
                       return function () {
                          switch (e._1.ctor)
                          {case "Just":
                             return A2($Basics._op["++"],
                               s,
                               A2($Basics._op["++"],
                               "\n",
                               A2($Basics._op["++"],
                               tab(k),
                               A2($Basics._op["++"],
                               "|",
                               A2(foo,k,e._1._0)))));
                             case "Nothing": return s;}
                          _U.badCase($moduleName,
                          "between lines 187 and 190");
                       }();
                    }();
                 }());
               case "EOp":
               return $Utils.parens(A2($String.join,
                 " ",
                 A2($List._op["::"],
                 strOp(e._0),
                 A2($List.map,foo(k),e._1))));
               case "EVar": return e._0;}
            _U.badCase($moduleName,
            "between lines 143 and 207");
         }();
      }();
   });
   var maybeIndent = F3(function (showLocs,
   k,
   e) {
      return function () {
         var s = A3(sExp_,
         showLocs,
         k + 1,
         e);
         return fitsOnLine(s) ? A2($Basics._op["++"],
         " ",
         s) : A2($Basics._op["++"],
         "\n",
         A2($Basics._op["++"],
         tab(k + 1),
         s));
      }();
   });
   var sExpK = function (k) {
      return function ($) {
         return F2(function (x,y) {
            return A2($Basics._op["++"],
            x,
            y);
         })(tab(k))(A2(sExp_,
         false,
         k)($));
      };
   };
   var sExp = sExpK(0);
   var sExpLocsK = function (k) {
      return function ($) {
         return F2(function (x,y) {
            return A2($Basics._op["++"],
            x,
            y);
         })(tab(k))(A2(sExp_,true,k)($));
      };
   };
   var sExpLocs = sExpLocsK(0);
   var TrOp = F2(function (a,b) {
      return {ctor: "TrOp"
             ,_0: a
             ,_1: b};
   });
   var TrLoc = function (a) {
      return {ctor: "TrLoc",_0: a};
   };
   var dummyTrace_ = function (b) {
      return TrLoc(dummyLoc_(b));
   };
   var Star = {ctor: "Star"};
   var String = function (a) {
      return {ctor: "String"
             ,_0: a};
   };
   var Bool = function (a) {
      return {ctor: "Bool",_0: a};
   };
   var VHole = function (a) {
      return {ctor: "VHole",_0: a};
   };
   var VList = function (a) {
      return {ctor: "VList",_0: a};
   };
   var mapVal = F2(function (f,v) {
      return function () {
         switch (v.ctor)
         {case "VBase": return f(v);
            case "VClosure": return f(v);
            case "VConst": return f(v);
            case "VHole": return f(v);
            case "VList":
            return f(VList(A2($List.map,
              mapVal(f),
              v._0)));}
         _U.badCase($moduleName,
         "between lines 246 and 251");
      }();
   });
   var VClosure = F4(function (a,
   b,
   c,
   d) {
      return {ctor: "VClosure"
             ,_0: a
             ,_1: b
             ,_2: c
             ,_3: d};
   });
   var VBase = function (a) {
      return {ctor: "VBase",_0: a};
   };
   var vBool = function ($) {
      return VBase(Bool($));
   };
   var vTrue = vBool(true);
   var vFalse = vBool(false);
   var vStr = function ($) {
      return VBase(String($));
   };
   var VConst = function (a) {
      return {ctor: "VConst"
             ,_0: a};
   };
   var Def = {ctor: "Def"};
   var Let = {ctor: "Let"};
   var EComment = F2(function (a,
   b) {
      return {ctor: "EComment"
             ,_0: a
             ,_1: b};
   });
   var ELet = F5(function (a,
   b,
   c,
   d,
   e) {
      return {ctor: "ELet"
             ,_0: a
             ,_1: b
             ,_2: c
             ,_3: d
             ,_4: e};
   });
   var ECase = F2(function (a,b) {
      return {ctor: "ECase"
             ,_0: a
             ,_1: b};
   });
   var EIf = F3(function (a,b,c) {
      return {ctor: "EIf"
             ,_0: a
             ,_1: b
             ,_2: c};
   });
   var EList = F2(function (a,b) {
      return {ctor: "EList"
             ,_0: a
             ,_1: b};
   });
   var ePair = F2(function (e1,
   e2) {
      return A2(EList,
      _L.fromArray([e1,e2]),
      $Maybe.Nothing);
   });
   var EOp = F2(function (a,b) {
      return {ctor: "EOp"
             ,_0: a
             ,_1: b};
   });
   var EApp = F2(function (a,b) {
      return {ctor: "EApp"
             ,_0: a
             ,_1: b};
   });
   var eApp = F2(function (e,es) {
      return function () {
         switch (es.ctor)
         {case "::": switch (es._1.ctor)
              {case "[]": return A2(EApp,
                   e,
                   _L.fromArray([es._0]));}
              return A2(eApp,
              A2(EApp,
              e,
              _L.fromArray([es._0])),
              es._1);}
         _U.badCase($moduleName,
         "between lines 302 and 304");
      }();
   });
   var EFun = F2(function (a,b) {
      return {ctor: "EFun"
             ,_0: a
             ,_1: b};
   });
   var mapExp = F2(function (f,e) {
      return function () {
         var foo = mapExp(f);
         return function () {
            switch (e.ctor)
            {case "EApp": return f(A2(EApp,
                 foo(e._0),
                 A2($List.map,foo,e._1)));
               case "EBase": return f(e);
               case "ECase": return f(A2(ECase,
                 foo(e._0),
                 A2($List.map,
                 function (_v116) {
                    return function () {
                       switch (_v116.ctor)
                       {case "_Tuple2":
                          return {ctor: "_Tuple2"
                                 ,_0: _v116._0
                                 ,_1: foo(_v116._1)};}
                       _U.badCase($moduleName,
                       "on line 241, column 64 to 73");
                    }();
                 },
                 e._1)));
               case "EComment":
               return f(A2(EComment,
                 e._0,
                 foo(e._1)));
               case "EConst": return f(e);
               case "EFun": return f(A2(EFun,
                 e._0,
                 foo(e._1)));
               case "EIf": return f(A3(EIf,
                 foo(e._0),
                 foo(e._1),
                 foo(e._2)));
               case "ELet": return f(A5(ELet,
                 e._0,
                 e._1,
                 e._2,
                 foo(e._3),
                 foo(e._4)));
               case "EList": return f(A2(EList,
                 A2($List.map,foo,e._0),
                 A2($Utils.mapMaybe,foo,e._1)));
               case "EOp": return f(A2(EOp,
                 e._0,
                 A2($List.map,foo,e._1)));
               case "EVar": return f(e);}
            _U.badCase($moduleName,
            "between lines 232 and 243");
         }();
      }();
   });
   var eFun = F2(function (ps,e) {
      return function () {
         switch (ps.ctor)
         {case "::": switch (ps._1.ctor)
              {case "[]": return A2(EFun,
                   _L.fromArray([ps._0]),
                   e);}
              return A2(EFun,
              _L.fromArray([ps._0]),
              A2(eFun,ps._1,e));}
         _U.badCase($moduleName,
         "between lines 306 and 308");
      }();
   });
   var EVar = function (a) {
      return {ctor: "EVar",_0: a};
   };
   var EBase = function (a) {
      return {ctor: "EBase",_0: a};
   };
   var eBool = function ($) {
      return EBase(Bool($));
   };
   var eTrue = eBool(true);
   var eFalse = eBool(false);
   var EConst = F2(function (a,b) {
      return {ctor: "EConst"
             ,_0: a
             ,_1: b};
   });
   var applySubst = F2(function (subst,
   e) {
      return function () {
         switch (e.ctor)
         {case "EApp": return A2(EApp,
              A2(applySubst,subst,e._0),
              A2($List.map,
              applySubst(subst),
              e._1));
            case "EBase": return e;
            case "ECase": return A2(ECase,
              A2(applySubst,subst,e._0),
              A2($List.map,
              function (_v148) {
                 return function () {
                    switch (_v148.ctor)
                    {case "_Tuple2":
                       return {ctor: "_Tuple2"
                              ,_0: _v148._0
                              ,_1: A2(applySubst,
                              subst,
                              _v148._1)};}
                    _U.badCase($moduleName,
                    "on line 277, column 55 to 77");
                 }();
              },
              e._1));
            case "EComment":
            return A2(EComment,
              e._0,
              A2(applySubst,subst,e._1));
            case "EConst":
            return function () {
                 var _v152 = A2($Dict.get,
                 $Utils.fst3(e._1),
                 subst);
                 switch (_v152.ctor)
                 {case "Just": return A2(EConst,
                      _v152._0,
                      e._1);}
                 _U.badCase($moduleName,
                 "between lines 262 and 265");
              }();
            case "EFun": return A2(EFun,
              e._0,
              A2(applySubst,subst,e._1));
            case "EIf": return A3(EIf,
              A2(applySubst,subst,e._0),
              A2(applySubst,subst,e._1),
              A2(applySubst,subst,e._2));
            case "ELet": return A5(ELet,
              e._0,
              e._1,
              e._2,
              A2(applySubst,subst,e._3),
              A2(applySubst,subst,e._4));
            case "EList": return A2(EList,
              A2($List.map,
              applySubst(subst),
              e._0),
              A2($Utils.mapMaybe,
              applySubst(subst),
              e._1));
            case "EOp": return A2(EOp,
              e._0,
              A2($List.map,
              applySubst(subst),
              e._1));
            case "EVar": return e;}
         _U.badCase($moduleName,
         "between lines 260 and 279");
      }();
   });
   var Eq = {ctor: "Eq"};
   var Lt = {ctor: "Lt"};
   var Div = {ctor: "Div"};
   var Mult = {ctor: "Mult"};
   var Minus = {ctor: "Minus"};
   var Plus = {ctor: "Plus"};
   var ePlus = F2(function (e1,
   e2) {
      return A2(EOp,
      Plus,
      _L.fromArray([e1,e2]));
   });
   var ToStr = {ctor: "ToStr"};
   var Round = {ctor: "Round"};
   var Ceil = {ctor: "Ceil"};
   var Floor = {ctor: "Floor"};
   var ArcSin = {ctor: "ArcSin"};
   var ArcCos = {ctor: "ArcCos"};
   var Sin = {ctor: "Sin"};
   var Cos = {ctor: "Cos"};
   var Pi = {ctor: "Pi"};
   var PList = F2(function (a,b) {
      return {ctor: "PList"
             ,_0: a
             ,_1: b};
   });
   var PVar = function (a) {
      return {ctor: "PVar",_0: a};
   };
   var eLets = F2(function (xes,
   eBody) {
      return function () {
         switch (xes.ctor)
         {case "::": switch (xes._0.ctor)
              {case "_Tuple2": return A5(ELet,
                   Let,
                   false,
                   PVar(xes._0._0),
                   xes._0._1,
                   A2(eLets,xes._1,eBody));}
              break;
            case "[]": return eBody;}
         _U.badCase($moduleName,
         "between lines 312 and 314");
      }();
   });
   var $ = {ctor: "_Tuple3"
           ,_0: "!"
           ,_1: ""
           ,_2: "?"},
   frozen = $._0,
   unann = $._1,
   thawed = $._2;
   var dummyLoc = dummyLoc_(unann);
   var dummyTrace = dummyTrace_(unann);
   _elm.Lang.values = {_op: _op
                      ,frozen: frozen
                      ,thawed: thawed
                      ,unann: unann
                      ,PVar: PVar
                      ,PList: PList
                      ,Pi: Pi
                      ,Cos: Cos
                      ,Sin: Sin
                      ,ArcCos: ArcCos
                      ,ArcSin: ArcSin
                      ,Floor: Floor
                      ,Ceil: Ceil
                      ,Round: Round
                      ,ToStr: ToStr
                      ,Plus: Plus
                      ,Minus: Minus
                      ,Mult: Mult
                      ,Div: Div
                      ,Lt: Lt
                      ,Eq: Eq
                      ,EConst: EConst
                      ,EBase: EBase
                      ,EVar: EVar
                      ,EFun: EFun
                      ,EApp: EApp
                      ,EOp: EOp
                      ,EList: EList
                      ,EIf: EIf
                      ,ECase: ECase
                      ,ELet: ELet
                      ,EComment: EComment
                      ,Let: Let
                      ,Def: Def
                      ,VConst: VConst
                      ,VBase: VBase
                      ,VClosure: VClosure
                      ,VList: VList
                      ,VHole: VHole
                      ,Bool: Bool
                      ,String: String
                      ,Star: Star
                      ,TrLoc: TrLoc
                      ,TrOp: TrOp
                      ,strBaseVal: strBaseVal
                      ,strVal: strVal
                      ,strValLocs: strValLocs
                      ,strVal_: strVal_
                      ,strOp: strOp
                      ,strLoc: strLoc
                      ,strTrace: strTrace
                      ,strPat: strPat
                      ,tab: tab
                      ,sExpK: sExpK
                      ,sExpLocsK: sExpLocsK
                      ,sExp: sExp
                      ,sExpLocs: sExpLocs
                      ,sExp_: sExp_
                      ,maybeIndent: maybeIndent
                      ,fitsOnLine: fitsOnLine
                      ,isLet: isLet
                      ,mapExp: mapExp
                      ,mapVal: mapVal
                      ,applySubst: applySubst
                      ,dummyLoc_: dummyLoc_
                      ,dummyTrace_: dummyTrace_
                      ,dummyLoc: dummyLoc
                      ,dummyTrace: dummyTrace
                      ,ePlus: ePlus
                      ,eBool: eBool
                      ,eTrue: eTrue
                      ,eFalse: eFalse
                      ,vBool: vBool
                      ,vTrue: vTrue
                      ,vFalse: vFalse
                      ,vStr: vStr
                      ,eApp: eApp
                      ,eFun: eFun
                      ,ePair: ePair
                      ,eLets: eLets};
   return _elm.Lang.values;
};
Elm.LangParser = Elm.LangParser || {};
Elm.LangParser.make = function (_elm) {
   "use strict";
   _elm.LangParser = _elm.LangParser || {};
   if (_elm.LangParser.values)
   return _elm.LangParser.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "LangParser",
   $Basics = Elm.Basics.make(_elm),
   $Char = Elm.Char.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Lang = Elm.Lang.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $OurParser = Elm.OurParser.make(_elm),
   $PreludeGenerated = Elm.PreludeGenerated.make(_elm),
   $Result = Elm.Result.make(_elm),
   $String = Elm.String.make(_elm),
   $Utils = Elm.Utils.make(_elm);
   var listSep = A2($OurParser._op["<++"],
   $OurParser.token(" "),
   $OurParser.token("\n"));
   var string_ = function (s) {
      return A2($OurParser._op["<$>"],
      $Basics.always(s),
      $OurParser.token(s));
   };
   var parseFrozen = A2($OurParser._op["<++"],
   A2($OurParser._op["<++"],
   string_($Lang.frozen),
   string_($Lang.thawed)),
   string_($Lang.unann));
   var parseSign = A2($OurParser.option,
   1,
   A2($OurParser._op[">>>"],
   $OurParser.satisfy(F2(function (x,
   y) {
      return _U.eq(x,y);
   })(_U.chr("-"))),
   $OurParser.$return(-1)));
   var parseFloat = A2($OurParser._op[">>="],
   $OurParser.some($OurParser.satisfy($Char.isDigit)),
   function (cs1) {
      return A2($OurParser._op[">>="],
      $OurParser.satisfy(F2(function (x,
      y) {
         return _U.eq(x,y);
      })(_U.chr("."))),
      function (c) {
         return A2($OurParser._op[">>="],
         $OurParser.some($OurParser.satisfy($Char.isDigit)),
         function (cs2) {
            return $OurParser.$return($Utils.fromOk("LangParser.parseFloat")($String.toFloat($String.fromList(A2($Basics._op["++"],
            cs1,
            A2($List._op["::"],c,cs2))))));
         });
      });
   });
   var parseInt = A2($OurParser._op[">>="],
   $OurParser.some($OurParser.satisfy($Char.isDigit)),
   function (cs) {
      return $OurParser.$return($Utils.fromOk("LangParser.parseInt")($String.toInt($String.fromList(cs))));
   });
   var parseNum = A2($OurParser._op[">>="],
   parseSign,
   function (i) {
      return A2($OurParser._op[">>="],
      A2($OurParser._op["<++"],
      parseFloat,
      A2($OurParser._op["<$>"],
      $Basics.toFloat,
      parseInt)),
      function (n) {
         return A2($OurParser._op[">>="],
         parseFrozen,
         function (b) {
            return $OurParser.$return({ctor: "_Tuple2"
                                      ,_0: i * n
                                      ,_1: b});
         });
      });
   });
   var parseNumV = A2($OurParser._op[">>="],
   parseNum,
   function (_v0) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return $OurParser.$return($Lang.VConst({ctor: "_Tuple2"
                                                   ,_0: _v0._0
                                                   ,_1: $Lang.dummyTrace_(_v0._1)}));}
         _U.badCase($moduleName,
         "on line 175, column 36 to 70");
      }();
   });
   var parseNumE = A2($OurParser._op[">>="],
   parseNum,
   function (_v4) {
      return function () {
         switch (_v4.ctor)
         {case "_Tuple2":
            return $OurParser.$return(A2($Lang.EConst,
              _v4._0,
              $Lang.dummyLoc_(_v4._1)));}
         _U.badCase($moduleName,
         "on line 176, column 36 to 67");
      }();
   });
   var isWhitespace = function (c) {
      return _U.eq(c,
      _U.chr(" ")) || _U.eq(c,
      _U.chr("\n"));
   };
   var oneWhite = A2($OurParser._op["<$>"],
   $Basics.always({ctor: "_Tuple0"}),
   $OurParser.satisfy(isWhitespace));
   var manySpaces = A2($OurParser._op["<$>"],
   $Basics.always({ctor: "_Tuple0"}),
   $OurParser.munch(isWhitespace));
   var white = function (p) {
      return A2($OurParser._op[">>>"],
      manySpaces,
      p);
   };
   var token_ = function ($) {
      return white($OurParser.token($));
   };
   var delimit = F2(function (a,
   b) {
      return A2($OurParser.between,
      token_(a),
      token_(b));
   });
   var parens = A2(delimit,
   "(",
   ")");
   var parseList_ = F6(function (sepBy,
   start,
   sep,
   end,
   p,
   f) {
      return A2($OurParser._op[">>="],
      A2($OurParser._op[">>>"],
      token_(start),
      A2(sepBy,p,sep)),
      function (xs) {
         return A2($OurParser._op[">>>"],
         token_(end),
         $OurParser.$return(f(xs)));
      });
   });
   var parseList = parseList_($OurParser.sepBy);
   var parseListLiteral = F2(function (p,
   f) {
      return A5(parseList,
      "[",
      listSep,
      "]",
      p,
      f);
   });
   var parseList1 = parseList_($OurParser.sepBy1);
   var parseMultiCons = F2(function (p,
   f) {
      return A2($OurParser._op[">>="],
      A5(parseList1,
      "[",
      listSep,
      "|",
      p,
      $Basics.identity),
      function (xs) {
         return A2($OurParser._op[">>="],
         p,
         function (y) {
            return A2($OurParser._op[">>>"],
            token_("]"),
            $OurParser.$return(A2(f,xs,y)));
         });
      });
   });
   var parseListLiteralOrMultiCons = F3(function (p,
   f,
   g) {
      return $OurParser.recursively(function (_v8) {
         return function () {
            return A2($OurParser._op["<++"],
            A2(parseListLiteral,p,f),
            A2(parseMultiCons,p,g));
         }();
      });
   });
   var parseWildcard = A2($OurParser._op[">>>"],
   token_("_"),
   $OurParser.$return($Lang.PVar("_")));
   var parseRec = A2($OurParser._op["<++"],
   A2($OurParser._op["<$>"],
   $Basics.always(true),
   token_("letrec")),
   A2($OurParser._op["<$>"],
   $Basics.always(false),
   token_("let")));
   var parseDefRec = A2($OurParser._op["<++"],
   A2($OurParser._op["<$>"],
   $Basics.always(true),
   token_("defrec")),
   A2($OurParser._op["<$>"],
   $Basics.always(false),
   token_("def")));
   var parseBOp = A2($OurParser._op["<++"],
   A2($OurParser._op["<++"],
   A2($OurParser._op["<++"],
   A2($OurParser._op["<++"],
   A2($OurParser._op["<++"],
   A2($OurParser._op["<$>"],
   $Basics.always($Lang.Plus),
   token_("+")),
   A2($OurParser._op["<$>"],
   $Basics.always($Lang.Minus),
   token_("-"))),
   A2($OurParser._op["<$>"],
   $Basics.always($Lang.Mult),
   token_("*"))),
   A2($OurParser._op["<$>"],
   $Basics.always($Lang.Div),
   token_("/"))),
   A2($OurParser._op["<$>"],
   $Basics.always($Lang.Lt),
   token_("<"))),
   A2($OurParser._op["<$>"],
   $Basics.always($Lang.Eq),
   token_("=")));
   var parseUOp = A2($OurParser._op["<++"],
   A2($OurParser._op["<++"],
   A2($OurParser._op["<++"],
   A2($OurParser._op["<++"],
   A2($OurParser._op["<++"],
   A2($OurParser._op["<++"],
   A2($OurParser._op["<++"],
   A2($OurParser._op["<$>"],
   $Basics.always($Lang.Cos),
   token_("cos")),
   A2($OurParser._op["<$>"],
   $Basics.always($Lang.Sin),
   token_("sin"))),
   A2($OurParser._op["<$>"],
   $Basics.always($Lang.ArcCos),
   token_("arccos"))),
   A2($OurParser._op["<$>"],
   $Basics.always($Lang.ArcSin),
   token_("arcsin"))),
   A2($OurParser._op["<$>"],
   $Basics.always($Lang.Floor),
   token_("floor"))),
   A2($OurParser._op["<$>"],
   $Basics.always($Lang.Ceil),
   token_("ceiling"))),
   A2($OurParser._op["<$>"],
   $Basics.always($Lang.Round),
   token_("round"))),
   A2($OurParser._op["<$>"],
   $Basics.always($Lang.ToStr),
   token_("toString")));
   var parseNullOp = A2($OurParser._op["<$>"],
   $Basics.always($Lang.Pi),
   token_("pi"));
   var parseConst = parens(A2($OurParser._op[">>="],
   parseNullOp,
   function (op) {
      return $OurParser.$return(A2($Lang.EOp,
      op,
      _L.fromArray([])));
   }));
   var someSpaces = A2($OurParser._op["<$>"],
   $Basics.always({ctor: "_Tuple0"}),
   $OurParser.munch1(isWhitespace));
   var isAlphaNumeric = function (c) {
      return $Char.isLower(c) || ($Char.isUpper(c) || $Char.isDigit(c));
   };
   var parseStrLit = function () {
      var pred = function (c) {
         return isAlphaNumeric(c) || A2($List.member,
         c,
         $String.toList("#., -():=%"));
      };
      return A3($OurParser.between,
      token_("\'"),
      $OurParser.token("\'"),
      A2($OurParser._op["<$>"],
      $String.fromList,
      $OurParser.many($OurParser.satisfy(pred))));
   }();
   var parseEBase = A2($OurParser._op["<++"],
   A2($OurParser._op["<++"],
   A2($OurParser._op["<$>"],
   $Basics.always($Lang.eTrue),
   $OurParser.token("true")),
   A2($OurParser._op["<$>"],
   $Basics.always($Lang.eFalse),
   $OurParser.token("false"))),
   A2($OurParser._op["<$>"],
   function ($) {
      return $Lang.EBase($Lang.String($));
   },
   parseStrLit));
   var parseVBase = A2($OurParser._op["<++"],
   A2($OurParser._op["<++"],
   A2($OurParser._op["<$>"],
   $Basics.always($Lang.vTrue),
   $OurParser.token("true")),
   A2($OurParser._op["<$>"],
   $Basics.always($Lang.vFalse),
   $OurParser.token("false"))),
   A2($OurParser._op["<$>"],
   function ($) {
      return $Lang.VBase($Lang.String($));
   },
   parseStrLit));
   var parseVal = $OurParser.recursively(function (_v10) {
      return function () {
         return A2($OurParser._op["<++"],
         A2($OurParser._op["<++"],
         white(parseNumV),
         white(parseVBase)),
         parseValList);
      }();
   });
   var parseValList = A2(parseListLiteral,
   parseVal,
   $Lang.VList);
   var parseV = $OurParser.parse(A2($OurParser._op[">>="],
   parseVal,
   function (v) {
      return A2($OurParser._op[">>>"],
      white($OurParser.end),
      $OurParser.$return(v));
   }));
   var isAlpha = function (c) {
      return $Char.isLower(c) || $Char.isUpper(c);
   };
   var parseIdent = function () {
      var pred = function (c) {
         return isAlphaNumeric(c) || _U.eq(c,
         _U.chr("_"));
      };
      return A2($OurParser._op[">>="],
      $OurParser.satisfy(isAlpha),
      function (c) {
         return A2($OurParser._op[">>="],
         $OurParser.many($OurParser.satisfy(pred)),
         function (cs) {
            return $OurParser.$return($String.fromList(A2($List._op["::"],
            c,
            cs)));
         });
      });
   }();
   var parseVar = A2($OurParser._op["<$>"],
   $Lang.EVar,
   white(parseIdent));
   var parsePat = $OurParser.recursively(function (_v12) {
      return function () {
         return A2($OurParser._op["<++"],
         A2($OurParser._op["<++"],
         A2($OurParser._op[">>="],
         white(parseIdent),
         function ($) {
            return $OurParser.$return($Lang.PVar($));
         }),
         parseWildcard),
         parsePatList);
      }();
   });
   var parsePatList = A3(parseListLiteralOrMultiCons,
   parsePat,
   function (xs) {
      return A2($Lang.PList,
      xs,
      $Maybe.Nothing);
   },
   F2(function (xs,y) {
      return A2($Lang.PList,
      xs,
      $Maybe.Just(y));
   }));
   var unsingle = function (_v14) {
      return function () {
         switch (_v14.ctor)
         {case "::":
            switch (_v14._1.ctor)
              {case "[]": return _v14._0;}
              break;}
         _U.badCase($moduleName,
         "on line 107, column 17 to 18");
      }();
   };
   var single = function (x) {
      return _L.fromArray([x]);
   };
   var parsePats = A2($OurParser._op["<++"],
   A2($OurParser._op[">>="],
   parsePat,
   function ($) {
      return $OurParser.$return(single($));
   }),
   A5(parseList1,
   "(",
   listSep,
   ")",
   parsePat,
   $Basics.identity));
   var parseFun = parens(A2($OurParser._op[">>="],
   A2($OurParser._op[">>>"],
   token_("\\"),
   parsePats),
   function (ps) {
      return A2($OurParser._op[">>="],
      parseExp,
      function (e) {
         return $OurParser.$return(A2($Lang.EFun,
         ps,
         e));
      });
   }));
   var parseExp = $OurParser.recursively(function (_v18) {
      return function () {
         return A2($OurParser._op["<++"],
         A2($OurParser._op["<++"],
         A2($OurParser._op["<++"],
         A2($OurParser._op["<++"],
         A2($OurParser._op["<++"],
         A2($OurParser._op["<++"],
         A2($OurParser._op["<++"],
         A2($OurParser._op["<++"],
         A2($OurParser._op["<++"],
         A2($OurParser._op["<++"],
         A2($OurParser._op["<++"],
         A2($OurParser._op["<++"],
         A2($OurParser._op["<++"],
         white(parseNumE),
         white(parseEBase)),
         parseVar),
         parseFun),
         parseConst),
         parseUnop),
         parseBinop),
         parseIf),
         parseCase),
         parseExpList),
         parseLet),
         parseDef),
         parseApp),
         parseCommentExp);
      }();
   });
   var parseApp = parens(A2($OurParser._op[">>="],
   parseExp,
   function (f) {
      return A2($OurParser._op[">>="],
      A2($OurParser._op[">>>"],
      oneWhite,
      parseExpArgs),
      function (es) {
         return $OurParser.$return(A2($Lang.EApp,
         f,
         es));
      });
   }));
   var parseExpArgs = A5(parseList1,
   "",
   listSep,
   "",
   parseExp,
   $Basics.identity);
   var parseBinop = parens(A2($OurParser._op[">>="],
   parseBOp,
   function (op) {
      return A2($OurParser._op[">>="],
      parseExp,
      function (e1) {
         return A2($OurParser._op[">>="],
         A2($OurParser._op[">>>"],
         oneWhite,
         parseExp),
         function (e2) {
            return $OurParser.$return(A2($Lang.EOp,
            op,
            _L.fromArray([e1,e2])));
         });
      });
   }));
   var parseCase = parens(A2($OurParser._op[">>="],
   A2($OurParser._op[">>>"],
   A2($OurParser._op[">>>"],
   token_("case"),
   oneWhite),
   parseExp),
   function (e) {
      return A2($OurParser._op[">>="],
      A2($OurParser._op[">>>"],
      oneWhite,
      parseBranches),
      function (l) {
         return $OurParser.$return(A2($Lang.ECase,
         e,
         l));
      });
   }));
   var parseBranches = $OurParser.recursively(function (_v20) {
      return function () {
         return A5(parseList1,
         "",
         listSep,
         "",
         parseBranch,
         $Basics.identity);
      }();
   });
   var parseBranch = parens(A2($OurParser._op[">>="],
   parsePat,
   function (p) {
      return A2($OurParser._op[">>="],
      A2($OurParser._op[">>>"],
      oneWhite,
      parseExp),
      function (e) {
         return $OurParser.$return({ctor: "_Tuple2"
                                   ,_0: p
                                   ,_1: e});
      });
   }));
   var parseCommentExp = A2($OurParser._op[">>="],
   A2($OurParser._op[">>>"],
   token_(";"),
   $OurParser.many($OurParser.satisfy(F2(function (x,
   y) {
      return !_U.eq(x,y);
   })(_U.chr("\n"))))),
   function (cs) {
      return A2($OurParser._op[">>="],
      A2($OurParser._op[">>>"],
      $OurParser.satisfy(F2(function (x,
      y) {
         return _U.eq(x,y);
      })(_U.chr("\n"))),
      parseExp),
      function (e) {
         return $OurParser.$return(A2($Lang.EComment,
         $String.fromList(cs),
         e));
      });
   });
   var parseDef = A2($OurParser._op[">>="],
   parens(A2($OurParser._op[">>="],
   parseDefRec,
   function (b) {
      return A2($OurParser._op[">>="],
      parsePat,
      function (p) {
         return A2($OurParser._op[">>="],
         parseExp,
         function (e1) {
            return $OurParser.$return({ctor: "_Tuple3"
                                      ,_0: b
                                      ,_1: p
                                      ,_2: e1});
         });
      });
   })),
   function (_v22) {
      return function () {
         switch (_v22.ctor)
         {case "_Tuple3":
            return A2($OurParser._op[">>="],
              A2($OurParser._op[">>>"],
              oneWhite,
              parseExp),
              function (e2) {
                 return $OurParser.$return(A5($Lang.ELet,
                 $Lang.Def,
                 _v22._0,
                 _v22._1,
                 _v22._2,
                 e2));
              });}
         _U.badCase($moduleName,
         "between lines 313 and 315");
      }();
   });
   var parseExpList = A3(parseListLiteralOrMultiCons,
   parseExp,
   function (xs) {
      return A2($Lang.EList,
      xs,
      $Maybe.Nothing);
   },
   F2(function (xs,y) {
      return A2($Lang.EList,
      xs,
      $Maybe.Just(y));
   }));
   var parseIf = parens(A2($OurParser._op[">>="],
   A2($OurParser._op[">>>"],
   A2($OurParser._op[">>>"],
   token_("if"),
   oneWhite),
   parseExp),
   function (e1) {
      return A2($OurParser._op[">>="],
      A2($OurParser._op[">>>"],
      oneWhite,
      parseExp),
      function (e2) {
         return A2($OurParser._op[">>="],
         A2($OurParser._op[">>>"],
         oneWhite,
         parseExp),
         function (e3) {
            return $OurParser.$return(A3($Lang.EIf,
            e1,
            e2,
            e3));
         });
      });
   }));
   var parseLet = parens(A2($OurParser._op[">>="],
   parseRec,
   function (b) {
      return A2($OurParser._op[">>="],
      parsePat,
      function (p) {
         return A2($OurParser._op[">>="],
         parseExp,
         function (e1) {
            return A2($OurParser._op[">>="],
            A2($OurParser._op[">>>"],
            oneWhite,
            parseExp),
            function (e2) {
               return $OurParser.$return(A5($Lang.ELet,
               $Lang.Let,
               b,
               p,
               e1,
               e2));
            });
         });
      });
   }));
   var parseUnop = parens(A2($OurParser._op[">>="],
   parseUOp,
   function (op) {
      return A2($OurParser._op[">>="],
      parseExp,
      function (e1) {
         return $OurParser.$return(A2($Lang.EOp,
         op,
         _L.fromArray([e1])));
      });
   }));
   var parseE_ = function (f) {
      return $OurParser.parse(A2($OurParser._op[">>="],
      parseExp,
      function (e) {
         return A2($OurParser._op[">>>"],
         white($OurParser.end),
         $OurParser.$return(f(e)));
      }));
   };
   var substOf_ = F2(function (s,
   e) {
      return function () {
         switch (e.ctor)
         {case "EApp":
            return A2(substOfExps_,
              s,
              A2($List._op["::"],e._0,e._1));
            case "EBase": return s;
            case "ECase":
            return A2(substOfExps_,
              s,
              A2($List._op["::"],
              e._0,
              A2($List.map,
              $Basics.snd,
              e._1)));
            case "EComment":
            return A2(substOf_,s,e._1);
            case "EConst":
            return function () {
                 var _ = e._1;
                 var k = function () {
                    switch (_.ctor)
                    {case "_Tuple3": return _._0;}
                    _U.badCase($moduleName,
                    "on line 82, column 19 to 20");
                 }();
                 return function () {
                    var _v56 = A2($Dict.get,k,s);
                    switch (_v56.ctor)
                    {case "Just": return _U.eq(e._0,
                         _v56._0) ? s : _U.badIf($moduleName,
                         "on line 85, column 18 to 34");
                       case "Nothing":
                       return A3($Dict.insert,
                         k,
                         e._0,
                         s);}
                    _U.badCase($moduleName,
                    "between lines 83 and 86");
                 }();
              }();
            case "EFun": return A2(substOf_,
              s,
              e._1);
            case "EIf":
            return A2(substOfExps_,
              s,
              _L.fromArray([e._0,e._1,e._2]));
            case "ELet":
            return A2(substOfExps_,
              s,
              _L.fromArray([e._3,e._4]));
            case "EList":
            return function () {
                 switch (e._1.ctor)
                 {case "Just":
                    return A2(substOfExps_,
                      s,
                      A2($List._op["::"],
                      e._1._0,
                      e._0));
                    case "Nothing":
                    return A2(substOfExps_,s,e._0);}
                 _U.badCase($moduleName,
                 "between lines 91 and 94");
              }();
            case "EOp":
            return A2(substOfExps_,s,e._1);
            case "EVar": return s;}
         _U.badCase($moduleName,
         "between lines 80 and 97");
      }();
   });
   var substOfExps_ = F2(function (s,
   es) {
      return function () {
         switch (es.ctor)
         {case "::":
            return A2(substOfExps_,
              A2(substOf_,s,es._0),
              es._1);
            case "[]": return s;}
         _U.badCase($moduleName,
         "between lines 99 and 101");
      }();
   });
   var addBreadCrumbs = function (pe) {
      return function () {
         switch (pe.ctor)
         {case "_Tuple2":
            switch (pe._0.ctor)
              {case "PList":
                 switch (pe._1.ctor)
                   {case "EList":
                      return function () {
                           var _v76 = A2($Utils.maybeZip,
                           pe._0._0,
                           pe._1._0);
                           switch (_v76.ctor)
                           {case "Just":
                              return function () {
                                   var es$ = A2($List.map,
                                   addBreadCrumbs,
                                   _v76._0);
                                   var me$ = function () {
                                      var _v78 = {ctor: "_Tuple2"
                                                 ,_0: pe._0._1
                                                 ,_1: pe._1._1};
                                      switch (_v78.ctor)
                                      {case "_Tuple2":
                                         switch (_v78._0.ctor)
                                           {case "Just":
                                              switch (_v78._1.ctor)
                                                {case "Just":
                                                   return $Maybe.Just(addBreadCrumbs({ctor: "_Tuple2"
                                                                                     ,_0: _v78._0._0
                                                                                     ,_1: _v78._1._0}));}
                                                break;}
                                           break;}
                                      return pe._1._1;
                                   }();
                                   return A2($Lang.EList,es$,me$);
                                }();
                              case "Nothing":
                              return A2($Lang.EList,
                                pe._1._0,
                                pe._1._1);}
                           _U.badCase($moduleName,
                           "between lines 68 and 76");
                        }();}
                   break;
                 case "PVar": switch (pe._1.ctor)
                   {case "EConst":
                      switch (pe._1._1.ctor)
                        {case "_Tuple3":
                           switch (pe._1._1._2)
                             {case "":
                                return A2($Lang.EConst,
                                  pe._1._0,
                                  {ctor: "_Tuple3"
                                  ,_0: pe._1._1._0
                                  ,_1: pe._1._1._1
                                  ,_2: pe._0._0});}
                             break;}
                        break;}
                   break;}
              return pe._1;}
         _U.badCase($moduleName,
         "between lines 65 and 76");
      }();
   };
   var freshen_ = F2(function (k,
   e) {
      return function () {
         switch (e.ctor)
         {case "EApp":
            return function () {
                 var _ = A2(freshenExps,
                 k,
                 A2($List._op["::"],e._0,e._1));
                 var es$ = function () {
                    switch (_.ctor)
                    {case "_Tuple2":
                       switch (_._0.ctor)
                         {case "::": return _._0._1;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 39, column 36 to 56");
                 }();
                 var f$ = function () {
                    switch (_.ctor)
                    {case "_Tuple2":
                       switch (_._0.ctor)
                         {case "::": return _._0._0;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 39, column 36 to 56");
                 }();
                 var k$ = function () {
                    switch (_.ctor)
                    {case "_Tuple2":
                       switch (_._0.ctor)
                         {case "::": return _._1;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 39, column 36 to 56");
                 }();
                 return {ctor: "_Tuple2"
                        ,_0: A2($Lang.EApp,f$,es$)
                        ,_1: k$};
              }();
            case "EBase":
            return {ctor: "_Tuple2"
                   ,_0: $Lang.EBase(e._0)
                   ,_1: k};
            case "ECase":
            return function () {
                 var es = A2($List.map,
                 $Basics.snd,
                 e._1);
                 var _ = A2(freshenExps,
                 k,
                 A2($List._op["::"],e._0,es));
                 var e$ = function () {
                    switch (_.ctor)
                    {case "_Tuple2":
                       switch (_._0.ctor)
                         {case "::": return _._0._0;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 54, column 25 to 45");
                 }();
                 var es$ = function () {
                    switch (_.ctor)
                    {case "_Tuple2":
                       switch (_._0.ctor)
                         {case "::": return _._0._1;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 54, column 25 to 45");
                 }();
                 var k$ = function () {
                    switch (_.ctor)
                    {case "_Tuple2":
                       switch (_._0.ctor)
                         {case "::": return _._1;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 54, column 25 to 45");
                 }();
                 return {ctor: "_Tuple2"
                        ,_0: A2($Lang.ECase,
                        e$,
                        A2($Utils.zip,
                        A2($List.map,$Basics.fst,e._1),
                        es$))
                        ,_1: k$};
              }();
            case "EComment":
            return function () {
                 var $ = A2(freshen_,k,e._1),
                 e1$ = $._0,
                 k$ = $._1;
                 return {ctor: "_Tuple2"
                        ,_0: A2($Lang.EComment,e._0,e1$)
                        ,_1: k$};
              }();
            case "EConst":
            return function () {
                 var _ = e._1;
                 var b = function () {
                    switch (_.ctor)
                    {case "_Tuple3": switch (_._0)
                         {case 0: switch (_._2)
                              {case "": return _._1;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 35, column 32 to 33");
                 }();
                 return {ctor: "_Tuple2"
                        ,_0: A2($Lang.EConst,
                        e._0,
                        {ctor: "_Tuple3"
                        ,_0: k
                        ,_1: b
                        ,_2: ""})
                        ,_1: k + 1};
              }();
            case "EFun":
            return function () {
                 var $ = A2(freshen_,k,e._1),
                 e$ = $._0,
                 k$ = $._1;
                 return {ctor: "_Tuple2"
                        ,_0: A2($Lang.EFun,e._0,e$)
                        ,_1: k$};
              }();
            case "EIf": return function () {
                 var _ = A2(freshenExps,
                 k,
                 _L.fromArray([e._0,e._1,e._2]));
                 var e1$ = function () {
                    switch (_.ctor)
                    {case "_Tuple2":
                       switch (_._0.ctor)
                         {case "::":
                            switch (_._0._1.ctor)
                              {case "::":
                                 switch (_._0._1._1.ctor)
                                   {case "::":
                                      switch (_._0._1._1._1.ctor)
                                        {case "[]": return _._0._0;}
                                        break;}
                                   break;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 46, column 44 to 68");
                 }();
                 var e2$ = function () {
                    switch (_.ctor)
                    {case "_Tuple2":
                       switch (_._0.ctor)
                         {case "::":
                            switch (_._0._1.ctor)
                              {case "::":
                                 switch (_._0._1._1.ctor)
                                   {case "::":
                                      switch (_._0._1._1._1.ctor)
                                        {case "[]": return _._0._1._0;}
                                        break;}
                                   break;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 46, column 44 to 68");
                 }();
                 var e3$ = function () {
                    switch (_.ctor)
                    {case "_Tuple2":
                       switch (_._0.ctor)
                         {case "::":
                            switch (_._0._1.ctor)
                              {case "::":
                                 switch (_._0._1._1.ctor)
                                   {case "::":
                                      switch (_._0._1._1._1.ctor)
                                        {case "[]":
                                           return _._0._1._1._0;}
                                        break;}
                                   break;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 46, column 44 to 68");
                 }();
                 var k$ = function () {
                    switch (_.ctor)
                    {case "_Tuple2":
                       switch (_._0.ctor)
                         {case "::":
                            switch (_._0._1.ctor)
                              {case "::":
                                 switch (_._0._1._1.ctor)
                                   {case "::":
                                      switch (_._0._1._1._1.ctor)
                                        {case "[]": return _._1;}
                                        break;}
                                   break;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 46, column 44 to 68");
                 }();
                 return {ctor: "_Tuple2"
                        ,_0: A3($Lang.EIf,e1$,e2$,e3$)
                        ,_1: k$};
              }();
            case "ELet":
            return function () {
                 var _ = A2(freshenExps,
                 k,
                 _L.fromArray([e._3,e._4]));
                 var e1$ = function () {
                    switch (_.ctor)
                    {case "_Tuple2":
                       switch (_._0.ctor)
                         {case "::":
                            switch (_._0._1.ctor)
                              {case "::":
                                 switch (_._0._1._1.ctor)
                                   {case "[]": return _._0._0;}
                                   break;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 49, column 26 to 47");
                 }();
                 var e2$ = function () {
                    switch (_.ctor)
                    {case "_Tuple2":
                       switch (_._0.ctor)
                         {case "::":
                            switch (_._0._1.ctor)
                              {case "::":
                                 switch (_._0._1._1.ctor)
                                   {case "[]": return _._0._1._0;}
                                   break;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 49, column 26 to 47");
                 }();
                 var k$ = function () {
                    switch (_.ctor)
                    {case "_Tuple2":
                       switch (_._0.ctor)
                         {case "::":
                            switch (_._0._1.ctor)
                              {case "::":
                                 switch (_._0._1._1.ctor)
                                   {case "[]": return _._1;}
                                   break;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 49, column 26 to 47");
                 }();
                 var e1$$ = addBreadCrumbs({ctor: "_Tuple2"
                                           ,_0: e._2
                                           ,_1: e1$});
                 return {ctor: "_Tuple2"
                        ,_0: A5($Lang.ELet,
                        e._0,
                        e._1,
                        e._2,
                        e1$$,
                        e2$)
                        ,_1: k$};
              }();
            case "EList":
            return function () {
                 var $ = A2(freshenExps,
                 k,
                 e._0),
                 es$ = $._0,
                 k$ = $._1;
                 return function () {
                    switch (e._1.ctor)
                    {case "Just":
                       return function () {
                            var $ = A2(freshen_,
                            k$,
                            e._1._0),
                            e$ = $._0,
                            k$$ = $._1;
                            return {ctor: "_Tuple2"
                                   ,_0: A2($Lang.EList,
                                   es$,
                                   $Maybe.Just(e$))
                                   ,_1: k$$};
                         }();
                       case "Nothing":
                       return {ctor: "_Tuple2"
                              ,_0: A2($Lang.EList,
                              es$,
                              $Maybe.Nothing)
                              ,_1: k$};}
                    _U.badCase($moduleName,
                    "between lines 42 and 46");
                 }();
              }();
            case "EOp": return function () {
                 var $ = A2(freshenExps,
                 k,
                 e._1),
                 es$ = $._0,
                 k$ = $._1;
                 return {ctor: "_Tuple2"
                        ,_0: A2($Lang.EOp,e._0,es$)
                        ,_1: k$};
              }();
            case "EVar":
            return {ctor: "_Tuple2"
                   ,_0: $Lang.EVar(e._0)
                   ,_1: k};}
         _U.badCase($moduleName,
         "between lines 34 and 58");
      }();
   });
   var freshenExps = F2(function (k,
   es) {
      return A3($List.foldr,
      F2(function (e,_v201) {
         return function () {
            switch (_v201.ctor)
            {case "_Tuple2":
               return function () {
                    var $ = A2(freshen_,
                    _v201._1,
                    e),
                    e1 = $._0,
                    k1 = $._1;
                    return {ctor: "_Tuple2"
                           ,_0: A2($List._op["::"],
                           e1,
                           _v201._0)
                           ,_1: k1};
                 }();}
            _U.badCase($moduleName,
            "between lines 62 and 63");
         }();
      }),
      {ctor: "_Tuple2"
      ,_0: _L.fromArray([])
      ,_1: k},
      es);
   });
   var $ = freshen_(1)($Utils.fromOk_(A2(parseE_,
   $Basics.identity,
   $PreludeGenerated.src))),
   prelude = $._0,
   initK = $._1;
   var isPreludeLoc = function (_v205) {
      return function () {
         switch (_v205.ctor)
         {case "_Tuple3":
            return _U.cmp(_v205._0,
              initK) < 0;}
         _U.badCase($moduleName,
         "on line 19, column 24 to 33");
      }();
   };
   var freshen = function (e) {
      return $Basics.fst(A2(freshen_,
      initK,
      e));
   };
   var parseE = parseE_(freshen);
   var substOf = function (e) {
      return A2(substOfExps_,
      $Dict.empty,
      _L.fromArray([prelude,e]));
   };
   _elm.LangParser.values = {_op: _op
                            ,prelude: prelude
                            ,isPreludeLoc: isPreludeLoc
                            ,substOf: substOf
                            ,parseE: parseE
                            ,parseV: parseV};
   return _elm.LangParser.values;
};
Elm.LangSvg = Elm.LangSvg || {};
Elm.LangSvg.make = function (_elm) {
   "use strict";
   _elm.LangSvg = _elm.LangSvg || {};
   if (_elm.LangSvg.values)
   return _elm.LangSvg.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "LangSvg",
   $Basics = Elm.Basics.make(_elm),
   $Char = Elm.Char.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Attributes = Elm.Html.Attributes.make(_elm),
   $Lang = Elm.Lang.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $String = Elm.String.make(_elm),
   $Svg = Elm.Svg.make(_elm),
   $Svg$Attributes = Elm.Svg.Attributes.make(_elm),
   $Utils = Elm.Utils.make(_elm),
   $VirtualDom = Elm.VirtualDom.make(_elm);
   var zones = _L.fromArray([{ctor: "_Tuple2"
                             ,_0: "svg"
                             ,_1: _L.fromArray([])}
                            ,{ctor: "_Tuple2"
                             ,_0: "circle"
                             ,_1: _L.fromArray([{ctor: "_Tuple2"
                                                ,_0: "Interior"
                                                ,_1: _L.fromArray(["cx","cy"])}
                                               ,{ctor: "_Tuple2"
                                                ,_0: "Edge"
                                                ,_1: _L.fromArray(["r"])}])}
                            ,{ctor: "_Tuple2"
                             ,_0: "ellipse"
                             ,_1: _L.fromArray([{ctor: "_Tuple2"
                                                ,_0: "Interior"
                                                ,_1: _L.fromArray(["cx","cy"])}
                                               ,{ctor: "_Tuple2"
                                                ,_0: "Edge"
                                                ,_1: _L.fromArray(["rx"
                                                                  ,"ry"])}])}
                            ,{ctor: "_Tuple2"
                             ,_0: "rect"
                             ,_1: _L.fromArray([{ctor: "_Tuple2"
                                                ,_0: "Interior"
                                                ,_1: _L.fromArray(["x","y"])}
                                               ,{ctor: "_Tuple2"
                                                ,_0: "TopLeftCorner"
                                                ,_1: _L.fromArray(["x"
                                                                  ,"y"
                                                                  ,"width"
                                                                  ,"height"])}
                                               ,{ctor: "_Tuple2"
                                                ,_0: "TopRightCorner"
                                                ,_1: _L.fromArray(["y"
                                                                  ,"width"
                                                                  ,"height"])}
                                               ,{ctor: "_Tuple2"
                                                ,_0: "BotRightCorner"
                                                ,_1: _L.fromArray(["width"
                                                                  ,"height"])}
                                               ,{ctor: "_Tuple2"
                                                ,_0: "BotLeftCorner"
                                                ,_1: _L.fromArray(["x"
                                                                  ,"width"
                                                                  ,"height"])}
                                               ,{ctor: "_Tuple2"
                                                ,_0: "LeftEdge"
                                                ,_1: _L.fromArray(["x"
                                                                  ,"width"])}
                                               ,{ctor: "_Tuple2"
                                                ,_0: "TopEdge"
                                                ,_1: _L.fromArray(["y"
                                                                  ,"height"])}
                                               ,{ctor: "_Tuple2"
                                                ,_0: "RightEdge"
                                                ,_1: _L.fromArray(["width"])}
                                               ,{ctor: "_Tuple2"
                                                ,_0: "BotEdge"
                                                ,_1: _L.fromArray(["height"])}])}
                            ,{ctor: "_Tuple2"
                             ,_0: "line"
                             ,_1: _L.fromArray([{ctor: "_Tuple2"
                                                ,_0: "Point1"
                                                ,_1: _L.fromArray(["x1","y1"])}
                                               ,{ctor: "_Tuple2"
                                                ,_0: "Point2"
                                                ,_1: _L.fromArray(["x2","y2"])}
                                               ,{ctor: "_Tuple2"
                                                ,_0: "Edge"
                                                ,_1: _L.fromArray(["x1"
                                                                  ,"y1"
                                                                  ,"x2"
                                                                  ,"y2"])}])}
                            ,{ctor: "_Tuple2"
                             ,_0: "g"
                             ,_1: _L.fromArray([])}
                            ,{ctor: "_Tuple2"
                             ,_0: "text"
                             ,_1: _L.fromArray([])}
                            ,{ctor: "_Tuple2"
                             ,_0: "tspan"
                             ,_1: _L.fromArray([])}
                            ,{ctor: "_Tuple2"
                             ,_0: "DUMMYTEXT"
                             ,_1: _L.fromArray([])}]);
   var addi = F2(function (s,i) {
      return A2($Basics._op["++"],
      s,
      $Basics.toString(i));
   });
   var ZEdge = function (a) {
      return {ctor: "ZEdge",_0: a};
   };
   var toZEdge = function (s) {
      return A2($Utils.mapMaybe,
      function ($) {
         return ZEdge($Utils.fromOk_($String.toInt($)));
      },
      A2($Utils.munchString,
      "Edge",
      s));
   };
   var ZPoint = function (a) {
      return {ctor: "ZPoint"
             ,_0: a};
   };
   var toZPoint = function (s) {
      return A2($Utils.mapMaybe,
      function ($) {
         return ZPoint($Utils.fromOk_($String.toInt($)));
      },
      A2($Utils.munchString,
      "Point",
      s));
   };
   var Z = function (a) {
      return {ctor: "Z",_0: a};
   };
   var realZoneOf = function (s) {
      return A2($Maybe.withDefault,
      Z(s),
      A2($Utils.plusMaybe,
      toZPoint(s),
      toZEdge(s)));
   };
   var children = function (n) {
      return function () {
         switch (n.ctor)
         {case "SvgNode": return n._2;
            case "TextNode":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "on line 322, column 14 to 62");
      }();
   };
   var strEdges = function ($) {
      return $Utils.lines($List.map(function (_v5) {
         return function () {
            switch (_v5.ctor)
            {case "_Tuple2":
               return function () {
                    var l = A2($List.map,
                    $Basics.toString,
                    children(_v5._1));
                    return A2($Basics._op["++"],
                    $Basics.toString(_v5._0),
                    A2($Basics._op["++"],
                    " ",
                    $Utils.braces($Utils.spaces(l))));
                 }();}
            _U.badCase($moduleName,
            "between lines 353 and 354");
         }();
      })($Dict.toList($)));
   };
   var SvgNode = F3(function (a,
   b,
   c) {
      return {ctor: "SvgNode"
             ,_0: a
             ,_1: b
             ,_2: c};
   });
   var TextNode = function (a) {
      return {ctor: "TextNode"
             ,_0: a};
   };
   var find = F2(function (d,s) {
      return A3($Utils.find,
      A2($Basics._op["++"],
      "MainSvg.find: ",
      s),
      d,
      s);
   });
   var funcsAttr = _L.fromArray([{ctor: "_Tuple2"
                                 ,_0: "cursor"
                                 ,_1: $Svg$Attributes.cursor}
                                ,{ctor: "_Tuple2"
                                 ,_0: "cx"
                                 ,_1: $Svg$Attributes.cx}
                                ,{ctor: "_Tuple2"
                                 ,_0: "cy"
                                 ,_1: $Svg$Attributes.cy}
                                ,{ctor: "_Tuple2"
                                 ,_0: "d"
                                 ,_1: $Svg$Attributes.d}
                                ,{ctor: "_Tuple2"
                                 ,_0: "draggable"
                                 ,_1: $Html$Attributes.draggable}
                                ,{ctor: "_Tuple2"
                                 ,_0: "fill"
                                 ,_1: $Svg$Attributes.fill}
                                ,{ctor: "_Tuple2"
                                 ,_0: "font-family"
                                 ,_1: $Svg$Attributes.fontFamily}
                                ,{ctor: "_Tuple2"
                                 ,_0: "font-size"
                                 ,_1: $Svg$Attributes.fontSize}
                                ,{ctor: "_Tuple2"
                                 ,_0: "height"
                                 ,_1: $Svg$Attributes.height}
                                ,{ctor: "_Tuple2"
                                 ,_0: "opacity"
                                 ,_1: $Svg$Attributes.opacity}
                                ,{ctor: "_Tuple2"
                                 ,_0: "points"
                                 ,_1: $Svg$Attributes.points}
                                ,{ctor: "_Tuple2"
                                 ,_0: "r"
                                 ,_1: $Svg$Attributes.r}
                                ,{ctor: "_Tuple2"
                                 ,_0: "rx"
                                 ,_1: $Svg$Attributes.rx}
                                ,{ctor: "_Tuple2"
                                 ,_0: "ry"
                                 ,_1: $Svg$Attributes.ry}
                                ,{ctor: "_Tuple2"
                                 ,_0: "stroke"
                                 ,_1: $Svg$Attributes.stroke}
                                ,{ctor: "_Tuple2"
                                 ,_0: "stroke-width"
                                 ,_1: $Svg$Attributes.strokeWidth}
                                ,{ctor: "_Tuple2"
                                 ,_0: "strokeWidth"
                                 ,_1: $Svg$Attributes.strokeWidth}
                                ,{ctor: "_Tuple2"
                                 ,_0: "style"
                                 ,_1: $Svg$Attributes.style}
                                ,{ctor: "_Tuple2"
                                 ,_0: "transform"
                                 ,_1: $Svg$Attributes.transform}
                                ,{ctor: "_Tuple2"
                                 ,_0: "viewbox"
                                 ,_1: $Svg$Attributes.viewBox}
                                ,{ctor: "_Tuple2"
                                 ,_0: "viewBox"
                                 ,_1: $Svg$Attributes.viewBox}
                                ,{ctor: "_Tuple2"
                                 ,_0: "width"
                                 ,_1: $Svg$Attributes.width}
                                ,{ctor: "_Tuple2"
                                 ,_0: "x"
                                 ,_1: $Svg$Attributes.x}
                                ,{ctor: "_Tuple2"
                                 ,_0: "x1"
                                 ,_1: $Svg$Attributes.x1}
                                ,{ctor: "_Tuple2"
                                 ,_0: "x2"
                                 ,_1: $Svg$Attributes.x2}
                                ,{ctor: "_Tuple2"
                                 ,_0: "y"
                                 ,_1: $Svg$Attributes.y}
                                ,{ctor: "_Tuple2"
                                 ,_0: "y1"
                                 ,_1: $Svg$Attributes.y1}
                                ,{ctor: "_Tuple2"
                                 ,_0: "y2"
                                 ,_1: $Svg$Attributes.y2}]);
   var attr = find(funcsAttr);
   var funcsSvg = _L.fromArray([{ctor: "_Tuple2"
                                ,_0: "circle"
                                ,_1: $Svg.circle}
                               ,{ctor: "_Tuple2"
                                ,_0: "ellipse"
                                ,_1: $Svg.ellipse}
                               ,{ctor: "_Tuple2"
                                ,_0: "g"
                                ,_1: $Svg.g}
                               ,{ctor: "_Tuple2"
                                ,_0: "line"
                                ,_1: $Svg.line}
                               ,{ctor: "_Tuple2"
                                ,_0: "path"
                                ,_1: $Svg.path}
                               ,{ctor: "_Tuple2"
                                ,_0: "polygon"
                                ,_1: $Svg.polygon}
                               ,{ctor: "_Tuple2"
                                ,_0: "polyline"
                                ,_1: $Svg.polyline}
                               ,{ctor: "_Tuple2"
                                ,_0: "rect"
                                ,_1: $Svg.rect}
                               ,{ctor: "_Tuple2"
                                ,_0: "svg"
                                ,_1: $Svg.svg}
                               ,{ctor: "_Tuple2"
                                ,_0: "text"
                                ,_1: $Svg.text}
                               ,{ctor: "_Tuple2"
                                ,_0: "tspan"
                                ,_1: $Svg.tspan}]);
   var svg = find(funcsSvg);
   var matchCmd = F2(function (cmd,
   s) {
      return function () {
         var _ = $String.toList(cmd);
         var c = function () {
            switch (_.ctor)
            {case "::": switch (_._1.ctor)
                 {case "[]": return _._0;}
                 break;}
            _U.badCase($moduleName,
            "on line 221, column 13 to 30");
         }();
         var cs = $String.toList(s);
         return A2($List.member,
         c,
         A2($Basics._op["++"],
         cs,
         A2($List.map,
         $Char.toLower,
         cs)));
      }();
   });
   var projConsts = F2(function (k,
   vs) {
      return _U.eq(k,
      0) ? {ctor: "_Tuple2"
           ,_0: _L.fromArray([])
           ,_1: vs} : function () {
         switch (vs.ctor)
         {case "::": switch (vs._0.ctor)
              {case "VConst":
                 return function () {
                      var $ = A2(projConsts,
                      k - 1,
                      vs._1),
                      l1 = $._0,
                      l2 = $._1;
                      return {ctor: "_Tuple2"
                             ,_0: A2($List._op["::"],
                             vs._0._0,
                             l1)
                             ,_1: l2};
                   }();}
              break;}
         _U.badCase($moduleName,
         "between lines 215 and 218");
      }();
   });
   var strAPath2 = function () {
      var strPt = function (_v16) {
         return function () {
            switch (_v16.ctor)
            {case "_Tuple2":
               switch (_v16._1.ctor)
                 {case "_Tuple2":
                    return A2($Basics._op["++"],
                      $Basics.toString($Basics.fst(_v16._1._0)),
                      A2($Basics._op["++"],
                      " ",
                      $Basics.toString($Basics.fst(_v16._1._1))));}
                 break;}
            _U.badCase($moduleName,
            "on line 199, column 27 to 71");
         }();
      };
      var strNum = function (_v22) {
         return function () {
            switch (_v22.ctor)
            {case "_Tuple2":
               return $Basics.toString(_v22._0);}
            _U.badCase($moduleName,
            "on line 200, column 22 to 32");
         }();
      };
      var strPathCmd = function (c) {
         return function () {
            switch (c.ctor)
            {case "CmdA":
               return $Utils.spaces(A2($List._op["::"],
                 c._0,
                 A2($Basics._op["++"],
                 A2($List.map,
                 strNum,
                 _L.fromArray([c._1
                              ,c._2
                              ,c._3
                              ,c._4
                              ,c._5])),
                 _L.fromArray([strPt(c._6)]))));
               case "CmdC":
               return $Utils.spaces(A2($List._op["::"],
                 c._0,
                 A2($List.map,
                 strPt,
                 _L.fromArray([c._1
                              ,c._2
                              ,c._3]))));
               case "CmdHV":
               return $Utils.spaces(_L.fromArray([c._0
                                                 ,strNum(c._1)]));
               case "CmdMLT":
               return $Utils.spaces(_L.fromArray([c._0
                                                 ,strPt(c._1)]));
               case "CmdSQ":
               return $Utils.spaces(A2($List._op["::"],
                 c._0,
                 A2($List.map,
                 strPt,
                 _L.fromArray([c._1,c._2]))));
               case "CmdZ": return c._0;}
            _U.badCase($moduleName,
            "between lines 202 and 210");
         }();
      };
      return function ($) {
         return $Utils.spaces($List.map(strPathCmd)($));
      };
   }();
   var addIdPoints = F3(function (cmd,
   counts,
   pts) {
      return function () {
         var _ = $String.toList(cmd);
         var c = function () {
            switch (_.ctor)
            {case "::": switch (_._1.ctor)
                 {case "[]": return _._0;}
                 break;}
            _U.badCase($moduleName,
            "on line 186, column 13 to 30");
         }();
         return $Char.isLower(c) ? {ctor: "_Tuple2"
                                   ,_0: counts
                                   ,_1: A2($List.map,
                                   F2(function (v0,v1) {
                                      return {ctor: "_Tuple2"
                                             ,_0: v0
                                             ,_1: v1};
                                   })($Maybe.Nothing),
                                   pts)} : $Char.isUpper(c) ? function () {
            var $ = A3($List.foldl,
            F2(function (pt,_v49) {
               return function () {
                  switch (_v49.ctor)
                  {case "_Tuple2":
                     return function () {
                          var nextId = 1 + _v49._0.numPoints;
                          var acc1$ = _U.replace([["numPoints"
                                                  ,nextId]],
                          _v49._0);
                          var acc2$ = A2($List._op["::"],
                          {ctor: "_Tuple2"
                          ,_0: $Maybe.Just(nextId)
                          ,_1: pt},
                          _v49._1);
                          return {ctor: "_Tuple2"
                                 ,_0: acc1$
                                 ,_1: acc2$};
                       }();}
                  _U.badCase($moduleName,
                  "between lines 191 and 194");
               }();
            }),
            {ctor: "_Tuple2"
            ,_0: counts
            ,_1: _L.fromArray([])},
            pts),
            counts$ = $._0,
            l = $._1;
            return {ctor: "_Tuple2"
                   ,_0: counts$
                   ,_1: $List.reverse(l)};
         }() : _U.badIf($moduleName,
         "between lines 187 and 196");
      }();
   });
   _op["+++"] = F2(function (x,
   _v53) {
      return function () {
         switch (_v53.ctor)
         {case "_Tuple2":
            return {ctor: "_Tuple2"
                   ,_0: A2($List._op["::"],
                   x,
                   _v53._0)
                   ,_1: _v53._1};}
         _U.badCase($moduleName,
         "on line 182, column 21 to 33");
      }();
   });
   var valsOfPathCmd = function (c) {
      return function () {
         var fooPt = function (_v57) {
            return function () {
               switch (_v57.ctor)
               {case "_Tuple2":
                  switch (_v57._1.ctor)
                    {case "_Tuple2":
                       return _L.fromArray([$Lang.VConst(_v57._1._0)
                                           ,$Lang.VConst(_v57._1._1)]);}
                    break;}
               _U.badCase($moduleName,
               "on line 136, column 25 to 45");
            }();
         };
         return function () {
            switch (c.ctor)
            {case "CmdA":
               return A2($List._op["::"],
                 $Lang.vStr(c._0),
                 A2($Basics._op["++"],
                 A2($List.map,
                 $Lang.VConst,
                 _L.fromArray([c._1
                              ,c._2
                              ,c._3
                              ,c._4
                              ,c._5])),
                 fooPt(c._6)));
               case "CmdC":
               return A2($List._op["::"],
                 $Lang.vStr(c._0),
                 A2($List.concatMap,
                 fooPt,
                 _L.fromArray([c._1
                              ,c._2
                              ,c._3])));
               case "CmdHV":
               return A2($List._op["::"],
                 $Lang.vStr(c._0),
                 _L.fromArray([$Lang.VConst(c._1)]));
               case "CmdMLT":
               return A2($List._op["::"],
                 $Lang.vStr(c._0),
                 fooPt(c._1));
               case "CmdSQ":
               return A2($List._op["::"],
                 $Lang.vStr(c._0),
                 A2($List.concatMap,
                 fooPt,
                 _L.fromArray([c._1,c._2])));
               case "CmdZ":
               return A2($List._op["::"],
                 $Lang.vStr(c._0),
                 _L.fromArray([]));}
            _U.badCase($moduleName,
            "between lines 137 and 143");
         }();
      }();
   };
   var strRgba = function (_v83) {
      return function () {
         switch (_v83.ctor)
         {case "_Tuple4":
            return function () {
                 var _ = A2($List.map,
                 $Basics.fst,
                 _L.fromArray([_v83._0
                              ,_v83._1
                              ,_v83._2
                              ,_v83._3]));
                 var a = function () {
                    switch (_.ctor)
                    {case "::": switch (_._1.ctor)
                         {case "::":
                            switch (_._1._1.ctor)
                              {case "::":
                                 switch (_._1._1._1.ctor)
                                   {case "::":
                                      switch (_._1._1._1._1.ctor)
                                        {case "[]":
                                           return _._1._1._1._0;}
                                        break;}
                                   break;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 116, column 19 to 45");
                 }();
                 var b = function () {
                    switch (_.ctor)
                    {case "::": switch (_._1.ctor)
                         {case "::":
                            switch (_._1._1.ctor)
                              {case "::":
                                 switch (_._1._1._1.ctor)
                                   {case "::":
                                      switch (_._1._1._1._1.ctor)
                                        {case "[]": return _._1._1._0;}
                                        break;}
                                   break;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 116, column 19 to 45");
                 }();
                 var g = function () {
                    switch (_.ctor)
                    {case "::": switch (_._1.ctor)
                         {case "::":
                            switch (_._1._1.ctor)
                              {case "::":
                                 switch (_._1._1._1.ctor)
                                   {case "::":
                                      switch (_._1._1._1._1.ctor)
                                        {case "[]": return _._1._0;}
                                        break;}
                                   break;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 116, column 19 to 45");
                 }();
                 var r = function () {
                    switch (_.ctor)
                    {case "::": switch (_._1.ctor)
                         {case "::":
                            switch (_._1._1.ctor)
                              {case "::":
                                 switch (_._1._1._1.ctor)
                                   {case "::":
                                      switch (_._1._1._1._1.ctor)
                                        {case "[]": return _._0;}
                                        break;}
                                   break;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 116, column 19 to 45");
                 }();
                 return A2($Basics._op["++"],
                 "rgba",
                 $Utils.parens($Utils.commas(A2($List.map,
                 $Basics.toString,
                 _L.fromArray([r,g,b,a])))));
              }();}
         _U.badCase($moduleName,
         "between lines 116 and 117");
      }();
   };
   var strPoint = function (_v125) {
      return function () {
         switch (_v125.ctor)
         {case "_Tuple2":
            return function () {
                 var _ = A2($List.map,
                 $Basics.fst,
                 _L.fromArray([_v125._0
                              ,_v125._1]));
                 var x = function () {
                    switch (_.ctor)
                    {case "::": switch (_._1.ctor)
                         {case "::":
                            switch (_._1._1.ctor)
                              {case "[]": return _._0;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 112, column 15 to 35");
                 }();
                 var y = function () {
                    switch (_.ctor)
                    {case "::": switch (_._1.ctor)
                         {case "::":
                            switch (_._1._1.ctor)
                              {case "[]": return _._1._0;}
                              break;}
                         break;}
                    _U.badCase($moduleName,
                    "on line 112, column 15 to 35");
                 }();
                 return A2($Basics._op["++"],
                 $Basics.toString(x),
                 A2($Basics._op["++"],
                 ",",
                 $Basics.toString(y)));
              }();}
         _U.badCase($moduleName,
         "between lines 112 and 113");
      }();
   };
   var strAVal = function (a) {
      return function () {
         switch (a.ctor)
         {case "ANum":
            return $Basics.toString($Basics.fst(a._0));
            case "APath2":
            return strAPath2($Basics.fst(a._0));
            case "APoints":
            return $Utils.spaces(A2($List.map,
              strPoint,
              a._0));
            case "ARgba":
            return strRgba(a._0);
            case "AString": return a._0;}
         _U.badCase($moduleName,
         "between lines 119 and 125");
      }();
   };
   var printAttr = function (_v145) {
      return function () {
         switch (_v145.ctor)
         {case "_Tuple2":
            return A2($Basics._op["++"],
              _v145._0,
              A2($Basics._op["++"],
              "=",
              A3($Utils.delimit,
              "\'",
              "\'",
              strAVal(_v145._1))));}
         _U.badCase($moduleName,
         "on line 385, column 3 to 47");
      }();
   };
   var printAttrs = function (l) {
      return function () {
         switch (l.ctor)
         {case "[]": return "";}
         return A2($Basics._op["++"],
         " ",
         $Utils.spaces(A2($List.map,
         printAttr,
         l)));
      }();
   };
   var rgbaToVal = function (_v150) {
      return function () {
         switch (_v150.ctor)
         {case "_Tuple4":
            return _L.fromArray([$Lang.VConst(_v150._0)
                                ,$Lang.VConst(_v150._1)
                                ,$Lang.VConst(_v150._2)
                                ,$Lang.VConst(_v150._3)]);}
         _U.badCase($moduleName,
         "on line 109, column 23 to 63");
      }();
   };
   var valToRgba = function (_v156) {
      return function () {
         switch (_v156.ctor)
         {case "::":
            switch (_v156._0.ctor)
              {case "VConst":
                 switch (_v156._1.ctor)
                   {case "::":
                      switch (_v156._1._0.ctor)
                        {case "VConst":
                           switch (_v156._1._1.ctor)
                             {case "::":
                                switch (_v156._1._1._0.ctor)
                                  {case "VConst":
                                     switch (_v156._1._1._1.ctor)
                                       {case "::":
                                          switch (_v156._1._1._1._0.ctor)
                                            {case "VConst":
                                               switch (_v156._1._1._1._1.ctor)
                                                 {case "[]":
                                                    return {ctor: "_Tuple4"
                                                           ,_0: _v156._0._0
                                                           ,_1: _v156._1._0._0
                                                           ,_2: _v156._1._1._0._0
                                                           ,_3: _v156._1._1._1._0._0};}
                                                 break;}
                                            break;}
                                       break;}
                                  break;}
                             break;}
                        break;}
                   break;}
              break;}
         _U.badCase($moduleName,
         "on line 108, column 55 to 62");
      }();
   };
   var pointToVal = function (_v170) {
      return function () {
         switch (_v170.ctor)
         {case "_Tuple2":
            return $Lang.VList(_L.fromArray([$Lang.VConst(_v170._0)
                                            ,$Lang.VConst(_v170._1)]));}
         _U.badCase($moduleName,
         "on line 106, column 21 to 47");
      }();
   };
   var valOfAVal = function (a) {
      return function () {
         switch (a.ctor)
         {case "ANum":
            return $Lang.VConst(a._0);
            case "APath2":
            return $Lang.VList(A2($List.concatMap,
              valsOfPathCmd,
              $Basics.fst(a._0)));
            case "APoints":
            return $Lang.VList(A2($List.map,
              pointToVal,
              a._0));
            case "ARgba":
            return $Lang.VList(rgbaToVal(a._0));
            case "AString":
            return $Lang.VBase($Lang.String(a._0));}
         _U.badCase($moduleName,
         "between lines 127 and 133");
      }();
   };
   var valOfAttr = function (_v180) {
      return function () {
         switch (_v180.ctor)
         {case "_Tuple2":
            return $Lang.VList(_L.fromArray([$Lang.VBase($Lang.String(_v180._0))
                                            ,valOfAVal(_v180._1)]));}
         _U.badCase($moduleName,
         "on line 145, column 19 to 56");
      }();
   };
   var valToPoint = function (_v184) {
      return function () {
         switch (_v184.ctor)
         {case "VList":
            switch (_v184._0.ctor)
              {case "::":
                 switch (_v184._0._0.ctor)
                   {case "VConst":
                      switch (_v184._0._1.ctor)
                        {case "::":
                           switch (_v184._0._1._0.ctor)
                             {case "VConst":
                                switch (_v184._0._1._1.ctor)
                                  {case "[]":
                                     return {ctor: "_Tuple2"
                                            ,_0: _v184._0._0._0
                                            ,_1: _v184._0._1._0._0};}
                                  break;}
                             break;}
                        break;}
                   break;}
              break;}
         _U.badCase($moduleName,
         "on line 105, column 44 to 47");
      }();
   };
   var toPath = function (_v193) {
      return function () {
         switch (_v193.ctor)
         {case "APath2":
            return _v193._0;}
         _U.badCase($moduleName,
         "on line 93, column 23 to 24");
      }();
   };
   var toPoints = function (_v196) {
      return function () {
         switch (_v196.ctor)
         {case "APoints":
            return _v196._0;}
         _U.badCase($moduleName,
         "on line 92, column 26 to 29");
      }();
   };
   var toNumTr = function (a) {
      return function () {
         switch (a.ctor)
         {case "ANum": switch (a._0.ctor)
              {case "_Tuple2":
                 return {ctor: "_Tuple2"
                        ,_0: a._0._0
                        ,_1: a._0._1};}
              break;
            case "AString":
            return function () {
                 var _v204 = $String.toFloat(a._0);
                 switch (_v204.ctor)
                 {case "Ok":
                    return {ctor: "_Tuple2"
                           ,_0: _v204._0
                           ,_1: $Lang.dummyTrace};}
                 _U.badCase($moduleName,
                 "between lines 89 and 90");
              }();}
         _U.badCase($moduleName,
         "between lines 87 and 90");
      }();
   };
   var toNum = function (a) {
      return function () {
         switch (a.ctor)
         {case "ANum": switch (a._0.ctor)
              {case "_Tuple2":
                 return a._0._0;}
              break;
            case "AString":
            return function () {
                 var _v211 = $String.toFloat(a._0);
                 switch (_v211.ctor)
                 {case "Ok": return _v211._0;}
                 _U.badCase($moduleName,
                 "between lines 84 and 85");
              }();}
         _U.badCase($moduleName,
         "between lines 82 and 85");
      }();
   };
   var PathCounts = function (a) {
      return {_: {},numPoints: a};
   };
   var CmdA = F7(function (a,
   b,
   c,
   d,
   e,
   f,
   g) {
      return {ctor: "CmdA"
             ,_0: a
             ,_1: b
             ,_2: c
             ,_3: d
             ,_4: e
             ,_5: f
             ,_6: g};
   });
   var CmdSQ = F3(function (a,
   b,
   c) {
      return {ctor: "CmdSQ"
             ,_0: a
             ,_1: b
             ,_2: c};
   });
   var CmdC = F4(function (a,
   b,
   c,
   d) {
      return {ctor: "CmdC"
             ,_0: a
             ,_1: b
             ,_2: c
             ,_3: d};
   });
   var CmdHV = F2(function (a,b) {
      return {ctor: "CmdHV"
             ,_0: a
             ,_1: b};
   });
   var CmdMLT = F2(function (a,b) {
      return {ctor: "CmdMLT"
             ,_0: a
             ,_1: b};
   });
   var CmdZ = function (a) {
      return {ctor: "CmdZ",_0: a};
   };
   var valsToPath2_ = F2(function (counts,
   vs) {
      return function () {
         switch (vs.ctor)
         {case "::": switch (vs._0.ctor)
              {case "VBase":
                 switch (vs._0._0.ctor)
                   {case "String":
                      return A2(matchCmd,
                        vs._0._0._0,
                        "Z") ? A2(_op["+++"],
                        CmdZ(vs._0._0._0),
                        A2(valsToPath2_,
                        counts,
                        vs._1)) : A2(matchCmd,
                        vs._0._0._0,
                        "MLT") ? function () {
                           var _ = A2(projConsts,
                           2,
                           vs._1);
                           var vs$$ = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "::":
                                           switch (_._0._1._1.ctor)
                                             {case "[]": return _._1;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 163, column 31 to 47");
                           }();
                           var x = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "::":
                                           switch (_._0._1._1.ctor)
                                             {case "[]": return _._0._0;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 163, column 31 to 47");
                           }();
                           var y = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "::":
                                           switch (_._0._1._1.ctor)
                                             {case "[]": return _._0._1._0;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 163, column 31 to 47");
                           }();
                           var _ = A3(addIdPoints,
                           vs._0._0._0,
                           counts,
                           _L.fromArray([{ctor: "_Tuple2"
                                         ,_0: x
                                         ,_1: y}]));
                           var counts$ = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._1.ctor)
                                   {case "::":
                                      switch (_._1._1.ctor)
                                        {case "[]": return _._0;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 164, column 33 to 63");
                           }();
                           var pt = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._1.ctor)
                                   {case "::":
                                      switch (_._1._1.ctor)
                                        {case "[]": return _._1._0;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 164, column 33 to 63");
                           }();
                           return A2(_op["+++"],
                           A2(CmdMLT,vs._0._0._0,pt),
                           A2(valsToPath2_,counts$,vs$$));
                        }() : A2(matchCmd,
                        vs._0._0._0,
                        "HV") ? function () {
                           var _ = A2(projConsts,
                           1,
                           vs._1);
                           var i = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "[]": return _._0._0;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 167, column 29 to 45");
                           }();
                           var vs$$ = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "[]": return _._1;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 167, column 29 to 45");
                           }();
                           return A2(_op["+++"],
                           A2(CmdHV,vs._0._0._0,i),
                           A2(valsToPath2_,counts,vs$$));
                        }() : A2(matchCmd,
                        vs._0._0._0,
                        "C") ? function () {
                           var _ = A2(projConsts,
                           6,
                           vs._1);
                           var vs$$ = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "::":
                                           switch (_._0._1._1.ctor)
                                             {case "::":
                                                switch (_._0._1._1._1.ctor)
                                                  {case "::":
                                                     switch (_._0._1._1._1._1.ctor)
                                                       {case "::":
                                                          switch (_._0._1._1._1._1._1.ctor)
                                                            {case "::":
                                                               switch (_._0._1._1._1._1._1._1.ctor)
                                                                 {case "[]":
                                                                    return _._1;}
                                                                 break;}
                                                            break;}
                                                       break;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 170, column 43 to 59");
                           }();
                           var x = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "::":
                                           switch (_._0._1._1.ctor)
                                             {case "::":
                                                switch (_._0._1._1._1.ctor)
                                                  {case "::":
                                                     switch (_._0._1._1._1._1.ctor)
                                                       {case "::":
                                                          switch (_._0._1._1._1._1._1.ctor)
                                                            {case "::":
                                                               switch (_._0._1._1._1._1._1._1.ctor)
                                                                 {case "[]":
                                                                    return _._0._1._1._1._1._0;}
                                                                 break;}
                                                            break;}
                                                       break;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 170, column 43 to 59");
                           }();
                           var x1 = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "::":
                                           switch (_._0._1._1.ctor)
                                             {case "::":
                                                switch (_._0._1._1._1.ctor)
                                                  {case "::":
                                                     switch (_._0._1._1._1._1.ctor)
                                                       {case "::":
                                                          switch (_._0._1._1._1._1._1.ctor)
                                                            {case "::":
                                                               switch (_._0._1._1._1._1._1._1.ctor)
                                                                 {case "[]":
                                                                    return _._0._0;}
                                                                 break;}
                                                            break;}
                                                       break;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 170, column 43 to 59");
                           }();
                           var x2 = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "::":
                                           switch (_._0._1._1.ctor)
                                             {case "::":
                                                switch (_._0._1._1._1.ctor)
                                                  {case "::":
                                                     switch (_._0._1._1._1._1.ctor)
                                                       {case "::":
                                                          switch (_._0._1._1._1._1._1.ctor)
                                                            {case "::":
                                                               switch (_._0._1._1._1._1._1._1.ctor)
                                                                 {case "[]":
                                                                    return _._0._1._1._0;}
                                                                 break;}
                                                            break;}
                                                       break;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 170, column 43 to 59");
                           }();
                           var y = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "::":
                                           switch (_._0._1._1.ctor)
                                             {case "::":
                                                switch (_._0._1._1._1.ctor)
                                                  {case "::":
                                                     switch (_._0._1._1._1._1.ctor)
                                                       {case "::":
                                                          switch (_._0._1._1._1._1._1.ctor)
                                                            {case "::":
                                                               switch (_._0._1._1._1._1._1._1.ctor)
                                                                 {case "[]":
                                                                    return _._0._1._1._1._1._1._0;}
                                                                 break;}
                                                            break;}
                                                       break;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 170, column 43 to 59");
                           }();
                           var y1 = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "::":
                                           switch (_._0._1._1.ctor)
                                             {case "::":
                                                switch (_._0._1._1._1.ctor)
                                                  {case "::":
                                                     switch (_._0._1._1._1._1.ctor)
                                                       {case "::":
                                                          switch (_._0._1._1._1._1._1.ctor)
                                                            {case "::":
                                                               switch (_._0._1._1._1._1._1._1.ctor)
                                                                 {case "[]":
                                                                    return _._0._1._0;}
                                                                 break;}
                                                            break;}
                                                       break;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 170, column 43 to 59");
                           }();
                           var y2 = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "::":
                                           switch (_._0._1._1.ctor)
                                             {case "::":
                                                switch (_._0._1._1._1.ctor)
                                                  {case "::":
                                                     switch (_._0._1._1._1._1.ctor)
                                                       {case "::":
                                                          switch (_._0._1._1._1._1._1.ctor)
                                                            {case "::":
                                                               switch (_._0._1._1._1._1._1._1.ctor)
                                                                 {case "[]":
                                                                    return _._0._1._1._1._0;}
                                                                 break;}
                                                            break;}
                                                       break;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 170, column 43 to 59");
                           }();
                           var _ = A3(addIdPoints,
                           vs._0._0._0,
                           counts,
                           _L.fromArray([{ctor: "_Tuple2"
                                         ,_0: x1
                                         ,_1: y1}
                                        ,{ctor: "_Tuple2",_0: x2,_1: y2}
                                        ,{ctor: "_Tuple2"
                                         ,_0: x
                                         ,_1: y}]));
                           var counts$ = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._1.ctor)
                                   {case "::":
                                      switch (_._1._1.ctor)
                                        {case "::":
                                           switch (_._1._1._1.ctor)
                                             {case "::":
                                                switch (_._1._1._1._1.ctor)
                                                  {case "[]": return _._0;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 171, column 42 to 88");
                           }();
                           var pt1 = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._1.ctor)
                                   {case "::":
                                      switch (_._1._1.ctor)
                                        {case "::":
                                           switch (_._1._1._1.ctor)
                                             {case "::":
                                                switch (_._1._1._1._1.ctor)
                                                  {case "[]": return _._1._0;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 171, column 42 to 88");
                           }();
                           var pt2 = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._1.ctor)
                                   {case "::":
                                      switch (_._1._1.ctor)
                                        {case "::":
                                           switch (_._1._1._1.ctor)
                                             {case "::":
                                                switch (_._1._1._1._1.ctor)
                                                  {case "[]":
                                                     return _._1._1._0;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 171, column 42 to 88");
                           }();
                           var pt3 = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._1.ctor)
                                   {case "::":
                                      switch (_._1._1.ctor)
                                        {case "::":
                                           switch (_._1._1._1.ctor)
                                             {case "::":
                                                switch (_._1._1._1._1.ctor)
                                                  {case "[]":
                                                     return _._1._1._1._0;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 171, column 42 to 88");
                           }();
                           return A2(_op["+++"],
                           A4(CmdC,
                           vs._0._0._0,
                           pt1,
                           pt2,
                           pt3),
                           A2(valsToPath2_,counts$,vs$$));
                        }() : A2(matchCmd,
                        vs._0._0._0,
                        "SQ") ? function () {
                           var _ = A2(projConsts,
                           4,
                           vs._1);
                           var vs$$ = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "::":
                                           switch (_._0._1._1.ctor)
                                             {case "::":
                                                switch (_._0._1._1._1.ctor)
                                                  {case "::":
                                                     switch (_._0._1._1._1._1.ctor)
                                                       {case "[]": return _._1;}
                                                       break;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 174, column 37 to 53");
                           }();
                           var x = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "::":
                                           switch (_._0._1._1.ctor)
                                             {case "::":
                                                switch (_._0._1._1._1.ctor)
                                                  {case "::":
                                                     switch (_._0._1._1._1._1.ctor)
                                                       {case "[]":
                                                          return _._0._1._1._0;}
                                                       break;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 174, column 37 to 53");
                           }();
                           var x1 = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "::":
                                           switch (_._0._1._1.ctor)
                                             {case "::":
                                                switch (_._0._1._1._1.ctor)
                                                  {case "::":
                                                     switch (_._0._1._1._1._1.ctor)
                                                       {case "[]":
                                                          return _._0._0;}
                                                       break;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 174, column 37 to 53");
                           }();
                           var y = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "::":
                                           switch (_._0._1._1.ctor)
                                             {case "::":
                                                switch (_._0._1._1._1.ctor)
                                                  {case "::":
                                                     switch (_._0._1._1._1._1.ctor)
                                                       {case "[]":
                                                          return _._0._1._1._1._0;}
                                                       break;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 174, column 37 to 53");
                           }();
                           var y1 = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "::":
                                           switch (_._0._1._1.ctor)
                                             {case "::":
                                                switch (_._0._1._1._1.ctor)
                                                  {case "::":
                                                     switch (_._0._1._1._1._1.ctor)
                                                       {case "[]":
                                                          return _._0._1._0;}
                                                       break;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 174, column 37 to 53");
                           }();
                           var _ = A3(addIdPoints,
                           vs._0._0._0,
                           counts,
                           _L.fromArray([{ctor: "_Tuple2"
                                         ,_0: x1
                                         ,_1: y1}
                                        ,{ctor: "_Tuple2"
                                         ,_0: x
                                         ,_1: y}]));
                           var counts$ = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._1.ctor)
                                   {case "::":
                                      switch (_._1._1.ctor)
                                        {case "::":
                                           switch (_._1._1._1.ctor)
                                             {case "[]": return _._0;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 175, column 38 to 76");
                           }();
                           var pt1 = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._1.ctor)
                                   {case "::":
                                      switch (_._1._1.ctor)
                                        {case "::":
                                           switch (_._1._1._1.ctor)
                                             {case "[]": return _._1._0;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 175, column 38 to 76");
                           }();
                           var pt2 = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._1.ctor)
                                   {case "::":
                                      switch (_._1._1.ctor)
                                        {case "::":
                                           switch (_._1._1._1.ctor)
                                             {case "[]": return _._1._1._0;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 175, column 38 to 76");
                           }();
                           return A2(_op["+++"],
                           A3(CmdSQ,vs._0._0._0,pt1,pt2),
                           A2(valsToPath2_,counts$,vs$$));
                        }() : A2(matchCmd,
                        vs._0._0._0,
                        "A") ? function () {
                           var _ = A2(projConsts,
                           7,
                           vs._1);
                           var axis = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "::":
                                           switch (_._0._1._1.ctor)
                                             {case "::":
                                                switch (_._0._1._1._1.ctor)
                                                  {case "::":
                                                     switch (_._0._1._1._1._1.ctor)
                                                       {case "::":
                                                          switch (_._0._1._1._1._1._1.ctor)
                                                            {case "::":
                                                               switch (_._0._1._1._1._1._1._1.ctor)
                                                                 {case "::":
                                                                    switch (_._0._1._1._1._1._1._1._1.ctor)
                                                                      {case "[]":
                                                                         return _._0._1._1._0;}
                                                                      break;}
                                                                 break;}
                                                            break;}
                                                       break;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 178, column 53 to 69");
                           }();
                           var flag = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "::":
                                           switch (_._0._1._1.ctor)
                                             {case "::":
                                                switch (_._0._1._1._1.ctor)
                                                  {case "::":
                                                     switch (_._0._1._1._1._1.ctor)
                                                       {case "::":
                                                          switch (_._0._1._1._1._1._1.ctor)
                                                            {case "::":
                                                               switch (_._0._1._1._1._1._1._1.ctor)
                                                                 {case "::":
                                                                    switch (_._0._1._1._1._1._1._1._1.ctor)
                                                                      {case "[]":
                                                                         return _._0._1._1._1._0;}
                                                                      break;}
                                                                 break;}
                                                            break;}
                                                       break;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 178, column 53 to 69");
                           }();
                           var rx = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "::":
                                           switch (_._0._1._1.ctor)
                                             {case "::":
                                                switch (_._0._1._1._1.ctor)
                                                  {case "::":
                                                     switch (_._0._1._1._1._1.ctor)
                                                       {case "::":
                                                          switch (_._0._1._1._1._1._1.ctor)
                                                            {case "::":
                                                               switch (_._0._1._1._1._1._1._1.ctor)
                                                                 {case "::":
                                                                    switch (_._0._1._1._1._1._1._1._1.ctor)
                                                                      {case "[]":
                                                                         return _._0._0;}
                                                                      break;}
                                                                 break;}
                                                            break;}
                                                       break;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 178, column 53 to 69");
                           }();
                           var ry = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "::":
                                           switch (_._0._1._1.ctor)
                                             {case "::":
                                                switch (_._0._1._1._1.ctor)
                                                  {case "::":
                                                     switch (_._0._1._1._1._1.ctor)
                                                       {case "::":
                                                          switch (_._0._1._1._1._1._1.ctor)
                                                            {case "::":
                                                               switch (_._0._1._1._1._1._1._1.ctor)
                                                                 {case "::":
                                                                    switch (_._0._1._1._1._1._1._1._1.ctor)
                                                                      {case "[]":
                                                                         return _._0._1._0;}
                                                                      break;}
                                                                 break;}
                                                            break;}
                                                       break;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 178, column 53 to 69");
                           }();
                           var sweep = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "::":
                                           switch (_._0._1._1.ctor)
                                             {case "::":
                                                switch (_._0._1._1._1.ctor)
                                                  {case "::":
                                                     switch (_._0._1._1._1._1.ctor)
                                                       {case "::":
                                                          switch (_._0._1._1._1._1._1.ctor)
                                                            {case "::":
                                                               switch (_._0._1._1._1._1._1._1.ctor)
                                                                 {case "::":
                                                                    switch (_._0._1._1._1._1._1._1._1.ctor)
                                                                      {case "[]":
                                                                         return _._0._1._1._1._1._0;}
                                                                      break;}
                                                                 break;}
                                                            break;}
                                                       break;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 178, column 53 to 69");
                           }();
                           var vs$$ = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "::":
                                           switch (_._0._1._1.ctor)
                                             {case "::":
                                                switch (_._0._1._1._1.ctor)
                                                  {case "::":
                                                     switch (_._0._1._1._1._1.ctor)
                                                       {case "::":
                                                          switch (_._0._1._1._1._1._1.ctor)
                                                            {case "::":
                                                               switch (_._0._1._1._1._1._1._1.ctor)
                                                                 {case "::":
                                                                    switch (_._0._1._1._1._1._1._1._1.ctor)
                                                                      {case "[]":
                                                                         return _._1;}
                                                                      break;}
                                                                 break;}
                                                            break;}
                                                       break;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 178, column 53 to 69");
                           }();
                           var x = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "::":
                                           switch (_._0._1._1.ctor)
                                             {case "::":
                                                switch (_._0._1._1._1.ctor)
                                                  {case "::":
                                                     switch (_._0._1._1._1._1.ctor)
                                                       {case "::":
                                                          switch (_._0._1._1._1._1._1.ctor)
                                                            {case "::":
                                                               switch (_._0._1._1._1._1._1._1.ctor)
                                                                 {case "::":
                                                                    switch (_._0._1._1._1._1._1._1._1.ctor)
                                                                      {case "[]":
                                                                         return _._0._1._1._1._1._1._0;}
                                                                      break;}
                                                                 break;}
                                                            break;}
                                                       break;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 178, column 53 to 69");
                           }();
                           var y = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._0.ctor)
                                   {case "::":
                                      switch (_._0._1.ctor)
                                        {case "::":
                                           switch (_._0._1._1.ctor)
                                             {case "::":
                                                switch (_._0._1._1._1.ctor)
                                                  {case "::":
                                                     switch (_._0._1._1._1._1.ctor)
                                                       {case "::":
                                                          switch (_._0._1._1._1._1._1.ctor)
                                                            {case "::":
                                                               switch (_._0._1._1._1._1._1._1.ctor)
                                                                 {case "::":
                                                                    switch (_._0._1._1._1._1._1._1._1.ctor)
                                                                      {case "[]":
                                                                         return _._0._1._1._1._1._1._1._0;}
                                                                      break;}
                                                                 break;}
                                                            break;}
                                                       break;}
                                                  break;}
                                             break;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 178, column 53 to 69");
                           }();
                           var _ = A3(addIdPoints,
                           vs._0._0._0,
                           counts,
                           _L.fromArray([{ctor: "_Tuple2"
                                         ,_0: x
                                         ,_1: y}]));
                           var counts$ = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._1.ctor)
                                   {case "::":
                                      switch (_._1._1.ctor)
                                        {case "[]": return _._0;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 179, column 33 to 63");
                           }();
                           var pt = function () {
                              switch (_.ctor)
                              {case "_Tuple2":
                                 switch (_._1.ctor)
                                   {case "::":
                                      switch (_._1._1.ctor)
                                        {case "[]": return _._1._0;}
                                        break;}
                                   break;}
                              _U.badCase($moduleName,
                              "on line 179, column 33 to 63");
                           }();
                           return A2(_op["+++"],
                           A7(CmdA,
                           vs._0._0._0,
                           rx,
                           ry,
                           axis,
                           flag,
                           sweep,
                           pt),
                           A2(valsToPath2_,counts$,vs$$));
                        }() : _U.badIf($moduleName,
                        "between lines 161 and 180");}
                   break;}
              break;
            case "[]":
            return {ctor: "_Tuple2"
                   ,_0: _L.fromArray([])
                   ,_1: counts};}
         _U.badCase($moduleName,
         "between lines 158 and 180");
      }();
   });
   var valsToPath2 = valsToPath2_({_: {}
                                  ,numPoints: 0});
   var APath2 = function (a) {
      return {ctor: "APath2"
             ,_0: a};
   };
   var ARgba = function (a) {
      return {ctor: "ARgba",_0: a};
   };
   var APoints = function (a) {
      return {ctor: "APoints"
             ,_0: a};
   };
   var AString = function (a) {
      return {ctor: "AString"
             ,_0: a};
   };
   var addAttrs = F2(function (kind,
   attrs) {
      return _U.eq(kind,
      "svg") ? A2($List._op["::"],
      {ctor: "_Tuple2"
      ,_0: "xmlns"
      ,_1: AString("http://www.w3.org/2000/svg")},
      attrs) : attrs;
   });
   var printNode = F3(function (k,
   slate,
   i) {
      return function () {
         var _v622 = A2($Utils.justGet,
         i,
         slate);
         switch (_v622.ctor)
         {case "SvgNode":
            switch (_v622._2.ctor)
              {case "[]": return function () {
                      var l1$ = A2(addAttrs,
                      _v622._0,
                      _v622._1);
                      return A2($Basics._op["++"],
                      A3($Utils.delimit,
                      "<",
                      ">",
                      A2($Basics._op["++"],
                      _v622._0,
                      printAttrs(l1$))),
                      A3($Utils.delimit,
                      "</",
                      ">",
                      _v622._0));
                   }();}
              return function () {
                 var l1$ = A2(addAttrs,
                 _v622._0,
                 _v622._1);
                 return A2($Basics._op["++"],
                 A3($Utils.delimit,
                 "<",
                 ">",
                 A2($Basics._op["++"],
                 _v622._0,
                 printAttrs(l1$))),
                 A2($Basics._op["++"],
                 "\n",
                 A2($Basics._op["++"],
                 A3(printNodes,
                 k + 1,
                 slate,
                 _v622._2),
                 A2($Basics._op["++"],
                 "\n",
                 A2($Basics._op["++"],
                 $Lang.tab(k),
                 A3($Utils.delimit,
                 "</",
                 ">",
                 _v622._0))))));
              }();
            case "TextNode":
            return _v622._0;}
         _U.badCase($moduleName,
         "between lines 365 and 375");
      }();
   });
   var printNodes = F2(function (k,
   slate) {
      return function ($) {
         return $Utils.lines($List.map(function ($) {
            return F2(function (x,y) {
               return A2($Basics._op["++"],
               x,
               y);
            })($Lang.tab(k))(A2(printNode,
            k,
            slate)($));
         })($));
      };
   });
   var printSvg = function (_v627) {
      return function () {
         switch (_v627.ctor)
         {case "_Tuple2":
            return A3(printNode,
              0,
              _v627._1,
              _v627._0);}
         _U.badCase($moduleName,
         "on line 362, column 27 to 50");
      }();
   };
   var ANum = function (a) {
      return {ctor: "ANum",_0: a};
   };
   var valToAttr = function (_v631) {
      return function () {
         switch (_v631.ctor)
         {case "VList":
            switch (_v631._0.ctor)
              {case "::":
                 switch (_v631._0._0.ctor)
                   {case "VBase":
                      switch (_v631._0._0._0.ctor)
                        {case "String":
                           switch (_v631._0._1.ctor)
                             {case "::":
                                switch (_v631._0._1._1.ctor)
                                  {case "[]": return function () {
                                          var _v640 = {ctor: "_Tuple2"
                                                      ,_0: _v631._0._0._0._0
                                                      ,_1: _v631._0._1._0};
                                          switch (_v640.ctor)
                                          {case "_Tuple2":
                                             switch (_v640._1.ctor)
                                               {case "VBase":
                                                  switch (_v640._1._0.ctor)
                                                    {case "String":
                                                       return {ctor: "_Tuple2"
                                                              ,_0: _v631._0._0._0._0
                                                              ,_1: AString(_v640._1._0._0)};}
                                                    break;
                                                  case "VConst":
                                                  return {ctor: "_Tuple2"
                                                         ,_0: _v631._0._0._0._0
                                                         ,_1: ANum(_v640._1._0)};}
                                               switch (_v640._0)
                                               {case "d":
                                                  switch (_v640._1.ctor)
                                                    {case "VList":
                                                       return {ctor: "_Tuple2"
                                                              ,_0: _v631._0._0._0._0
                                                              ,_1: APath2(valsToPath2(_v640._1._0))};}
                                                    break;
                                                  case "fill":
                                                  switch (_v640._1.ctor)
                                                    {case "VList":
                                                       return {ctor: "_Tuple2"
                                                              ,_0: _v631._0._0._0._0
                                                              ,_1: ARgba(valToRgba(_v640._1._0))};}
                                                    break;
                                                  case "points":
                                                  switch (_v640._1.ctor)
                                                    {case "VList":
                                                       return {ctor: "_Tuple2"
                                                              ,_0: _v631._0._0._0._0
                                                              ,_1: APoints(A2($List.map,
                                                              valToPoint,
                                                              _v640._1._0))};}
                                                    break;
                                                  case "stroke":
                                                  switch (_v640._1.ctor)
                                                    {case "VList":
                                                       return {ctor: "_Tuple2"
                                                              ,_0: _v631._0._0._0._0
                                                              ,_1: ARgba(valToRgba(_v640._1._0))};}
                                                    break;}
                                               break;}
                                          _U.badCase($moduleName,
                                          "between lines 96 and 103");
                                       }();}
                                  break;}
                             break;}
                        break;}
                   break;}
              break;}
         _U.badCase($moduleName,
         "between lines 96 and 103");
      }();
   };
   var valToIndexedTree_ = F2(function (v,
   _v650) {
      return function () {
         switch (_v650.ctor)
         {case "_Tuple2":
            return function () {
                 switch (v.ctor)
                 {case "VList":
                    switch (v._0.ctor)
                      {case "::":
                         switch (v._0._0.ctor)
                           {case "VBase":
                              switch (v._0._0._0.ctor)
                                {case "String":
                                   switch (v._0._0._0._0)
                                     {case "TEXT":
                                        switch (v._0._1.ctor)
                                          {case "::":
                                             switch (v._0._1._0.ctor)
                                               {case "VBase":
                                                  switch (v._0._1._0._0.ctor)
                                                    {case "String":
                                                       switch (v._0._1._1.ctor)
                                                         {case "[]":
                                                            return {ctor: "_Tuple2"
                                                                   ,_0: 1 + _v650._0
                                                                   ,_1: A3($Dict.insert,
                                                                   _v650._0,
                                                                   TextNode(v._0._1._0._0._0),
                                                                   _v650._1)};}
                                                         break;}
                                                    break;}
                                               break;}
                                          break;}
                                     switch (v._0._1.ctor)
                                     {case "::":
                                        switch (v._0._1._0.ctor)
                                          {case "VList":
                                             switch (v._0._1._1.ctor)
                                               {case "::":
                                                  switch (v._0._1._1._0.ctor)
                                                    {case "VList":
                                                       switch (v._0._1._1._1.ctor)
                                                         {case "[]":
                                                            return function () {
                                                                 var processChild = F2(function (vi,
                                                                 _v670) {
                                                                    return function () {
                                                                       switch (_v670.ctor)
                                                                       {case "_Tuple3":
                                                                          return function () {
                                                                               var $ = A2(valToIndexedTree_,
                                                                               vi,
                                                                               {ctor: "_Tuple2"
                                                                               ,_0: _v670._0
                                                                               ,_1: _v670._1}),
                                                                               a_nextId$ = $._0,
                                                                               a_graph$ = $._1;
                                                                               var a_children$ = A2($List._op["::"],
                                                                               a_nextId$ - 1,
                                                                               _v670._2);
                                                                               return {ctor: "_Tuple3"
                                                                                      ,_0: a_nextId$
                                                                                      ,_1: a_graph$
                                                                                      ,_2: a_children$};
                                                                            }();}
                                                                       _U.badCase($moduleName,
                                                                       "between lines 337 and 339");
                                                                    }();
                                                                 });
                                                                 var $ = A3($List.foldl,
                                                                 processChild,
                                                                 {ctor: "_Tuple3"
                                                                 ,_0: _v650._0
                                                                 ,_1: _v650._1
                                                                 ,_2: _L.fromArray([])},
                                                                 v._0._1._1._0._0),
                                                                 nextId$ = $._0,
                                                                 d$ = $._1,
                                                                 children = $._2;
                                                                 var node = A3(SvgNode,
                                                                 v._0._0._0._0,
                                                                 A2($List.map,
                                                                 valToAttr,
                                                                 v._0._1._0._0),
                                                                 $List.reverse(children));
                                                                 return {ctor: "_Tuple2"
                                                                        ,_0: 1 + nextId$
                                                                        ,_1: A3($Dict.insert,
                                                                        nextId$,
                                                                        node,
                                                                        d$)};
                                                              }();}
                                                         break;}
                                                    break;}
                                               break;}
                                          break;}
                                     break;}
                                break;}
                           break;}
                      break;}
                 return $Debug.crash(A2($Basics._op["++"],
                 "LangSvg.valToIndexTree_: ",
                 $Lang.strVal(v)));
              }();}
         _U.badCase($moduleName,
         "between lines 330 and 344");
      }();
   });
   var valToIndexedTree = function (v) {
      return function () {
         var $ = A2(valToIndexedTree_,
         v,
         {ctor: "_Tuple2"
         ,_0: 1
         ,_1: $Dict.empty}),
         nextId = $._0,
         tree = $._1;
         var rootId = nextId - 1;
         return {ctor: "_Tuple2"
                ,_0: rootId
                ,_1: tree};
      }();
   };
   var printIndexedTree = function ($) {
      return strEdges($Basics.snd(valToIndexedTree($)));
   };
   var numAttrToVal = F2(function (a,
   i) {
      return $Lang.VList(_L.fromArray([$Lang.VBase($Lang.String(a))
                                      ,$Lang.VConst({ctor: "_Tuple2"
                                                    ,_0: $Basics.toFloat(i)
                                                    ,_1: $Lang.dummyTrace})]));
   });
   var compileAttr = F2(function (k,
   v) {
      return A2(attr,k,strAVal(v));
   });
   var compileAttrs = $List.map($Basics.uncurry(compileAttr));
   var compileAttrVals = $List.map(function ($) {
      return $Basics.uncurry(compileAttr)(valToAttr($));
   });
   var compileValToNode = function (v) {
      return function () {
         switch (v.ctor)
         {case "VList":
            switch (v._0.ctor)
              {case "::":
                 switch (v._0._0.ctor)
                   {case "VBase":
                      switch (v._0._0._0.ctor)
                        {case "String":
                           switch (v._0._0._0._0)
                             {case "TEXT":
                                switch (v._0._1.ctor)
                                  {case "::":
                                     switch (v._0._1._0.ctor)
                                       {case "VBase":
                                          switch (v._0._1._0._0.ctor)
                                            {case "String":
                                               switch (v._0._1._1.ctor)
                                                 {case "[]":
                                                    return $VirtualDom.text(v._0._1._0._0._0);}
                                                 break;}
                                            break;}
                                       break;}
                                  break;}
                             switch (v._0._1.ctor)
                             {case "::":
                                switch (v._0._1._0.ctor)
                                  {case "VList":
                                     switch (v._0._1._1.ctor)
                                       {case "::":
                                          switch (v._0._1._1._0.ctor)
                                            {case "VList":
                                               switch (v._0._1._1._1.ctor)
                                                 {case "[]": return A3(svg,
                                                      v._0._0._0._0,
                                                      compileAttrVals(v._0._1._0._0),
                                                      compileNodeVals(v._0._1._1._0._0));}
                                                 break;}
                                            break;}
                                       break;}
                                  break;}
                             break;}
                        break;}
                   break;}
              break;}
         _U.badCase($moduleName,
         "between lines 39 and 42");
      }();
   };
   var compileNodeVals = $List.map(compileValToNode);
   var valToHtml = F3(function (w,
   h,
   _v691) {
      return function () {
         switch (_v691.ctor)
         {case "VList":
            switch (_v691._0.ctor)
              {case "::":
                 switch (_v691._0._0.ctor)
                   {case "VBase":
                      switch (_v691._0._0._0.ctor)
                        {case "String":
                           switch (_v691._0._0._0._0)
                             {case "svg":
                                switch (_v691._0._1.ctor)
                                  {case "::":
                                     switch (_v691._0._1._0.ctor)
                                       {case "VList":
                                          switch (_v691._0._1._1.ctor)
                                            {case "::":
                                               switch (_v691._0._1._1._0.ctor)
                                                 {case "VList":
                                                    switch (_v691._0._1._1._1.ctor)
                                                      {case "[]":
                                                         return function () {
                                                              var wh = _L.fromArray([A2(numAttrToVal,
                                                                                    "width",
                                                                                    w)
                                                                                    ,A2(numAttrToVal,
                                                                                    "height",
                                                                                    h)]);
                                                              var v$ = $Lang.VList(_L.fromArray([$Lang.VBase($Lang.String("svg"))
                                                                                                ,$Lang.VList(A2($Basics._op["++"],
                                                                                                wh,
                                                                                                _v691._0._1._0._0))
                                                                                                ,$Lang.VList(_v691._0._1._1._0._0)]));
                                                              return compileValToNode(v$);
                                                           }();}
                                                      break;}
                                                 break;}
                                            break;}
                                       break;}
                                  break;}
                             break;}
                        break;}
                   break;}
              break;}
         _U.badCase($moduleName,
         "between lines 33 and 35");
      }();
   });
   _elm.LangSvg.values = {_op: _op
                         ,valToHtml: valToHtml
                         ,compileValToNode: compileValToNode
                         ,compileNodeVals: compileNodeVals
                         ,compileAttrVals: compileAttrVals
                         ,compileAttrs: compileAttrs
                         ,compileAttr: compileAttr
                         ,numAttrToVal: numAttrToVal
                         ,ANum: ANum
                         ,AString: AString
                         ,APoints: APoints
                         ,ARgba: ARgba
                         ,APath2: APath2
                         ,CmdZ: CmdZ
                         ,CmdMLT: CmdMLT
                         ,CmdHV: CmdHV
                         ,CmdC: CmdC
                         ,CmdSQ: CmdSQ
                         ,CmdA: CmdA
                         ,PathCounts: PathCounts
                         ,toNum: toNum
                         ,toNumTr: toNumTr
                         ,toPoints: toPoints
                         ,toPath: toPath
                         ,valToAttr: valToAttr
                         ,valToPoint: valToPoint
                         ,pointToVal: pointToVal
                         ,valToRgba: valToRgba
                         ,rgbaToVal: rgbaToVal
                         ,strPoint: strPoint
                         ,strRgba: strRgba
                         ,strAVal: strAVal
                         ,valOfAVal: valOfAVal
                         ,valsOfPathCmd: valsOfPathCmd
                         ,valOfAttr: valOfAttr
                         ,valsToPath2: valsToPath2
                         ,valsToPath2_: valsToPath2_
                         ,addIdPoints: addIdPoints
                         ,strAPath2: strAPath2
                         ,projConsts: projConsts
                         ,matchCmd: matchCmd
                         ,funcsSvg: funcsSvg
                         ,funcsAttr: funcsAttr
                         ,find: find
                         ,attr: attr
                         ,svg: svg
                         ,TextNode: TextNode
                         ,SvgNode: SvgNode
                         ,children: children
                         ,valToIndexedTree: valToIndexedTree
                         ,valToIndexedTree_: valToIndexedTree_
                         ,printIndexedTree: printIndexedTree
                         ,strEdges: strEdges
                         ,printSvg: printSvg
                         ,printNode: printNode
                         ,printNodes: printNodes
                         ,printAttrs: printAttrs
                         ,printAttr: printAttr
                         ,addAttrs: addAttrs
                         ,Z: Z
                         ,ZPoint: ZPoint
                         ,ZEdge: ZEdge
                         ,addi: addi
                         ,realZoneOf: realZoneOf
                         ,toZPoint: toZPoint
                         ,toZEdge: toZEdge
                         ,zones: zones};
   return _elm.LangSvg.values;
};
Elm.Lazy = Elm.Lazy || {};
Elm.Lazy.make = function (_elm) {
   "use strict";
   _elm.Lazy = _elm.Lazy || {};
   if (_elm.Lazy.values)
   return _elm.Lazy.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Lazy",
   $Native$Lazy = Elm.Native.Lazy.make(_elm);
   var force = function (_v0) {
      return function () {
         switch (_v0.ctor)
         {case "Lazy":
            return _v0._0({ctor: "_Tuple0"});}
         _U.badCase($moduleName,
         "on line 58, column 3 to 10");
      }();
   };
   var Lazy = function (a) {
      return {ctor: "Lazy",_0: a};
   };
   var lazy = function (thunk) {
      return Lazy($Native$Lazy.memoize(thunk));
   };
   var map = F2(function (f,a) {
      return lazy(function (_v3) {
         return function () {
            switch (_v3.ctor)
            {case "_Tuple0":
               return f(force(a));}
            _U.badCase($moduleName,
            "on line 72, column 16 to 26");
         }();
      });
   });
   var map2 = F3(function (f,a,b) {
      return lazy(function (_v5) {
         return function () {
            switch (_v5.ctor)
            {case "_Tuple0": return A2(f,
                 force(a),
                 force(b));}
            _U.badCase($moduleName,
            "on line 88, column 16 to 36");
         }();
      });
   });
   var map3 = F4(function (f,
   a,
   b,
   c) {
      return lazy(function (_v7) {
         return function () {
            switch (_v7.ctor)
            {case "_Tuple0": return A3(f,
                 force(a),
                 force(b),
                 force(c));}
            _U.badCase($moduleName,
            "on line 93, column 16 to 46");
         }();
      });
   });
   var map4 = F5(function (f,
   a,
   b,
   c,
   d) {
      return lazy(function (_v9) {
         return function () {
            switch (_v9.ctor)
            {case "_Tuple0": return A4(f,
                 force(a),
                 force(b),
                 force(c),
                 force(d));}
            _U.badCase($moduleName,
            "on line 98, column 16 to 56");
         }();
      });
   });
   var map5 = F6(function (f,
   a,
   b,
   c,
   d,
   e) {
      return lazy(function (_v11) {
         return function () {
            switch (_v11.ctor)
            {case "_Tuple0": return A5(f,
                 force(a),
                 force(b),
                 force(c),
                 force(d),
                 force(e));}
            _U.badCase($moduleName,
            "on line 103, column 16 to 66");
         }();
      });
   });
   var apply = F2(function (f,x) {
      return lazy(function (_v13) {
         return function () {
            switch (_v13.ctor)
            {case "_Tuple0":
               return A2(force,f,force(x));}
            _U.badCase($moduleName,
            "on line 116, column 17 to 34");
         }();
      });
   });
   var andThen = F2(function (a,
   callback) {
      return lazy(function (_v15) {
         return function () {
            switch (_v15.ctor)
            {case "_Tuple0":
               return force(callback(force(a)));}
            _U.badCase($moduleName,
            "on line 146, column 16 to 40");
         }();
      });
   });
   _elm.Lazy.values = {_op: _op
                      ,force: force
                      ,lazy: lazy
                      ,map: map
                      ,map2: map2
                      ,map3: map3
                      ,map4: map4
                      ,map5: map5
                      ,apply: apply
                      ,andThen: andThen};
   return _elm.Lazy.values;
};
Elm.List = Elm.List || {};
Elm.List.make = function (_elm) {
   "use strict";
   _elm.List = _elm.List || {};
   if (_elm.List.values)
   return _elm.List.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "List",
   $Basics = Elm.Basics.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Native$List = Elm.Native.List.make(_elm);
   var sortWith = $Native$List.sortWith;
   var sortBy = $Native$List.sortBy;
   var sort = function (xs) {
      return A2(sortBy,
      $Basics.identity,
      xs);
   };
   var repeat = $Native$List.repeat;
   var drop = $Native$List.drop;
   var take = $Native$List.take;
   var map5 = $Native$List.map5;
   var map4 = $Native$List.map4;
   var map3 = $Native$List.map3;
   var map2 = $Native$List.map2;
   var any = $Native$List.any;
   var all = F2(function (pred,
   xs) {
      return $Basics.not(A2(any,
      function ($) {
         return $Basics.not(pred($));
      },
      xs));
   });
   var foldr = $Native$List.foldr;
   var foldl = $Native$List.foldl;
   var length = function (xs) {
      return A3(foldl,
      F2(function (_v0,i) {
         return function () {
            return i + 1;
         }();
      }),
      0,
      xs);
   };
   var sum = function (numbers) {
      return A3(foldl,
      F2(function (x,y) {
         return x + y;
      }),
      0,
      numbers);
   };
   var product = function (numbers) {
      return A3(foldl,
      F2(function (x,y) {
         return x * y;
      }),
      1,
      numbers);
   };
   var maximum = function (list) {
      return function () {
         switch (list.ctor)
         {case "::":
            return $Maybe.Just(A3(foldl,
              $Basics.max,
              list._0,
              list._1));}
         return $Maybe.Nothing;
      }();
   };
   var minimum = function (list) {
      return function () {
         switch (list.ctor)
         {case "::":
            return $Maybe.Just(A3(foldl,
              $Basics.min,
              list._0,
              list._1));}
         return $Maybe.Nothing;
      }();
   };
   var indexedMap = F2(function (f,
   xs) {
      return A3(map2,
      f,
      _L.range(0,length(xs) - 1),
      xs);
   });
   var member = F2(function (x,
   xs) {
      return A2(any,
      function (a) {
         return _U.eq(a,x);
      },
      xs);
   });
   var isEmpty = function (xs) {
      return function () {
         switch (xs.ctor)
         {case "[]": return true;}
         return false;
      }();
   };
   var tail = function (list) {
      return function () {
         switch (list.ctor)
         {case "::":
            return $Maybe.Just(list._1);
            case "[]":
            return $Maybe.Nothing;}
         _U.badCase($moduleName,
         "between lines 87 and 95");
      }();
   };
   var head = function (list) {
      return function () {
         switch (list.ctor)
         {case "::":
            return $Maybe.Just(list._0);
            case "[]":
            return $Maybe.Nothing;}
         _U.badCase($moduleName,
         "between lines 75 and 84");
      }();
   };
   _op["::"] = $Native$List.cons;
   var map = F2(function (f,xs) {
      return A3(foldr,
      F2(function (x,acc) {
         return A2(_op["::"],
         f(x),
         acc);
      }),
      _L.fromArray([]),
      xs);
   });
   var filter = F2(function (pred,
   xs) {
      return function () {
         var conditionalCons = F2(function (x,
         xs$) {
            return pred(x) ? A2(_op["::"],
            x,
            xs$) : xs$;
         });
         return A3(foldr,
         conditionalCons,
         _L.fromArray([]),
         xs);
      }();
   });
   var maybeCons = F3(function (f,
   mx,
   xs) {
      return function () {
         var _v15 = f(mx);
         switch (_v15.ctor)
         {case "Just":
            return A2(_op["::"],_v15._0,xs);
            case "Nothing": return xs;}
         _U.badCase($moduleName,
         "between lines 179 and 186");
      }();
   });
   var filterMap = F2(function (f,
   xs) {
      return A3(foldr,
      maybeCons(f),
      _L.fromArray([]),
      xs);
   });
   var reverse = function (list) {
      return A3(foldl,
      F2(function (x,y) {
         return A2(_op["::"],x,y);
      }),
      _L.fromArray([]),
      list);
   };
   var scanl = F3(function (f,
   b,
   xs) {
      return function () {
         var scan1 = F2(function (x,
         accAcc) {
            return function () {
               switch (accAcc.ctor)
               {case "::": return A2(_op["::"],
                    A2(f,x,accAcc._0),
                    accAcc);
                  case "[]":
                  return _L.fromArray([]);}
               _U.badCase($moduleName,
               "between lines 148 and 151");
            }();
         });
         return reverse(A3(foldl,
         scan1,
         _L.fromArray([b]),
         xs));
      }();
   });
   var append = F2(function (xs,
   ys) {
      return function () {
         switch (ys.ctor)
         {case "[]": return xs;}
         return A3(foldr,
         F2(function (x,y) {
            return A2(_op["::"],x,y);
         }),
         ys,
         xs);
      }();
   });
   var concat = function (lists) {
      return A3(foldr,
      append,
      _L.fromArray([]),
      lists);
   };
   var concatMap = F2(function (f,
   list) {
      return concat(A2(map,
      f,
      list));
   });
   var partition = F2(function (pred,
   list) {
      return function () {
         var step = F2(function (x,
         _v21) {
            return function () {
               switch (_v21.ctor)
               {case "_Tuple2":
                  return pred(x) ? {ctor: "_Tuple2"
                                   ,_0: A2(_op["::"],x,_v21._0)
                                   ,_1: _v21._1} : {ctor: "_Tuple2"
                                                   ,_0: _v21._0
                                                   ,_1: A2(_op["::"],
                                                   x,
                                                   _v21._1)};}
               _U.badCase($moduleName,
               "between lines 301 and 303");
            }();
         });
         return A3(foldr,
         step,
         {ctor: "_Tuple2"
         ,_0: _L.fromArray([])
         ,_1: _L.fromArray([])},
         list);
      }();
   });
   var unzip = function (pairs) {
      return function () {
         var step = F2(function (_v25,
         _v26) {
            return function () {
               switch (_v26.ctor)
               {case "_Tuple2":
                  return function () {
                       switch (_v25.ctor)
                       {case "_Tuple2":
                          return {ctor: "_Tuple2"
                                 ,_0: A2(_op["::"],
                                 _v25._0,
                                 _v26._0)
                                 ,_1: A2(_op["::"],
                                 _v25._1,
                                 _v26._1)};}
                       _U.badCase($moduleName,
                       "on line 339, column 12 to 28");
                    }();}
               _U.badCase($moduleName,
               "on line 339, column 12 to 28");
            }();
         });
         return A3(foldr,
         step,
         {ctor: "_Tuple2"
         ,_0: _L.fromArray([])
         ,_1: _L.fromArray([])},
         pairs);
      }();
   };
   var intersperse = F2(function (sep,
   xs) {
      return function () {
         switch (xs.ctor)
         {case "::": return function () {
                 var step = F2(function (x,
                 rest) {
                    return A2(_op["::"],
                    sep,
                    A2(_op["::"],x,rest));
                 });
                 var spersed = A3(foldr,
                 step,
                 _L.fromArray([]),
                 xs._1);
                 return A2(_op["::"],
                 xs._0,
                 spersed);
              }();
            case "[]":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 350 and 361");
      }();
   });
   _elm.List.values = {_op: _op
                      ,isEmpty: isEmpty
                      ,length: length
                      ,reverse: reverse
                      ,member: member
                      ,head: head
                      ,tail: tail
                      ,filter: filter
                      ,take: take
                      ,drop: drop
                      ,repeat: repeat
                      ,append: append
                      ,concat: concat
                      ,intersperse: intersperse
                      ,partition: partition
                      ,unzip: unzip
                      ,map: map
                      ,map2: map2
                      ,map3: map3
                      ,map4: map4
                      ,map5: map5
                      ,filterMap: filterMap
                      ,concatMap: concatMap
                      ,indexedMap: indexedMap
                      ,foldr: foldr
                      ,foldl: foldl
                      ,sum: sum
                      ,product: product
                      ,maximum: maximum
                      ,minimum: minimum
                      ,all: all
                      ,any: any
                      ,scanl: scanl
                      ,sort: sort
                      ,sortBy: sortBy
                      ,sortWith: sortWith};
   return _elm.List.values;
};
Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $InterfaceController = Elm.InterfaceController.make(_elm),
   $InterfaceModel = Elm.InterfaceModel.make(_elm),
   $InterfaceView2 = Elm.InterfaceView2.make(_elm),
   $Mouse = Elm.Mouse.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Window = Elm.Window.make(_elm);
   var adjustCoords = F2(function (_v0,
   _v1) {
      return function () {
         switch (_v1.ctor)
         {case "_Tuple2":
            return function () {
                 switch (_v0.ctor)
                 {case "_Tuple2":
                    return {ctor: "_Tuple2"
                           ,_0: _v1._0 - (_v0._0 / 2 | 0)
                           ,_1: _v1._1};}
                 _U.badCase($moduleName,
                 "on line 30, column 32 to 49");
              }();}
         _U.badCase($moduleName,
         "on line 30, column 32 to 49");
      }();
   });
   var main = function () {
      var sigModel = A2($Signal.foldp,
      $InterfaceController.upstate,
      $InterfaceModel.sampleModel)($Signal.mergeMany(_L.fromArray([$InterfaceModel.events.signal
                                                                  ,$Signal.map($InterfaceModel.MousePos)(A2($Signal.map2,
                                                                  adjustCoords,
                                                                  $Window.dimensions)($Signal.map(function (_v12) {
                                                                     return function () {
                                                                        switch (_v12.ctor)
                                                                        {case "_Tuple2":
                                                                           return _v12._1;}
                                                                        _U.badCase($moduleName,
                                                                        "on line 22, column 40 to 41");
                                                                     }();
                                                                  })(A2($Signal.filter,
                                                                  function (_v8) {
                                                                     return function () {
                                                                        switch (_v8.ctor)
                                                                        {case "_Tuple2":
                                                                           return _v8._0;}
                                                                        _U.badCase($moduleName,
                                                                        "on line 21, column 43 to 44");
                                                                     }();
                                                                  },
                                                                  {ctor: "_Tuple2"
                                                                  ,_0: false
                                                                  ,_1: {ctor: "_Tuple2"
                                                                       ,_0: 0
                                                                       ,_1: 0}})(A3($Signal.map2,
                                                                  F2(function (v0,
                                                                  v1) {
                                                                     return {ctor: "_Tuple2"
                                                                            ,_0: v0
                                                                            ,_1: v1};
                                                                  }),
                                                                  $Mouse.isDown,
                                                                  $Mouse.position)))))])));
      return A3($Signal.map2,
      $InterfaceView2.view,
      $Window.dimensions,
      sigModel);
   }();
   _elm.Main.values = {_op: _op
                      ,main: main
                      ,adjustCoords: adjustCoords};
   return _elm.Main.values;
};
Elm.Maybe = Elm.Maybe || {};
Elm.Maybe.make = function (_elm) {
   "use strict";
   _elm.Maybe = _elm.Maybe || {};
   if (_elm.Maybe.values)
   return _elm.Maybe.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Maybe";
   var withDefault = F2(function ($default,
   maybe) {
      return function () {
         switch (maybe.ctor)
         {case "Just": return maybe._0;
            case "Nothing":
            return $default;}
         _U.badCase($moduleName,
         "between lines 45 and 56");
      }();
   });
   var Nothing = {ctor: "Nothing"};
   var oneOf = function (maybes) {
      return function () {
         switch (maybes.ctor)
         {case "::": return function () {
                 switch (maybes._0.ctor)
                 {case "Just": return maybes._0;
                    case "Nothing":
                    return oneOf(maybes._1);}
                 _U.badCase($moduleName,
                 "between lines 64 and 73");
              }();
            case "[]": return Nothing;}
         _U.badCase($moduleName,
         "between lines 59 and 73");
      }();
   };
   var andThen = F2(function (maybeValue,
   callback) {
      return function () {
         switch (maybeValue.ctor)
         {case "Just":
            return callback(maybeValue._0);
            case "Nothing": return Nothing;}
         _U.badCase($moduleName,
         "between lines 110 and 112");
      }();
   });
   var Just = function (a) {
      return {ctor: "Just",_0: a};
   };
   var map = F2(function (f,
   maybe) {
      return function () {
         switch (maybe.ctor)
         {case "Just":
            return Just(f(maybe._0));
            case "Nothing": return Nothing;}
         _U.badCase($moduleName,
         "between lines 76 and 107");
      }();
   });
   _elm.Maybe.values = {_op: _op
                       ,andThen: andThen
                       ,map: map
                       ,withDefault: withDefault
                       ,oneOf: oneOf
                       ,Just: Just
                       ,Nothing: Nothing};
   return _elm.Maybe.values;
};
Elm.MicroTests = Elm.MicroTests || {};
Elm.MicroTests.make = function (_elm) {
   "use strict";
   _elm.MicroTests = _elm.MicroTests || {};
   if (_elm.MicroTests.values)
   return _elm.MicroTests.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "MicroTests",
   $Basics = Elm.Basics.make(_elm),
   $Eval = Elm.Eval.make(_elm),
   $Lang = Elm.Lang.make(_elm),
   $LangParser = Elm.LangParser.make(_elm),
   $List = Elm.List.make(_elm),
   $Utils = Elm.Utils.make(_elm);
   var parseV = function ($) {
      return $Utils.fromOk_($LangParser.parseV($));
   };
   var parseE = function ($) {
      return $Utils.fromOk_($LangParser.parseE($));
   };
   var makeTest = F2(function (se,
   sv$) {
      return function () {
         var v$ = parseV(sv$);
         var e = parseE(se);
         var v = $Eval.run(e);
         return {_: {}
                ,e: e
                ,v: v
                ,vnew: v$};
      }();
   });
   var test0 = function (_v0) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let f (\\(x y) [(+ x 0) (+ x y)]) (f 3 5))",
              "[3 9]");}
         _U.badCase($moduleName,
         "between lines 65 and 67");
      }();
   };
   var test1 = function (_v2) {
      return function () {
         switch (_v2.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(if (< 1 2) (+ 2 4) (+ 3 3))",
              "10");}
         _U.badCase($moduleName,
         "between lines 70 and 72");
      }();
   };
   var test2 = function (_v4) {
      return function () {
         switch (_v4.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(letrec sum (\\n (if (< n 0) 0 (+ n (sum (- n 1))))) (sum 3))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 75 and 77");
      }();
   };
   var test3 = function (_v6) {
      return function () {
         switch (_v6.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(letrec fact (\\n (if (< n 1) 1 (* n (fact (- n 1))))) (fact 5))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 80 and 82");
      }();
   };
   var test4 = function (_v8) {
      return function () {
         switch (_v8.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(letrec foo (\\n (if (< n 1) [] [n (foo (- n 1))]))\n     (letrec bar (\\n (if (< n 1) [] [n | (bar (- n 1))]))\n       [(foo 5) (bar 5)]))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 85 and 89");
      }();
   };
   var test5 = function (_v10) {
      return function () {
         switch (_v10.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "[1 | [2 | [3]]]",
              "[1 2 3]");}
         _U.badCase($moduleName,
         "between lines 92 and 94");
      }();
   };
   var test6 = function (_v12) {
      return function () {
         switch (_v12.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let sum3 (\\[x y z] (+ x (+ y z))) (sum3 [1 2 3]))",
              "[1 2 3]");}
         _U.badCase($moduleName,
         "between lines 97 and 99");
      }();
   };
   var test7 = function (_v14) {
      return function () {
         switch (_v14.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let hd (\\[hd | tl] hd) (hd [1 2 3]))",
              "[1 2 3]");}
         _U.badCase($moduleName,
         "between lines 103 and 105");
      }();
   };
   var test8 = function (_v16) {
      return function () {
         switch (_v16.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let tl (\\[hd | tl] tl) (tl [1 2 3]))",
              "[1 2 3]");}
         _U.badCase($moduleName,
         "between lines 108 and 110");
      }();
   };
   var test9 = function (_v18) {
      return function () {
         switch (_v18.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x y z] [1 2 3] (+ x (+ y z)))",
              "[1 2 3]");}
         _U.badCase($moduleName,
         "between lines 113 and 115");
      }();
   };
   var test10 = function (_v20) {
      return function () {
         switch (_v20.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let isNil (\\xs (case xs ([] true) ([_|_] false)))\n       [(isNil []) (isNil [1])])",
              "[1 2 3]");}
         _U.badCase($moduleName,
         "between lines 118 and 121");
      }();
   };
   var test11 = function (_v22) {
      return function () {
         switch (_v22.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let plus1 (\\x (+ x 1))\n     (letrec map (\\f (\\xs (case xs ([] []) ([hd|tl] [(f hd)|(map f tl)]))))\n       (map plus1 [1 2 3])))",
              "[1 2 3]");}
         _U.badCase($moduleName,
         "between lines 124 and 128");
      }();
   };
   var test12 = function (_v24) {
      return function () {
         switch (_v24.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let plus1 (\\x (+ x 1))\n     (letrec map (\\(f xs) (case xs ([] []) ([hd|tl] [(f hd)|(map f tl)])))\n       (map plus1 [1 2 3])))",
              "[1 2 3]");}
         _U.badCase($moduleName,
         "between lines 131 and 135");
      }();
   };
   var test13 = function (_v26) {
      return function () {
         switch (_v26.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(letrec mult (\\(m n) (if (< m 1) 0 (+ n (mult (- m 1) n))))\n       [(mult 0 10) (mult 2 4) (mult 10 9)])",
              "[1 2 3]");}
         _U.badCase($moduleName,
         "between lines 138 and 141");
      }();
   };
   var test14 = function (_v28) {
      return function () {
         switch (_v28.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(letrec map (\\(f xs) (case xs ([] []) ([hd|tl] [(f hd)|(map f tl)])))\n     (letrec mult (\\(m n) (if (< m 1) 0 (+ n (mult (- m 1) n))))\n     (let [x0 y0 sep] [10 8 30]\n       (map (\\i [(+ x0 (mult i sep)) y0]) [0 1 2]))))",
              "[[10 8] [40 8] [100 8]]");}
         _U.badCase($moduleName,
         "between lines 144 and 149");
      }();
   };
   var test19 = function (_v30) {
      return function () {
         switch (_v30.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x0 y0 sep] [10 28 30]\n       (svg (map (\\i (rect_ (+ x0 (mult i sep)) y0 20 30)) [0 1 2])))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 180 and 183");
      }();
   };
   var test21 = function (_v32) {
      return function () {
         switch (_v32.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(svg [(polygon_ [[10 10] [200 10] [100 50]])])",
              "[]");}
         _U.badCase($moduleName,
         "between lines 192 and 194");
      }();
   };
   var test22 = function (_v34) {
      return function () {
         switch (_v34.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let foo (\\(color pts) (polygon color \'black\' 0 pts))\n     [ \'svg\' [[\'x\' \'0\'] [\'y\' \'0\'] [\'viewBox\' \'0 0 323.141 322.95\']]\n       [\n       (foo \'#F0AD00\' [[161 152] [231 82] [91 82]])\n       (foo \'#7FD13B\' [[8 0] [79 70] [232 70] [161 0]])\n       (addAttr\n          (rect \'#7FD13B\' 192 107 107 108)\n          [\'transform\' \'matrix(0.7071 0.7071 -0.7071 0.7071 186.4727 -127.2386)\'])\n       (foo \'#60B5CC\' [[323 143] [323 0] [179 0]])\n       (foo \'#5A6378\' [[152 161] [0 8] [0 314]])\n       (foo \'#F0AD00\' [[255 246] [323 314] [323 178]])\n       (foo \'#60B5CC\' [[161 170] [8 323] [314 323]])\n       ]\n     ])",
              "[]");}
         _U.badCase($moduleName,
         "between lines 203 and 218");
      }();
   };
   var test26 = function (_v36) {
      return function () {
         switch (_v36.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x0 y0 sep] [10 28 30] (svg\n       (map (\\[i j] (square_ (+ x0 (mult i sep)) (+ y0 (mult j sep)) 20))\n            (cartProd [0 1 2] [0 1]))))",
              "[ \'svg\' []\n     [[\'rect\' [[\'x\' 10] [\'y\' 28] [\'width\' 20] [\'height\' 20] [\'fill\' \'#999999\']] []]\n      [\'rect\' [[\'x\' 10] [\'y\' 58] [\'width\' 20] [\'height\' 20] [\'fill\' \'#999999\']] []]\n      [\'rect\' [[\'x\' 40] [\'y\' 28] [\'width\' 20] [\'height\' 20] [\'fill\' \'#999999\']] []]\n      [\'rect\' [[\'x\' 40] [\'y\' 99] [\'width\' 20] [\'height\' 20] [\'fill\' \'#999999\']] []]\n      [\'rect\' [[\'x\' 70] [\'y\' 28] [\'width\' 20] [\'height\' 20] [\'fill\' \'#999999\']] []]\n      [\'rect\' [[\'x\' 70] [\'y\' 58] [\'width\' 20] [\'height\' 20] [\'fill\' \'#999999\']] []]]]");}
         _U.badCase($moduleName,
         "between lines 246 and 256");
      }();
   };
   var test27 = function (_v38) {
      return function () {
         switch (_v38.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x0 y0 xsep ysep] [10 28 30 30] (svg\n       (map (\\[i j] (square_ (+ x0 (mult i xsep)) (+ y0 (mult j ysep)) 20))\n            (cartProd [0 1 2] [0 1]))))",
              "[ \'svg\' []\n     [[\'rect\' [[\'x\' 10] [\'y\' 28] [\'width\' 20] [\'height\' 20] [\'fill\' \'#999999\']] []]\n      [\'rect\' [[\'x\' 10] [\'y\' 58] [\'width\' 20] [\'height\' 20] [\'fill\' \'#999999\']] []]\n      [\'rect\' [[\'x\' 40] [\'y\' 28] [\'width\' 20] [\'height\' 20] [\'fill\' \'#999999\']] []]\n      [\'rect\' [[\'x\' 60] [\'y\' 78] [\'width\' 20] [\'height\' 20] [\'fill\' \'#999999\']] []]\n      [\'rect\' [[\'x\' 70] [\'y\' 28] [\'width\' 20] [\'height\' 20] [\'fill\' \'#999999\']] []]\n      [\'rect\' [[\'x\' 70] [\'y\' 58] [\'width\' 20] [\'height\' 20] [\'fill\' \'#999999\']] []]]]");}
         _U.badCase($moduleName,
         "between lines 260 and 270");
      }();
   };
   var test28 = function (_v40) {
      return function () {
         switch (_v40.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x0 y0 w r dx dy] [30 30 7 20 32 20]\n     (let dxHalf (div dx 2)\n     (let row1\n       (map (\\[i c] (ring c w (+ x0 (mult i dx)) y0 r))\n            (zip [0 1 2] [\'blue\' \'black\' \'red\']))\n     (let row2\n       (map (\\[i c] (ring c w (+ (+ x0 dxHalf) (mult i dx)) (+ y0 dy) r))\n            (zip [0 1] [\'yellow\' \'green\']))\n       (svg (append row1 row2))))))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 274 and 284");
      }();
   };
   var test31 = function (_v42) {
      return function () {
         switch (_v42.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x0 y0 w h delta] [50 50 200 200 10] (svg\n     [ (rect \'white\' x0 y0 w h)\n       (polygon \'black\' \'DUMMY\' 0\n         [[(+ x0 delta) y0]\n          [(+ x0 w) y0]\n          [(+ x0 w) (minus (+ y0 h) delta)]])\n       (polygon \'black\' \'DUMMY\' 0\n         [[x0 (+ y0 delta)]\n          [x0 (minus (+ y0 h) delta)]\n          [(minus (+ x0 (div w 2)) delta) (+ y0 (div h 2))]])\n       (polygon \'black\' \'DUMMY\' 0\n         [[(+ x0 delta) (+ y0 h)]\n          [(minus (+ x0 w) delta) (+ y0 h)]\n          [(+ x0 (div w 2)) (+ (+ y0 (div h 2)) delta)]])\n     ]))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 303 and 319");
      }();
   };
   var test32 = function (_v44) {
      return function () {
         switch (_v44.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x0 y0 w h delta] [50 50 200 200 10] (svg\n     [ (rect \'white\' x0 y0 w h)\n       (polyline \'none\' \'black\' 1\n         [[(+ x0 delta) y0]\n          [(+ x0 w) y0]\n          [(+ x0 w) (minus (+ y0 h) delta)]])\n       (polyline \'none\' \'black\' 1\n         [[x0 (+ y0 delta)]\n          [x0 (minus (+ y0 h) delta)]\n          [(minus (+ x0 (div w 2)) delta) (+ y0 (div h 2))]])\n       (polyline \'none\' \'black\' 1\n         [[(+ x0 delta) (+ y0 h)]\n          [(minus (+ x0 w) delta) (+ y0 h)]\n          [(+ x0 (div w 2)) (+ (+ y0 (div h 2)) delta)]])\n     ]))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 322 and 338");
      }();
   };
   var test33 = function (_v46) {
      return function () {
         switch (_v46.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(svg\n     [ (path_ [\'M\' 10 10 \'H\' 90 \'V\' 90 \'H\' 10 \'L\' 10 10 \'Z\'])\n       (path_ [\'M\' 20 20 \'L\' 60 20 \'L\' 60 80 \'Z\'])\n       (path_ [\'M\' 150 0 \'L\' 75 200 \'L\' 225 200 \'Z\'])\n     ])",
              "[]");}
         _U.badCase($moduleName,
         "between lines 341 and 347");
      }();
   };
   var test34 = function (_v48) {
      return function () {
         switch (_v48.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(svg\n     [ (path_ [\'M\' 10 10   \'C\' 20 20 40 20 50 10])\n       (path_ [\'M\' 70 10   \'C\' 70 20 120 20 120 10])\n       (path_ [\'M\' 130 10  \'C\' 120 20 180 20 170 10])\n       (path_ [\'M\' 10 60   \'C\' 20 80 40 80 50 60])\n       (path_ [\'M\' 70 60   \'C\' 70 80 110 80 110 60])\n       (path_ [\'M\' 130 60  \'C\' 120 80 180 80 170 60])\n       (path_ [\'M\' 10 110  \'C\' 20 140 40 140 50 110])\n       (path_ [\'M\' 70 110  \'C\' 70 140 110 140 110 110])\n       (path_ [\'M\' 130 110 \'C\' 120 140 180 140 170 110])\n     ])",
              "[]");}
         _U.badCase($moduleName,
         "between lines 350 and 362");
      }();
   };
   var test35 = function (_v50) {
      return function () {
         switch (_v50.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(svg\n     [ (path_ [\'M\' 10 80 \'C\' 40 10 65 10 95 80 \'S\' 150 150 180 80])\n       (path_ [\'M\' 10 80 \'Q\' 95 10 180 80])\n       (path_ [\'M\' 10 80 \'Q\' 52.5 10 95 80 \'T\' 180 80])\n     ])",
              "[]");}
         _U.badCase($moduleName,
         "between lines 365 and 371");
      }();
   };
   var test36 = function (_v52) {
      return function () {
         switch (_v52.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(svg\n     [ (addAttr\n         (path \'green\' \'black\' 2\n           [\'M\' 10 315\n            \'L\' 110 215\n            \'A\' 30 50 0 0 1 162.55 162.45\n            \'L\' 172.55 152.45\n            \'A\' 30 50 -45 0 1 215.1 109.9\n            \'L\' 315 10])\n         [\'opacity\' 0.5]) ])",
              "[]");}
         _U.badCase($moduleName,
         "between lines 374 and 385");
      }();
   };
   var test37 = function (_v54) {
      return function () {
         switch (_v54.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(svg\n     [ (path \'green\' \'black\' 2\n         [\'M\' 80 80 \'A\' 45 45 0 0 0 125 125 \'L\' 125 80 \'Z\'])\n       (path \'red\' \'black\' 2\n         [\'M\' 230 80 \'A\' 45 45 0 1 0 275 125 \'L\' 275 80 \'Z\'])\n       (path \'purple\' \'black\' 2\n         [\'M\' 80 230 \'A\' 45 45 0 0 1 125 275 \'L\' 125 230 \'Z\'])\n       (path \'blue\' \'black\' 2\n         [\'M\' 230 230 \'A\' 45 45 0 1 1 275 275 \'L\' 275 230 \'Z\'])\n     ])",
              "[]");}
         _U.badCase($moduleName,
         "between lines 388 and 399");
      }();
   };
   var test38 = function (_v56) {
      return function () {
         switch (_v56.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(svg\n     [ [\'text\'\n         [[\'x\' 10] [\'y\' 20] [\'style\' \'fill:red\']]\n         [[\'TEXT\' \'Several lines:\']\n          [\'tspan\' [[\'x\' 10] [\'y\' 45]] [[\'TEXT\' \'First line.\']]]\n          [\'tspan\' [[\'x\' 10] [\'y\' 70]] [[\'TEXT\' \'Second line.\']]] ]]\n     ])",
              "[]");}
         _U.badCase($moduleName,
         "between lines 402 and 410");
      }();
   };
   var test39 = function (_v58) {
      return function () {
         switch (_v58.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "[\'svg\'\n        [[\'viewbox\' \'0 0 95 50\']]\n        [[\'g\'\n           [[\'stroke\' \'green\'] [\'fill\' \'white\'] [\'stroke-width\' 5]]\n           [ [\'circle\' [[\'cx\' 25] [\'cy\' 25] [\'r\' 15]] []]\n             [\'circle\' [[\'cx\' 40] [\'cy\' 25] [\'r\' 15]] []]\n             [\'circle\' [[\'cx\' 55] [\'cy\' 25] [\'r\' 15]] []]\n             [\'circle\' [[\'cx\' 70] [\'cy\' 25] [\'r\' 15]] []] ]]]]",
              "[]");}
         _U.badCase($moduleName,
         "between lines 413 and 422");
      }();
   };
   var test40 = function (_v60) {
      return function () {
         switch (_v60.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "[\'svg\'\n        [[\'viewbox\' \'0 0 95 50\']]\n        [[\'g\' [[\'stroke\' \'green\'] [\'fill\' \'white\'] [\'stroke-width\' 5]]\n             (let [x0 y0 r sep] [25 25 15 15]\n               (map (\\i [\'circle\' [[\'cx\' (+ x0 (mult i sep))] [\'cy\' y0] [\'r\' r]] []])\n                    [0 1 2 3])) ]]]",
              "[]");}
         _U.badCase($moduleName,
         "between lines 425 and 432");
      }();
   };
   var test41 = function (_v62) {
      return function () {
         switch (_v62.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x y] [200 150] (svg [\n       (rect_ 50 10 80 130)\n       (circle \'lightblue\' 300 100 50)\n       (ellipse_ 40 280 30 50)\n       (polygon_ [[110 110] [300 110] [x y]])\n       (polygon_ [[110 210] [300 210] [x y]])\n       (line_ 10 20 300 40)\n     ]))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 435 and 444");
      }();
   };
   var test42 = function (_v64) {
      return function () {
         switch (_v64.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x0 y0 sep] [40 28 110]\n       (svg (map (\\i (rect \'lightblue\' (+ x0 (mult i sep)) y0 60 130)) [0 1 2])))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 447 and 450");
      }();
   };
   var test43 = function (_v66) {
      return function () {
         switch (_v66.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x0 y0 sep] [40 28 110]\n       (svg (map (\\i (rect \'lightblue\' (+ x0 (* i sep)) y0 60 130)) [0 1 2])))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 453 and 456");
      }();
   };
   var test44 = function (_v68) {
      return function () {
         switch (_v68.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "[\'svg\' [] [[\'rect\' [[\'x\' 50] [\'y\' 50] [\'width\' 200] [\'height\' 200] [\'fill\'\n        \'white\']] []] [\'polygon\' [[\'fill\' \'black\'] [\'points\' [[60 50] [250 50] [250\n        240]]] [\'stroke\' \'DUMMY\'] [\'strokeWidth\' 0]] []] [\'polygon\' [[\'fill\' \'black\']\n        [\'points\' [[50 60] [50 240] [140 150]]] [\'stroke\' \'DUMMY\'] [\'strokeWidth\' 0]]\n        []] [\'polygon\' [[\'fill\' \'black\'] [\'points\' [[60 250] [240 250] [150 160]]]\n        [\'stroke\' \'DUMMY\'] [\'strokeWidth\' 0]] []]]]",
              "[]");}
         _U.badCase($moduleName,
         "between lines 460 and 467");
      }();
   };
   var test45 = function (_v70) {
      return function () {
         switch (_v70.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let ngon (\\(n cx cy d)\n       (let dangle (/ (* 3! (pi)) 2!)\n       (let anglei (\\i (+ dangle (/ (* i (* 2! (pi))) n)))\n       (let xi     (\\i (+ cx (* d (cos (anglei i)))))\n       (let yi     (\\i (+ cy (* d (sin (anglei i)))))\n       (let pti    (\\i [(xi i) (yi i)])\n         (polygon_ (map pti (list0N (- n 1!))))))))))\n     (svg [\n       (ngon 3 100 200 40)\n       (ngon 4 200 200 30)\n       (ngon 5 300 300 50)\n       (ngon 7 300 100 40)\n       (ngon 15 100 400 40)\n     ]))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 470 and 485");
      }();
   };
   var test46 = function (_v72) {
      return function () {
         switch (_v72.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let ngon (\\(n cx cy len1 len2)\n       (let dangle (/ (* 3! (pi)) 2!)\n       (let anglei (\\i (+ dangle (/ (* i (* 2! (pi))) n)))\n       (let xi     (\\i (+ cx (* len1 (cos (anglei i)))))\n       (let yi     (\\i (+ cy (* len2 (sin (anglei i)))))\n       (let pti    (\\i [(xi i) (yi i)])\n         (polygon_ (map pti (list0N (- n 1!))))))))))\n     (svg [\n       (ngon 3 100 200 40 40)\n       (ngon 4 200 200 30 30)\n       (ngon 5 300 300 50 50)\n       (ngon 7 300 100 40 40)\n       (ngon 15 100 400 40 40)\n     ]))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 489 and 504");
      }();
   };
   var test47 = function (_v74) {
      return function () {
         switch (_v74.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let rot (/ (* 3! (pi)) 2!)\n     (let ngonpts (\\(n cx cy len dangle)\n       (let anglei (\\i (+ dangle (/ (* i (* 2! (pi))) n)))\n       (let xi     (\\i (+ cx (* len (cos (anglei i)))))\n       (let yi     (\\i (+ cy (* len (sin (anglei i)))))\n       (let pti    (\\i [(xi i) (yi i)])\n         (map pti (list0N (- n 1!))))))))\n     (svg [\n       (polygon_ (ngonpts 5 100 200 40 0))\n       (polygon_ (ngonpts 5 100 200 40 (/ (pi) 5)))\n       (polygon_ (ngonpts 5 100 100 40 0))\n       (polygon_ (ngonpts 5 100 100 10 (/ (pi) 5)))\n       (polygon_\n         (intermingle\n           (ngonpts 5 400 300 40 rot)\n           (ngonpts 5 400 300 40 (+ rot (/ (pi) 5)))))\n       (polygon_\n         (intermingle\n           (ngonpts 3 50 400 40 rot)\n           (ngonpts 3 50 400 40 (+ rot (/ (pi) 3)))))\n       (polygon_\n         (intermingle\n           (ngonpts 5 400 200 40 rot)\n           (ngonpts 5 400 200 10 (+ rot (/ (pi) 5)))))\n       (polygon_\n         (intermingle\n           (ngonpts 3 400 400 40 rot)\n           (ngonpts 3 400 400 10 (+ rot (/ (pi) 3)))))\n     ])))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 508 and 538");
      }();
   };
   var test48 = function (_v76) {
      return function () {
         switch (_v76.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let nstar (\\(n cx cy len1 len2 rot)\n       (let pti (\\[i len]\n         (let anglei (+ rot (/ (* i (pi)) n))\n         (let xi (+ cx (* len (cos anglei)))\n         (let yi (+ cy (* len (sin anglei)))\n           [xi yi]))))\n       (let lengths\n         (map (\\b (if b len1 len2))\n              (concat (repeat n [true false])))\n       (let indices (list0N (- (* 2! n) 1!))\n         (polygon_ (map pti (zip indices lengths)))))))\n\n     (let upright (/ (* 3! (pi)) 2!)\n     (let [x0 y0 sep ni nj] [100 100 100 3! 7!]\n     (let [outerLen innerLen] [50 20]\n     (svg\n       (map (\\i\n              (let off (mult (- i ni) sep)\n              (nstar i (+ x0 off) (+ y0 off) outerLen innerLen upright)))\n            (range ni nj))\n     )))))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 541 and 563");
      }();
   };
   var test49 = function (_v78) {
      return function () {
         switch (_v78.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let toRadian\n    (\\a\n      (* (/ (pi) 180!) a))\n    (let [sx sy rad] [245 200 175]\n    (let cut \n      (\\ang\n        (let xend (* rad (cos ang))\n        (let yend (* rad (sin ang))\n        (line \'white\' 6 sx sy (+ sx xend) (+ sy yend)))))\n    (let [x0 y0 min max dim p] [80! 470 0! 360! 50! 1]\n    (let [a1 a2 a3 a4] [p 45 90 180]\n    (let radangs (map toRadian [a1 a2 a3 a4])\n    (let cuts (map cut radangs)\n    (let samplecirc (circle \'orange\' sx sy rad)\n    (let button (\\n (square \'lightgray\' n y0 dim))\n    (let bar (rect \'gray\' x0 y0 max dim)\n    (let slider\n      (if (< a1 max)\n        (if (< min a1)\n          (button (+ a1 x0))\n          (button x0))\n        (button (- (+ x0 max) dim)))\n      (svg  (append [samplecirc bar slider] cuts)))))))))))))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 567 and 591");
      }();
   };
   var test50 = function (_v80) {
      return function () {
         switch (_v80.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let node (\\[x y] (circle \'lightblue\' x y 20))\n       (let edge (\\[[x y] [i j]] (line \'lightgreen\' 5 x y i j))\n       (letrec genpairs\n          (\\xs\n            (case xs\n              ([x y | xx] [[x y] | (append (genpairs  (cons x xx)) (genpairs  (cons y xx)))])\n              ([x] [])\n              ([] [])))\n       (let pts [[200 50] [400 50] [100 223] [200 389] [400 391] [500 223]]\n       (let nodes (map node pts)\n       (let pairs (genpairs  pts)\n       (let edges (map edge pairs)\n         (svg (append edges nodes)))))))))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 595 and 609");
      }();
   };
   var test51 = function (_v82) {
      return function () {
         switch (_v82.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let nstar\n    (\\(n cx cy len1 len2 rot)\n      (let pti\n        (\\[i len]\n          (let anglei (+ rot (/ (* i (pi)) n))\n          (let xi (+ cx (* len (cos anglei)))\n          (let yi (+ cy (* len (sin anglei)))\n            [xi yi]))))\n      (let lengths\n        (map\n          (\\b\n            (if b\n              len1\n              len2))\n          (concat  (repeat n [true false])))\n      (let indices (list0N  (- (* 2! n) 1!))\n        (polygon \'red\' \'DUMMY\' 0 (map pti (zip indices lengths)))))))\n    (let upright (/ (* 3! (pi)) 2!)\n    (let [x0 y0 ni nj pts w h] [108 113 0.5! 3.5! 6! 454 300]\n    (let [outerLen innerLen] [30 12]\n    (let stripes\n      (map\n        (\\i\n          (rect\n            \'lightblue\'\n            x0\n            (+ y0 (* i h))\n            w\n            (/ h 6!)))\n        [(/ 1! 6!) (/ 2! 3!)])\n      (svg \n        (cons (rect \'white\' (- x0 10!) (- y0 10!) (+ w 20!) (+ h 20!))\n        (append\n          stripes\n          (map\n            (\\i\n              (let off (* i (/ w 4!))\n                (nstar pts (+ x0 off) (+ y0 (/ h 2!)) outerLen innerLen upright)))\n            (range ni nj))))))))))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 613 and 653");
      }();
   };
   var test52 = function (_v84) {
      return function () {
         switch (_v84.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x1 x2 x3 x4 x5 x6 x7 x8] [43 170 295 544 417 783 183 649]\n    (let [y1 y2 y3 y4 y5 y6 y7 y8] [45 154 270 376 446 860 213 328]\n    (let bwpoly (polygon \'white\' \'black\' 3)\n      (svg \n        [(bwpoly  [[x1 y6] [x1 y1] [x6 y1] [x6 y6]])\n         (bwpoly  [[x1 y1] [x5 y7] [x3 y3] [x1 y2]])\n         (bwpoly  [[x6 y1] [x5 y7] [x4 y3] [x6 y2]])\n         (bwpoly  [[x5 y7] [x3 y3] [x5 y8] [x4 y3]])\n         (bwpoly  [[x1 y4] [x3 y3] [x5 y8] [x7 y5]])\n         (bwpoly  [[x6 y4] [x4 y3] [x5 y8] [x8 y5]])]))))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 657 and 668");
      }();
   };
   var test53 = function (_v86) {
      return function () {
         switch (_v86.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x1 x2 x3 x4 x5 x6 x7 x8] [64 170 280 555 412 794 186 649]\n    (let [y1 y2 y3 y4 y5 y6 y7 y8] [45 99 154 214 256 860 125 184]\n    (let bwpoly (polygon \'lightyellow\' \'black\' 3)\n    (let blkline (\\[[a b] [c d]] (line \'black\' 3 a b c d))\n      (svg \n        (append\n          (map\n            bwpoly\n            [[[x1 y6] [x1 y1] [x6 y1] [x6 y6]]\n             [[x1 y1] [x5 y7] [x3 y3] [x1 y2]]\n             [[x6 y1] [x5 y7] [x4 y3] [x6 y2]]\n             [[x5 y7] [x3 y3] [x5 y8] [x4 y3]]\n             [[x1 y4] [x3 y3] [x5 y8] [x7 y5]]\n             [[x6 y4] [x4 y3] [x5 y8] [x8 y5]]\n             [[x3 y6] [x3 y5] [x5 y4] [x4 y5] [x4 y6]]\n             [[x1 y3] [x7 y2] [x7 y3] [x1 y4]]\n             [[x6 y3] [x8 y2] [x8 y3] [x6 y4]]])\n          (map blkline [[[x7 y5] [x7 y6]] [[x8 y5] [x8 y6]]])))))))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 674 and 693");
      }();
   };
   var test54 = function (_v88) {
      return function () {
         switch (_v88.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x0 y0 min max dim cx] [80! 400 70! 500! 50! 80]\n    (let [sx sy] [309 216]\n    (let samplecirc (circle \'orange\' sx sy cx)\n    (let button (\\n (square \'lightgray\' n y0 dim))\n    (let bar (rect \'gray\' x0 y0 max dim)\n    (let slider\n      (if (< cx max)\n        (if (< min cx)\n          (button (+ cx x0))\n          (button x0))\n        (button (- (+ x0 max) dim)))\n      (svg  [samplecirc bar slider])))))))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 698 and 711");
      }();
   };
   var test55 = function (_v90) {
      return function () {
         switch (_v90.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let nstar\n    (\\(n cx cy len1 len2 rot)\n      (let pti\n        (\\[i len]\n          (let anglei (+ rot (/ (* i (pi)) n))\n          (let xi (+ cx (* len (cos anglei)))\n          (let yi (+ cy (* len (sin anglei)))\n            [xi yi]))))\n      (let lengths\n        (map\n          (\\b\n            (if b\n              len1\n              len2))\n          (concat  (repeat n [true false])))\n      (let indices (list0N  (- (* 2! n) 1!))\n        (polygon \'white\' \'DUMMY\' 0 (map pti (zip indices lengths)))))))\n    (let rotate (\\a (/ (* (+ 9! a) (pi)) 6!))\n    (let [x0 y0 ni nj pts w h] [108 20 0! 12! 5! 500 20]\n    (let [blockw blockh] [(/ w 3!) (* 7! h)]\n    (let min\n      (if (< blockw blockh)\n        (* 0.4! blockw)\n        (* 0.4! blockh))\n    (let [outerLen innerLen] [10 4]\n    (let block (rect \'#09096d\' x0 y0 blockw blockh)\n    (let stripes\n      (map\n        (\\i (rect \'red\' x0 (+ y0 (* i h)) w h))\n        [0! 2! 4! 6! 8! 10! 12!])\n    (let base (append stripes [block])\n      (svg \n        (append\n          base\n          (map\n            (\\i\n                (nstar\n                  pts\n                  (+ (+ x0 (/ w 6!)) (* min (cos (rotate  i))))\n                  (+ (+ y0 (* h 3.5!)) (* min (sin (rotate  i))))\n                  outerLen\n                  innerLen\n                  (rotate  i)))\n          (range ni nj)))))))))))))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 715 and 760");
      }();
   };
   var test56 = function (_v92) {
      return function () {
         switch (_v92.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x0 y0 ni nj pts w h rad] [108 20 0! 12! 5! 500 20 6]\n    (let block (rect \'#09096d\' x0 y0 (* w (/ 2! 5!)) (* 7! h))\n    (let stripes\n      (map\n        (\\i (rect \'red\' x0 (+ y0 (* i h)) w h))\n        [0! 2! 4! 6! 8! 10! 12!])\n    (let base (append stripes [block])\n      (svg \n        (append\n          base\n          (map\n            (\\[i j]\n              (let xsep (/ w 15!)\n              (let ysep (* h 1.3)\n                (circle\n                  \'white\'\n                  (+ x0 (* i xsep))\n                  (+ y0 (* j ysep))\n                  rad))))\n          (append (cartProd (range 0.5 5.5) (range 0.75 4.75)) (cartProd (range 1 5) (range 1.2 4.2))))))))))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 764 and 785");
      }();
   };
   var test57 = function (_v94) {
      return function () {
         switch (_v94.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x0 y0 w h] [50 30 150 300]\n    (let xoff (+ x0 w)\n    (let yoff (+ y0 (/ h 4))\n    (let stripe (\\[color x] (rect color x y0 w h))\n    (let minrad\n      (if (< (/ w 7.5!) (/ h 15!))\n        (/ w 7.5!)\n        (/ h 15!))\n    (let figline (\\[[a b] [c d]] (line \'black\' (/ minrad 2) a b c d))\n    (let [x1 x2 x3] (map (\\n (+ x0 (* w n))) [1.2 1.5 1.8])\n    (let [y1 y2 y3 y4] (map (\\n (+ y0 (/ h n))) [4.3 2.8 1.9 1.4])\n      (svg \n        (append\n          (map stripe [[\'blue\' x0] [\'white\' (+ x0 w)] [\'red\' (+ x0 (* 2 w))]])\n          (snoc\n            (ellipse \'black\' x2 y1 (/ w 7.5!) (/ h 15!))\n            (map\n              figline\n              [[[x1 y1] [x1 y2]]\n               [[x1 y2] [x3 y2]]\n               [[x3 y1] [x3 y2]]\n               [[x1 y4] [x1 y3]]\n               [[x1 y3] [x3 y3]]\n               [[x3 y3] [x3 y4]]\n               [[x2 y1] [x2 y3]]]))))))))))))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 789 and 815");
      }();
   };
   var test58 = function (_v96) {
      return function () {
         switch (_v96.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x0 y0 w h max] [72 72 45 56 10!]\n    (let xoff (\\n (+ x0 (* w n)))\n    (let yoff (\\n (+ y0 (* h n)))\n    (let blkline (\\[[a b] [c d]] (line \'black\' 3 a b c d))\n    (let redpoly\n      (\\[a b]\n        (polygon\n          \'red\'\n          \'black\'\n          3\n          [[(xoff  a) (yoff  a)]\n           [(xoff  a) (yoff  b)]\n           [(xoff  b) (yoff  b)]\n           [(xoff  b) (yoff  a)]]))\n    (let dimension [0! 1 2 3 4 5 6 7 8 9 10!]\n    (let verticals\n      (zip\n        (map (\\n [(xoff  n) y0]) dimension)\n        (map (\\n [(xoff  n) (+ y0 (* h max))]) dimension))\n    (let horizontals\n      (zip\n        (map (\\n [x0 (yoff  n)]) dimension)\n        (map (\\n [(+ x0 (* w max)) (yoff  n)]) dimension))\n      (svg \n        (append\n          (map blkline (append verticals horizontals))\n          (append\n            (append\n              (let [p0 p1 p2 p3 p4] [0 1 2 3 4]\n                (map redpoly [[p0 p1] [p1 p2] [p2 p3] [p3 p4]]))\n              (map (\\[x y] (ellipse \'blue\' x y (* w 4) h)) [[(xoff 5) (yoff 9)]]))\n            (map\n              (\\[x y r] (circle \'yellow\' x y r))\n              [[(xoff  6) (yoff  2) (+ w h)]\n               [(xoff  6) (yoff  7) (/ (+ w h) 4)]\n               [(xoff  6) (yoff  5) (/ (+ w h) 2)]]))))))))))))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 819 and 856");
      }();
   };
   var test59 = function (_v98) {
      return function () {
         switch (_v98.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x0 y0 w h max] [69 55 53.2 74.4 10!]\n    (let xoff (\\n (+ x0 (* w n)))\n    (let yoff (\\n (+ y0 (* h n)))\n    (let blkline (\\[[a b] [c d]] (line \'black\' 3 a b c d))\n    (let redpoly\n      (\\[a b]\n        (polygon\n          \'red\'\n          \'black\'\n          3\n          [[(xoff  a) (yoff  a)]\n           [(xoff  a) (yoff  b)]\n           [(xoff  b) (yoff  b)]\n           [(xoff  b) (yoff  a)]]))\n    (let dimension\n      [0! 1 2 2.9 2.4 1.5 9.1 7.9 8.2 8.7 10!]\n    (let verticals\n      (zip\n        (map (\\n [(xoff  n) y0]) dimension)\n        (map (\\n [(xoff  n) (+ y0 (* h max))]) dimension))\n    (let horizontals\n      (zip\n        (map (\\n [x0 (yoff  n)]) dimension)\n        (map (\\n [(+ x0 (* w max)) (yoff  n)]) dimension))\n      (svg \n        (append\n          (map blkline (append verticals horizontals))\n          (append\n            (append\n              (let [p0 p1 p2 p3 p4] [0 1 2 2.9 5]\n                (map redpoly [[p0 p1] [p1 p2] [p2 p3] [p3 p4]]))\n              (map (\\[x y] (ellipse \'blue\' x y (* w 4) h)) [[(xoff  5) (yoff  9)]]))\n            (map\n              (\\[x y r] (circle \'yellow\' x y r))\n              [[(xoff  6) (yoff  1.75) (+ w h)]\n               [(xoff  6) (yoff  7) (/ (+ w h) 4)]\n               [(xoff  6) (yoff  5) (/ (+ w h) 2)]]))))))))))))",
              "[]");}
         _U.badCase($moduleName,
         "between lines 859 and 897");
      }();
   };
   var test15 = function (_v100) {
      return function () {
         switch (_v100.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x0 y0 sep] [10 28 30]\n       (svg (map (\\i (circle_ (+ x0 (mult i sep)) y0 10)) [0 1 2])))",
              $Lang.strVal($Eval.run(parseE("(svg [(circle_ 10 28 10) (circle_ 40 28 10) (circle_ 100 28 10)])"))));}
         _U.badCase($moduleName,
         "between lines 152 and 156");
      }();
   };
   var test16 = function (_v102) {
      return function () {
         switch (_v102.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x0 y0 sep] [10 28 30]\n       (svg (map (\\i (circle_ (+ x0 (mult i sep)) y0 10)) [0 1 2])))",
              $Lang.strVal($Eval.run(parseE("(svg [(circle_ 150 28 10) (circle_ 40 28 10) (circle_ 70 28 10)])"))));}
         _U.badCase($moduleName,
         "between lines 159 and 163");
      }();
   };
   var test17 = function (_v104) {
      return function () {
         switch (_v104.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x0 y0 sep] [10 28 30]\n       (svg (map (\\i (circle_ (+ x0 (mult i sep)) y0 10)) [0 1 2])))",
              $Lang.strVal($Eval.run(parseE("(svg [(circle_ 10 28 10) (circle_ 150 28 10) (circle_ 70 28 10)])"))));}
         _U.badCase($moduleName,
         "between lines 166 and 170");
      }();
   };
   var test18 = function (_v106) {
      return function () {
         switch (_v106.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x0 y0 sep] [10 28 30]\n       (svg (map (\\i (square_ (+ x0 (mult i sep)) y0 20)) [0 1 2])))",
              $Lang.strVal($Eval.run(parseE("(svg [(square_ 150 28 20) (square_ 40 28 20) (square_ 70 28 20)])"))));}
         _U.badCase($moduleName,
         "between lines 173 and 177");
      }();
   };
   var test20 = function (_v108) {
      return function () {
         switch (_v108.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let i 200 (svg [(line_ 10 20 i 40) (line_ 10 70 i 40)]))",
              $Lang.strVal($Eval.run(parseE("(svg [(line_ 10 20 300 40) (line_ 10 70 200 40)])"))));}
         _U.badCase($moduleName,
         "between lines 186 and 189");
      }();
   };
   var test23 = function (_v110) {
      return function () {
         switch (_v110.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x0 y0 sep] [10 28 30] (svg\n       (map2 (\\(i j) (square_ (+ x0 (mult i sep)) (+ y0 (mult j sep)) 20))\n             [0 1 2] [0 1 2])))",
              $Lang.strVal($Eval.run(parseE("(svg [(square_ 150 28 20) (square_ 40 58 20) (square_ 70 88 20)])"))));}
         _U.badCase($moduleName,
         "between lines 221 and 226");
      }();
   };
   var test24 = function (_v112) {
      return function () {
         switch (_v112.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x0 y0 sep] [10 28 30] (svg\n       (map2 (\\(i j) (square_ (+ x0 (mult i sep)) (+ y0 (mult j sep)) 20))\n             [0 1 2] [0 1 2])))",
              $Lang.strVal($Eval.run(parseE("(svg [(square_ 10 28 20) (square_ 40 58 20) (square_ 100 88 20)])"))));}
         _U.badCase($moduleName,
         "between lines 229 and 234");
      }();
   };
   var test25 = function (_v114) {
      return function () {
         switch (_v114.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x0 y0 sep] [10 28 30] (svg\n       (map2 (\\(i j) (square_ (+ x0 (mult i sep)) (+ y0 (mult j sep)) 20))\n             [0 1 2] [0 1 2])))",
              $Lang.strVal($Eval.run(parseE("(svg [(square_ 10 28 20) (square_ 40 58 20) (square_ 100 118 20)])"))));}
         _U.badCase($moduleName,
         "between lines 238 and 243");
      }();
   };
   var test29 = function (_v116) {
      return function () {
         switch (_v116.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x0 y0 sep] [10 28 30]\n       (svg (map (\\i (circle_ (+ x0 (mult i sep)) y0 10)) [0 1 2])))",
              $Lang.strVal($Eval.run(parseE("(svg [(circle_ 10 28 10) (circle_ 40 28 10) (circle_ 101 28 10)])"))));}
         _U.badCase($moduleName,
         "between lines 289 and 293");
      }();
   };
   var test30 = function (_v118) {
      return function () {
         switch (_v118.ctor)
         {case "_Tuple0":
            return A2(makeTest,
              "(let [x0 y0 sep rx ry] [10 28 60 15 10]\n       (svg (map (\\i (ellipse_ (+ x0 (mult i sep)) y0 rx ry)) [0 1 2])))",
              $Lang.strVal($Eval.run(parseE("(svg [(ellipse_ 10 28 15 10) (ellipse_ 70 28 25 40) (ellipse_ 130 28 15 10)])"))));}
         _U.badCase($moduleName,
         "between lines 296 and 300");
      }();
   };
   var tests = _L.fromArray([{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 100
                             ,_2: test15}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 100
                             ,_2: test16}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 100
                             ,_2: test17}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 100
                             ,_2: test18}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 100
                             ,_2: test19}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 100
                             ,_2: test20}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 100
                             ,_2: test21}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 600
                             ,_2: test22}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 200
                             ,_2: test23}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 200
                             ,_2: test24}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 200
                             ,_2: test25}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 200
                             ,_2: test26}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 200
                             ,_2: test27}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 200
                             ,_2: test28}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 200
                             ,_2: test29}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 200
                             ,_2: test30}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 600
                             ,_2: test31}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 300
                             ,_2: test32}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 300
                             ,_2: test33}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 200
                             ,_2: test34}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 200
                             ,_2: test35}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 330
                             ,_2: test36}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 330
                             ,_2: test37}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 200
                             ,_2: test38}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 200
                             ,_2: test39}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 200
                             ,_2: test40}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 200
                             ,_2: test41}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 200
                             ,_2: test42}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 200
                             ,_2: test43}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 300
                             ,_2: test44}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 300
                             ,_2: test45}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 300
                             ,_2: test46}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 300
                             ,_2: test47}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 300
                             ,_2: test48}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 600
                             ,_2: test49}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 600
                             ,_2: test50}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 600
                             ,_2: test51}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 600
                             ,_2: test52}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 600
                             ,_2: test53}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 600
                             ,_2: test54}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 600
                             ,_2: test55}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 600
                             ,_2: test56}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 600
                             ,_2: test57}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 600
                             ,_2: test58}
                            ,{ctor: "_Tuple3"
                             ,_0: 600
                             ,_1: 600
                             ,_2: test59}]);
   var sampleTests = $List.reverse($Utils.mapi(function (_v120) {
      return function () {
         switch (_v120.ctor)
         {case "_Tuple2":
            return function () {
                 var name = A2($Basics._op["++"],
                 "test",
                 $Basics.toString(_v120._0 + 14));
                 var thunk = function (_v124) {
                    return function () {
                       switch (_v124.ctor)
                       {case "_Tuple0":
                          return function () {
                               var $ = _v120._1({ctor: "_Tuple0"}),
                               e = $.e,
                               v = $.v;
                               return {_: {},e: e,v: v};
                            }();}
                       _U.badCase($moduleName,
                       "on line 952, column 25 to 55");
                    }();
                 };
                 return {ctor: "_Tuple2"
                        ,_0: name
                        ,_1: thunk};
              }();}
         _U.badCase($moduleName,
         "between lines 951 and 953");
      }();
   })($List.map($Utils.thd3)(tests)));
   var ignore = F2(function (_v126,
   _v127) {
      return function () {
         return function () {
            return {ctor: "_Tuple0"};
         }();
      }();
   });
   var testParser = A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   A2(ignore,
   {ctor: "_Tuple0"},
   parseV("1")),
   parseV("[1]")),
   parseV(" []")),
   parseV(" [1  2 3]   ")),
   parseV(" 1.0 ")),
   parseV(" -1.0 ")),
   parseV(" -1 ")),
   parseE("(\\x 1)")),
   parseE("(\\(x y z) 1)")),
   parseE("(let f (\\x (\\y [(+ x 0) (+ x y)])) ((f 3) 5))")),
   parseE("(let f (\\x (\\y [(+ x 0) (+ x y)])) (f 3 5))")),
   parseE("(let f (\\(x y) [(+ x 0) (+ x y)]) (f 3 5))")),
   parseE("(let f (\\(x y) [(+ x 0) (+ x y)]) ((f 3) 5))")),
   parseE(" (- -1 0) ")),
   parseE(" (--1 0) ")),
   parseE("true")),
   parseE("(< 1 2)")),
   parseE("(if true 2 [3])")),
   parseE("(if (< 1 2) [3] [])")),
   parseE("[1|2]")),
   parseE("[1 | 2]")),
   parseE("[1 2 | 3]")),
   parseE("  [1 | [2 | [3]]]")),
   parseE("((\\[x] x) [3])")),
   parseE("((\\  [x] x) [3])")),
   parseE("((\\[x y z] (+ x (+ y z))) [1 2 3])")),
   parseE("(let _ [] [])")),
   parseE("(case [] ([] true) ([_|_] false))"));
   _elm.MicroTests.values = {_op: _op
                            ,ignore: ignore
                            ,parseE: parseE
                            ,parseV: parseV
                            ,testParser: testParser
                            ,makeTest: makeTest
                            ,test0: test0
                            ,test1: test1
                            ,test2: test2
                            ,test3: test3
                            ,test4: test4
                            ,test5: test5
                            ,test6: test6
                            ,test7: test7
                            ,test8: test8
                            ,test9: test9
                            ,test10: test10
                            ,test11: test11
                            ,test12: test12
                            ,test13: test13
                            ,test14: test14
                            ,test15: test15
                            ,test16: test16
                            ,test17: test17
                            ,test18: test18
                            ,test19: test19
                            ,test20: test20
                            ,test21: test21
                            ,test22: test22
                            ,test23: test23
                            ,test24: test24
                            ,test25: test25
                            ,test26: test26
                            ,test27: test27
                            ,test28: test28
                            ,test29: test29
                            ,test30: test30
                            ,test31: test31
                            ,test32: test32
                            ,test33: test33
                            ,test34: test34
                            ,test35: test35
                            ,test36: test36
                            ,test37: test37
                            ,test38: test38
                            ,test39: test39
                            ,test40: test40
                            ,test41: test41
                            ,test42: test42
                            ,test43: test43
                            ,test44: test44
                            ,test45: test45
                            ,test46: test46
                            ,test47: test47
                            ,test48: test48
                            ,test49: test49
                            ,test50: test50
                            ,test51: test51
                            ,test52: test52
                            ,test53: test53
                            ,test54: test54
                            ,test55: test55
                            ,test56: test56
                            ,test57: test57
                            ,test58: test58
                            ,test59: test59
                            ,tests: tests
                            ,sampleTests: sampleTests};
   return _elm.MicroTests.values;
};
Elm.Mouse = Elm.Mouse || {};
Elm.Mouse.make = function (_elm) {
   "use strict";
   _elm.Mouse = _elm.Mouse || {};
   if (_elm.Mouse.values)
   return _elm.Mouse.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Mouse",
   $Basics = Elm.Basics.make(_elm),
   $Native$Mouse = Elm.Native.Mouse.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var clicks = $Native$Mouse.clicks;
   var isDown = $Native$Mouse.isDown;
   var position = $Native$Mouse.position;
   var x = A2($Signal.map,
   $Basics.fst,
   position);
   var y = A2($Signal.map,
   $Basics.snd,
   position);
   _elm.Mouse.values = {_op: _op
                       ,position: position
                       ,x: x
                       ,y: y
                       ,isDown: isDown
                       ,clicks: clicks};
   return _elm.Mouse.values;
};
Elm.Native.Array = {};
Elm.Native.Array.make = function(localRuntime) {

	localRuntime.Native = localRuntime.Native || {};
	localRuntime.Native.Array = localRuntime.Native.Array || {};
	if (localRuntime.Native.Array.values)
	{
		return localRuntime.Native.Array.values;
	}
	if ('values' in Elm.Native.Array)
	{
		return localRuntime.Native.Array.values = Elm.Native.Array.values;
	}

	var List = Elm.Native.List.make(localRuntime);

	// A RRB-Tree has two distinct data types.
	// Leaf -> "height"  is always 0
	//         "table"   is an array of elements
	// Node -> "height"  is always greater than 0
	//         "table"   is an array of child nodes
	//         "lengths" is an array of accumulated lengths of the child nodes

	// M is the maximal table size. 32 seems fast. E is the allowed increase
	// of search steps when concatting to find an index. Lower values will
	// decrease balancing, but will increase search steps.
	var M = 32;
	var E = 2;

	// An empty array.
	var empty = {
		ctor: "_Array",
		height: 0,
		table: new Array()
	};


	function get(i, array)
	{
		if (i < 0 || i >= length(array))
		{
			throw new Error(
				"Index " + i + " is out of range. Check the length of " +
				"your array first or use getMaybe or getWithDefault.");
		}
		return unsafeGet(i, array);
	}


	function unsafeGet(i, array)
	{
		for (var x = array.height; x > 0; x--)
		{
			var slot = i >> (x * 5);
			while (array.lengths[slot] <= i)
			{
				slot++;
			}
			if (slot > 0)
			{
				i -= array.lengths[slot - 1];
			}
			array = array.table[slot];
		}
		return array.table[i];
	}


	// Sets the value at the index i. Only the nodes leading to i will get
	// copied and updated.
	function set(i, item, array)
	{
		if (i < 0 || length(array) <= i)
		{
			return array;
		}
		return unsafeSet(i, item, array);
	}


	function unsafeSet(i, item, array)
	{
		array = nodeCopy(array);

		if (array.height == 0)
		{
			array.table[i] = item;
		}
		else
		{
			var slot = getSlot(i, array);
			if (slot > 0)
			{
				i -= array.lengths[slot - 1];
			}
			array.table[slot] = unsafeSet(i, item, array.table[slot]);
		}
		return array;
	}


	function initialize(len, f)
	{
		if (len == 0)
		{
			return empty;
		}
		var h = Math.floor( Math.log(len) / Math.log(M) );
		return initialize_(f, h, 0, len);
	}

	function initialize_(f, h, from, to)
	{
		if (h == 0)
		{
			var table = new Array((to - from) % (M + 1));
			for (var i = 0; i < table.length; i++)
			{
			  table[i] = f(from + i);
			}
			return {
				ctor: "_Array",
				height: 0,
				table: table
			};
		}

		var step = Math.pow(M, h);
		var table = new Array(Math.ceil((to - from) / step));
		var lengths = new Array(table.length);
		for (var i = 0; i < table.length; i++)
		{
			table[i] = initialize_(f, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
			lengths[i] = length(table[i]) + (i > 0 ? lengths[i-1] : 0);
		}
		return {
			ctor: "_Array",
			height: h,
			table: table,
			lengths: lengths
		};
	}

	function fromList(list)
	{
		if (list == List.Nil)
		{
			return empty;
		}

		// Allocate M sized blocks (table) and write list elements to it.
		var table = new Array(M);
		var nodes = new Array();
		var i = 0;

		while (list.ctor !== '[]')
		{
			table[i] = list._0;
			list = list._1;
			i++;

			// table is full, so we can push a leaf containing it into the
			// next node.
			if (i == M)
			{
				var leaf = {
					ctor: "_Array",
					height: 0,
					table: table
				};
				fromListPush(leaf, nodes);
				table = new Array(M);
				i = 0;
			}
		}

		// Maybe there is something left on the table.
		if (i > 0)
		{
			var leaf = {
				ctor: "_Array",
				height: 0,
				table: table.splice(0,i)
			};
			fromListPush(leaf, nodes);
		}

		// Go through all of the nodes and eventually push them into higher nodes.
		for (var h = 0; h < nodes.length - 1; h++)
		{
			if (nodes[h].table.length > 0)
			{
				fromListPush(nodes[h], nodes);
			}
		}

		var head = nodes[nodes.length - 1];
		if (head.height > 0 && head.table.length == 1)
		{
			return head.table[0];
		}
		else
		{
			return head;
		}
	}

	// Push a node into a higher node as a child.
	function fromListPush(toPush, nodes)
	{
		var h = toPush.height;

		// Maybe the node on this height does not exist.
		if (nodes.length == h)
		{
			var node = {
				ctor: "_Array",
				height: h + 1,
				table: new Array(),
				lengths: new Array()
			};
			nodes.push(node);
		}

		nodes[h].table.push(toPush);
		var len = length(toPush);
		if (nodes[h].lengths.length > 0)
		{
			len += nodes[h].lengths[nodes[h].lengths.length - 1];
		}
		nodes[h].lengths.push(len);

		if (nodes[h].table.length == M)
		{
			fromListPush(nodes[h], nodes);
			nodes[h] = {
				ctor: "_Array",
				height: h + 1,
				table: new Array(),
				lengths: new Array()
			};
		}
	}

	// Pushes an item via push_ to the bottom right of a tree.
	function push(item, a)
	{
		var pushed = push_(item, a);
		if (pushed !== null)
		{
			return pushed;
		}

		var newTree = create(item, a.height);
		return siblise(a, newTree);
	}

	// Recursively tries to push an item to the bottom-right most
	// tree possible. If there is no space left for the item,
	// null will be returned.
	function push_(item, a)
	{
		// Handle resursion stop at leaf level.
		if (a.height == 0)
		{
			if (a.table.length < M)
			{
				var newA = {
					ctor: "_Array",
					height: 0,
					table: a.table.slice()
				};
				newA.table.push(item);
				return newA;
			}
			else
			{
			  return null;
			}
		}

		// Recursively push
		var pushed = push_(item, botRight(a));

		// There was space in the bottom right tree, so the slot will
		// be updated.
		if (pushed != null)
		{
			var newA = nodeCopy(a);
			newA.table[newA.table.length - 1] = pushed;
			newA.lengths[newA.lengths.length - 1]++;
			return newA;
		}

		// When there was no space left, check if there is space left
		// for a new slot with a tree which contains only the item
		// at the bottom.
		if (a.table.length < M)
		{
			var newSlot = create(item, a.height - 1);
			var newA = nodeCopy(a);
			newA.table.push(newSlot);
			newA.lengths.push(newA.lengths[newA.lengths.length - 1] + length(newSlot));
			return newA;
		}
		else
		{
			return null;
		}
	}

	// Converts an array into a list of elements.
	function toList(a)
	{
		return toList_(List.Nil, a);
	}

	function toList_(list, a)
	{
		for (var i = a.table.length - 1; i >= 0; i--)
		{
			list =
				a.height == 0
					? List.Cons(a.table[i], list)
					: toList_(list, a.table[i]);
		}
		return list;
	}

	// Maps a function over the elements of an array.
	function map(f, a)
	{
		var newA = {
			ctor: "_Array",
			height: a.height,
			table: new Array(a.table.length)
		};
		if (a.height > 0)
		{
			newA.lengths = a.lengths;
		}
		for (var i = 0; i < a.table.length; i++)
		{
			newA.table[i] =
				a.height == 0
					? f(a.table[i])
					: map(f, a.table[i]);
		}
		return newA;
	}

	// Maps a function over the elements with their index as first argument.
	function indexedMap(f, a)
	{
		return indexedMap_(f, a, 0);
	}

	function indexedMap_(f, a, from)
	{
		var newA = {
			ctor: "_Array",
			height: a.height,
			table: new Array(a.table.length)
		};
		if (a.height > 0)
		{
			newA.lengths = a.lengths;
		}
		for (var i = 0; i < a.table.length; i++)
		{
			newA.table[i] =
				a.height == 0
					? A2(f, from + i, a.table[i])
					: indexedMap_(f, a.table[i], i == 0 ? 0 : a.lengths[i - 1]);
		}
		return newA;
	}

	function foldl(f, b, a)
	{
		if (a.height == 0)
		{
			for (var i = 0; i < a.table.length; i++)
			{
				b = A2(f, a.table[i], b);
			}
		}
		else
		{
			for (var i = 0; i < a.table.length; i++)
			{
				b = foldl(f, b, a.table[i]);
			}
		}
		return b;
	}

	function foldr(f, b, a)
	{
		if (a.height == 0)
		{
			for (var i = a.table.length; i--; )
			{
				b = A2(f, a.table[i], b);
			}
		}
		else
		{
			for (var i = a.table.length; i--; )
			{
				b = foldr(f, b, a.table[i]);
			}
		}
		return b;
	}

	// TODO: currently, it slices the right, then the left. This can be
	// optimized.
	function slice(from, to, a)
	{
		if (from < 0)
		{
			from += length(a);
		}
		if (to < 0)
		{
			to += length(a);
		}
		return sliceLeft(from, sliceRight(to, a));
	}

	function sliceRight(to, a)
	{
		if (to == length(a))
		{
			return a;
		}

		// Handle leaf level.
		if (a.height == 0)
		{
			var newA = { ctor:"_Array", height:0 };
			newA.table = a.table.slice(0, to);
			return newA;
		}

		// Slice the right recursively.
		var right = getSlot(to, a);
		var sliced = sliceRight(to - (right > 0 ? a.lengths[right - 1] : 0), a.table[right]);

		// Maybe the a node is not even needed, as sliced contains the whole slice.
		if (right == 0)
		{
			return sliced;
		}

		// Create new node.
		var newA = {
			ctor: "_Array",
			height: a.height,
			table: a.table.slice(0, right),
			lengths: a.lengths.slice(0, right)
		};
		if (sliced.table.length > 0)
		{
			newA.table[right] = sliced;
			newA.lengths[right] = length(sliced) + (right > 0 ? newA.lengths[right - 1] : 0);
		}
		return newA;
	}

	function sliceLeft(from, a)
	{
		if (from == 0)
		{
			return a;
		}

		// Handle leaf level.
		if (a.height == 0)
		{
			var newA = { ctor:"_Array", height:0 };
			newA.table = a.table.slice(from, a.table.length + 1);
			return newA;
		}

		// Slice the left recursively.
		var left = getSlot(from, a);
		var sliced = sliceLeft(from - (left > 0 ? a.lengths[left - 1] : 0), a.table[left]);

		// Maybe the a node is not even needed, as sliced contains the whole slice.
		if (left == a.table.length - 1)
		{
			return sliced;
		}

		// Create new node.
		var newA = {
			ctor: "_Array",
			height: a.height,
			table: a.table.slice(left, a.table.length + 1),
			lengths: new Array(a.table.length - left)
		};
		newA.table[0] = sliced;
		var len = 0;
		for (var i = 0; i < newA.table.length; i++)
		{
			len += length(newA.table[i]);
			newA.lengths[i] = len;
		}

		return newA;
	}

	// Appends two trees.
	function append(a,b)
	{
		if (a.table.length === 0)
		{
			return b;
		}
		if (b.table.length === 0)
		{
			return a;
		}

		var c = append_(a, b);

		// Check if both nodes can be crunshed together.
		if (c[0].table.length + c[1].table.length <= M)
		{
			if (c[0].table.length === 0)
			{
				return c[1];
			}
			if (c[1].table.length === 0)
			{
				return c[0];
			}

			// Adjust .table and .lengths
			c[0].table = c[0].table.concat(c[1].table);
			if (c[0].height > 0)
			{
				var len = length(c[0]);
				for (var i = 0; i < c[1].lengths.length; i++)
				{
					c[1].lengths[i] += len;
				}
				c[0].lengths = c[0].lengths.concat(c[1].lengths);
			}

			return c[0];
		}

		if (c[0].height > 0)
		{
			var toRemove = calcToRemove(a, b);
			if (toRemove > E)
			{
				c = shuffle(c[0], c[1], toRemove);
			}
		}

		return siblise(c[0], c[1]);
	}

	// Returns an array of two nodes; right and left. One node _may_ be empty.
	function append_(a, b)
	{
		if (a.height === 0 && b.height === 0)
		{
			return [a, b];
		}

		if (a.height !== 1 || b.height !== 1)
		{
			if (a.height === b.height)
			{
				a = nodeCopy(a);
				b = nodeCopy(b);
				var appended = append_(botRight(a), botLeft(b));

				insertRight(a, appended[1]);
				insertLeft(b, appended[0]);
			}
			else if (a.height > b.height)
			{
				a = nodeCopy(a);
				var appended = append_(botRight(a), b);

				insertRight(a, appended[0]);
				b = parentise(appended[1], appended[1].height + 1);
			}
			else
			{
				b = nodeCopy(b);
				var appended = append_(a, botLeft(b));

				var left = appended[0].table.length === 0 ? 0 : 1;
				var right = left === 0 ? 1 : 0;
				insertLeft(b, appended[left]);
				a = parentise(appended[right], appended[right].height + 1);
			}
		}

		// Check if balancing is needed and return based on that.
		if (a.table.length === 0 || b.table.length === 0)
		{
			return [a,b];
		}

		var toRemove = calcToRemove(a, b);
		if (toRemove <= E)
		{
			return [a,b];
		}
		return shuffle(a, b, toRemove);
	}

	// Helperfunctions for append_. Replaces a child node at the side of the parent.
	function insertRight(parent, node)
	{
		var index = parent.table.length - 1;
		parent.table[index] = node;
		parent.lengths[index] = length(node)
		parent.lengths[index] += index > 0 ? parent.lengths[index - 1] : 0;
	}

	function insertLeft(parent, node)
	{
		if (node.table.length > 0)
		{
			parent.table[0] = node;
			parent.lengths[0] = length(node);

			var len = length(parent.table[0]);
			for (var i = 1; i < parent.lengths.length; i++)
			{
				len += length(parent.table[i]);
				parent.lengths[i] = len;
			}
		}
		else
		{
			parent.table.shift();
			for (var i = 1; i < parent.lengths.length; i++)
			{
				parent.lengths[i] = parent.lengths[i] - parent.lengths[0];
			}
			parent.lengths.shift();
		}
	}

	// Returns the extra search steps for E. Refer to the paper.
	function calcToRemove(a, b)
	{
		var subLengths = 0;
		for (var i = 0; i < a.table.length; i++)
		{
			subLengths += a.table[i].table.length;
		}
		for (var i = 0; i < b.table.length; i++)
		{
			subLengths += b.table[i].table.length;
		}

		var toRemove = a.table.length + b.table.length
		return toRemove - (Math.floor((subLengths - 1) / M) + 1);
	}

	// get2, set2 and saveSlot are helpers for accessing elements over two arrays.
	function get2(a, b, index)
	{
		return index < a.length
			? a[index]
			: b[index - a.length];
	}

	function set2(a, b, index, value)
	{
		if (index < a.length)
		{
			a[index] = value;
		}
		else
		{
			b[index - a.length] = value;
		}
	}

	function saveSlot(a, b, index, slot)
	{
		set2(a.table, b.table, index, slot);

		var l = (index == 0 || index == a.lengths.length)
			? 0
			: get2(a.lengths, a.lengths, index - 1);

		set2(a.lengths, b.lengths, index, l + length(slot));
	}

	// Creates a node or leaf with a given length at their arrays for perfomance.
	// Is only used by shuffle.
	function createNode(h, length)
	{
		if (length < 0)
		{
			length = 0;
		}
		var a = {
			ctor: "_Array",
			height: h,
			table: new Array(length)
		};
		if (h > 0)
		{
			a.lengths = new Array(length);
		}
		return a;
	}

	// Returns an array of two balanced nodes.
	function shuffle(a, b, toRemove)
	{
		var newA = createNode(a.height, Math.min(M, a.table.length + b.table.length - toRemove));
		var newB = createNode(a.height, newA.table.length - (a.table.length + b.table.length - toRemove));

		// Skip the slots with size M. More precise: copy the slot references
		// to the new node
		var read = 0;
		while (get2(a.table, b.table, read).table.length % M == 0)
		{
			set2(newA.table, newB.table, read, get2(a.table, b.table, read));
			set2(newA.lengths, newB.lengths, read, get2(a.lengths, b.lengths, read));
			read++;
		}

		// Pulling items from left to right, caching in a slot before writing
		// it into the new nodes.
		var write = read;
		var slot = new createNode(a.height - 1, 0);
		var from = 0;

		// If the current slot is still containing data, then there will be at
		// least one more write, so we do not break this loop yet.
		while (read - write - (slot.table.length > 0 ? 1 : 0) < toRemove)
		{
			// Find out the max possible items for copying.
			var source = get2(a.table, b.table, read);
			var to = Math.min(M - slot.table.length, source.table.length)

			// Copy and adjust size table.
			slot.table = slot.table.concat(source.table.slice(from, to));
			if (slot.height > 0)
			{
				var len = slot.lengths.length;
				for (var i = len; i < len + to - from; i++)
				{
					slot.lengths[i] = length(slot.table[i]);
					slot.lengths[i] += (i > 0 ? slot.lengths[i - 1] : 0);
				}
			}

			from += to;

			// Only proceed to next slots[i] if the current one was
			// fully copied.
			if (source.table.length <= to)
			{
				read++; from = 0;
			}

			// Only create a new slot if the current one is filled up.
			if (slot.table.length == M)
			{
				saveSlot(newA, newB, write, slot);
				slot = createNode(a.height - 1,0);
				write++;
			}
		}

		// Cleanup after the loop. Copy the last slot into the new nodes.
		if (slot.table.length > 0)
		{
			saveSlot(newA, newB, write, slot);
			write++;
		}

		// Shift the untouched slots to the left
		while (read < a.table.length + b.table.length )
		{
			saveSlot(newA, newB, write, get2(a.table, b.table, read));
			read++;
			write++;
		}

		return [newA, newB];
	}

	// Navigation functions
	function botRight(a)
	{
		return a.table[a.table.length - 1];
	}
	function botLeft(a)
	{
		return a.table[0];
	}

	// Copies a node for updating. Note that you should not use this if
	// only updating only one of "table" or "lengths" for performance reasons.
	function nodeCopy(a)
	{
		var newA = {
			ctor: "_Array",
			height: a.height,
			table: a.table.slice()
		};
		if (a.height > 0)
		{
			newA.lengths = a.lengths.slice();
		}
		return newA;
	}

	// Returns how many items are in the tree.
	function length(array)
	{
		if (array.height == 0)
		{
			return array.table.length;
		}
		else
		{
			return array.lengths[array.lengths.length - 1];
		}
	}

	// Calculates in which slot of "table" the item probably is, then
	// find the exact slot via forward searching in  "lengths". Returns the index.
	function getSlot(i, a)
	{
		var slot = i >> (5 * a.height);
		while (a.lengths[slot] <= i)
		{
			slot++;
		}
		return slot;
	}

	// Recursively creates a tree with a given height containing
	// only the given item.
	function create(item, h)
	{
		if (h == 0)
		{
			return {
				ctor: "_Array",
				height: 0,
				table: [item]
			};
		}
		return {
			ctor: "_Array",
			height: h,
			table: [create(item, h - 1)],
			lengths: [1]
		};
	}

	// Recursively creates a tree that contains the given tree.
	function parentise(tree, h)
	{
		if (h == tree.height)
		{
			return tree;
		}

		return {
			ctor: "_Array",
			height: h,
			table: [parentise(tree, h - 1)],
			lengths: [length(tree)]
		};
	}

	// Emphasizes blood brotherhood beneath two trees.
	function siblise(a, b)
	{
		return {
			ctor: "_Array",
			height: a.height + 1,
			table: [a, b],
			lengths: [length(a), length(a) + length(b)]
		};
	}

	function toJSArray(a)
	{
		var jsArray = new Array(length(a));
		toJSArray_(jsArray, 0, a);
		return jsArray;
	}

	function toJSArray_(jsArray, i, a)
	{
		for (var t = 0; t < a.table.length; t++)
		{
			if (a.height == 0)
			{
				jsArray[i + t] = a.table[t];
			}
			else
			{
				var inc = t == 0 ? 0 : a.lengths[t - 1];
				toJSArray_(jsArray, i + inc, a.table[t]);
			}
		}
	}

	function fromJSArray(jsArray)
	{
		if (jsArray.length == 0)
		{
			return empty;
		}
		var h = Math.floor(Math.log(jsArray.length) / Math.log(M));
		return fromJSArray_(jsArray, h, 0, jsArray.length);
	}

	function fromJSArray_(jsArray, h, from, to)
	{
		if (h == 0)
		{
			return {
				ctor: "_Array",
				height: 0,
				table: jsArray.slice(from, to)
			};
		}

		var step = Math.pow(M, h);
		var table = new Array(Math.ceil((to - from) / step));
		var lengths = new Array(table.length);
		for (var i = 0; i < table.length; i++)
		{
			table[i] = fromJSArray_(jsArray, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
			lengths[i] = length(table[i]) + (i > 0 ? lengths[i-1] : 0);
		}
		return {
			ctor: "_Array",
			height: h,
			table: table,
			lengths: lengths
		};
	}

	Elm.Native.Array.values = {
		empty: empty,
		fromList: fromList,
		toList: toList,
		initialize: F2(initialize),
		append: F2(append),
		push: F2(push),
		slice: F3(slice),
		get: F2(get),
		set: F3(set),
		map: F2(map),
		indexedMap: F2(indexedMap),
		foldl: F3(foldl),
		foldr: F3(foldr),
		length: length,

		toJSArray:toJSArray,
		fromJSArray:fromJSArray
	};

	return localRuntime.Native.Array.values = Elm.Native.Array.values;

}

Elm.Native.Basics = {};
Elm.Native.Basics.make = function(localRuntime) {

	localRuntime.Native = localRuntime.Native || {};
	localRuntime.Native.Basics = localRuntime.Native.Basics || {};
	if (localRuntime.Native.Basics.values)
	{
		return localRuntime.Native.Basics.values;
	}

	var Utils = Elm.Native.Utils.make(localRuntime);

	function div(a, b)
	{
		return (a/b)|0;
	}
	function rem(a, b)
	{
		return a % b;
	}
	function mod(a, b)
	{
		if (b === 0)
		{
			throw new Error("Cannot perform mod 0. Division by zero error.");
		}
		var r = a % b;
		var m = a === 0 ? 0 : (b > 0 ? (a >= 0 ? r : r+b) : -mod(-a,-b));

		return m === b ? 0 : m;
	}
	function logBase(base, n)
	{
		return Math.log(n) / Math.log(base);
	}
	function negate(n)
	{
		return -n;
	}
	function abs(n)
	{
		return n < 0 ? -n : n;
	}

	function min(a, b)
	{
		return Utils.cmp(a,b) < 0 ? a : b;
	}
	function max(a, b)
	{
		return Utils.cmp(a,b) > 0 ? a : b;
	}
	function clamp(lo, hi, n)
	{
		return Utils.cmp(n,lo) < 0 ? lo : Utils.cmp(n,hi) > 0 ? hi : n;
	}

	function xor(a, b)
	{
		return a !== b;
	}
	function not(b)
	{
		return !b;
	}
	function isInfinite(n)
	{
		return n === Infinity || n === -Infinity
	}

	function truncate(n)
	{
		return n|0;
	}

	function degrees(d)
	{
		return d * Math.PI / 180;
	}
	function turns(t)
	{
		return 2 * Math.PI * t;
	}
	function fromPolar(point)
	{
		var r = point._0;
		var t = point._1;
		return Utils.Tuple2(r * Math.cos(t), r * Math.sin(t));
	}
	function toPolar(point)
	{
		var x = point._0;
		var y = point._1;
		return Utils.Tuple2(Math.sqrt(x * x + y * y), Math.atan2(y,x));
	}

	return localRuntime.Native.Basics.values = {
		div: F2(div),
		rem: F2(rem),
		mod: F2(mod),

		pi: Math.PI,
		e: Math.E,
		cos: Math.cos,
		sin: Math.sin,
		tan: Math.tan,
		acos: Math.acos,
		asin: Math.asin,
		atan: Math.atan,
		atan2: F2(Math.atan2),

		degrees:  degrees,
		turns:  turns,
		fromPolar:  fromPolar,
		toPolar:  toPolar,

		sqrt: Math.sqrt,
		logBase: F2(logBase),
		negate: negate,
		abs: abs,
		min: F2(min),
		max: F2(max),
		clamp: F3(clamp),
		compare: Utils.compare,

		xor: F2(xor),
		not: not,

		truncate: truncate,
		ceiling: Math.ceil,
		floor: Math.floor,
		round: Math.round,
		toFloat: function(x) { return x; },
		isNaN: isNaN,
		isInfinite: isInfinite
	};
};

Elm.Native.Char = {};
Elm.Native.Char.make = function(localRuntime) {
	localRuntime.Native = localRuntime.Native || {};
	localRuntime.Native.Char = localRuntime.Native.Char || {};
	if (localRuntime.Native.Char.values)
	{
		return localRuntime.Native.Char.values;
	}

	var Utils = Elm.Native.Utils.make(localRuntime);

	return localRuntime.Native.Char.values = {
		fromCode : function(c) { return Utils.chr(String.fromCharCode(c)); },
		toCode   : function(c) { return c.charCodeAt(0); },
		toUpper  : function(c) { return Utils.chr(c.toUpperCase()); },
		toLower  : function(c) { return Utils.chr(c.toLowerCase()); },
		toLocaleUpper : function(c) { return Utils.chr(c.toLocaleUpperCase()); },
		toLocaleLower : function(c) { return Utils.chr(c.toLocaleLowerCase()); },
	};
};

Elm.Native.Color = {};
Elm.Native.Color.make = function(localRuntime) {
	localRuntime.Native = localRuntime.Native || {};
	localRuntime.Native.Color = localRuntime.Native.Color || {};
	if (localRuntime.Native.Color.values)
	{
		return localRuntime.Native.Color.values;
	}

	function toCss(c)
	{
		var format = '';
		var colors = '';
		if (c.ctor === 'RGBA')
		{
			format = 'rgb';
			colors = c._0 + ', ' + c._1 + ', ' + c._2;
		}
		else
		{
			format = 'hsl';
			colors = (c._0 * 180 / Math.PI) + ', ' +
					 (c._1 * 100) + '%, ' +
					 (c._2 * 100) + '%';
		}
		if (c._3 === 1)
		{
			return format + '(' + colors + ')';
		}
		else
		{
			return format + 'a(' + colors + ', ' + c._3 + ')';
		}
	}

	return localRuntime.Native.Color.values = {
		toCss: toCss
	};

};

Elm.Native.Debug = {};
Elm.Native.Debug.make = function(localRuntime) {
	localRuntime.Native = localRuntime.Native || {};
	localRuntime.Native.Debug = localRuntime.Native.Debug || {};
	if (localRuntime.Native.Debug.values)
	{
		return localRuntime.Native.Debug.values;
	}

	var toString = Elm.Native.Show.make(localRuntime).toString;

	function log(tag, value)
	{
		var msg = tag + ': ' + toString(value);
		var process = process || {};
		if (process.stdout)
		{
			process.stdout.write(msg);
		}
		else
		{
			console.log(msg);
		}
		return value;
	}

	function crash(message)
	{
		throw new Error(message);
	}

	function tracePath(tag, form)
	{
		if (localRuntime.debug)
		{
			return localRuntime.debug.trace(tag, form);
		}
		return form;
	}

	function watch(tag, value)
	{
		if (localRuntime.debug)
		{
			localRuntime.debug.watch(tag, value);
		}
		return value;
	}

	function watchSummary(tag, summarize, value)
	{
		if (localRuntime.debug)
		{
			localRuntime.debug.watch(tag, summarize(value));
		}
		return value;
	}

	return localRuntime.Native.Debug.values = {
		crash: crash,
		tracePath: F2(tracePath),
		log: F2(log),
		watch: F2(watch),
		watchSummary:F3(watchSummary),
	};
};


// setup
Elm.Native = Elm.Native || {};
Elm.Native.Graphics = Elm.Native.Graphics || {};
Elm.Native.Graphics.Collage = Elm.Native.Graphics.Collage || {};

// definition
Elm.Native.Graphics.Collage.make = function(localRuntime) {
	'use strict';

	// attempt to short-circuit
	localRuntime.Native = localRuntime.Native || {};
	localRuntime.Native.Graphics = localRuntime.Native.Graphics || {};
	localRuntime.Native.Graphics.Collage = localRuntime.Native.Graphics.Collage || {};
	if ('values' in localRuntime.Native.Graphics.Collage)
	{
		return localRuntime.Native.Graphics.Collage.values;
	}

	// okay, we cannot short-ciruit, so now we define everything
	var Color = Elm.Native.Color.make(localRuntime);
	var List = Elm.Native.List.make(localRuntime);
	var NativeElement = Elm.Native.Graphics.Element.make(localRuntime);
	var Transform = Elm.Transform2D.make(localRuntime);
	var Utils = Elm.Native.Utils.make(localRuntime);

	function setStrokeStyle(ctx, style)
	{
		ctx.lineWidth = style.width;

		var cap = style.cap.ctor;
		ctx.lineCap = cap === 'Flat'
			? 'butt'
			: cap === 'Round'
				? 'round'
				: 'square';

		var join = style.join.ctor;
		ctx.lineJoin = join === 'Smooth'
			? 'round'
			: join === 'Sharp'
				? 'miter'
				: 'bevel';

		ctx.miterLimit = style.join._0 || 10;
		ctx.strokeStyle = Color.toCss(style.color);
	}

	function setFillStyle(ctx, style)
	{
		var sty = style.ctor;
		ctx.fillStyle = sty === 'Solid'
			? Color.toCss(style._0)
			: sty === 'Texture'
				? texture(redo, ctx, style._0)
				: gradient(ctx, style._0);
	}

	function trace(ctx, path)
	{
		var points = List.toArray(path);
		var i = points.length - 1;
		if (i <= 0)
		{
			return;
		}
		ctx.moveTo(points[i]._0, points[i]._1);
		while (i--)
		{
			ctx.lineTo(points[i]._0, points[i]._1);
		}
		if (path.closed)
		{
			i = points.length - 1;
			ctx.lineTo(points[i]._0, points[i]._1);
		}
	}

	function line(ctx,style,path)
	{
		(style.dashing.ctor === '[]')
			? trace(ctx, path)
			: customLineHelp(ctx, style, path);
		ctx.scale(1,-1);
		ctx.stroke();
	}

	function customLineHelp(ctx, style, path)
	{
		var points = List.toArray(path);
		if (path.closed)
		{
			points.push(points[0]);
		}
		var pattern = List.toArray(style.dashing);
		var i = points.length - 1;
		if (i <= 0)
		{
			return;
		}
		var x0 = points[i]._0, y0 = points[i]._1;
		var x1=0, y1=0, dx=0, dy=0, remaining=0, nx=0, ny=0;
		var pindex = 0, plen = pattern.length;
		var draw = true, segmentLength = pattern[0];
		ctx.moveTo(x0,y0);
		while (i--)
		{
			x1 = points[i]._0;
			y1 = points[i]._1;
			dx = x1 - x0;
			dy = y1 - y0;
			remaining = Math.sqrt(dx * dx + dy * dy);
			while (segmentLength <= remaining)
			{
				x0 += dx * segmentLength / remaining;
				y0 += dy * segmentLength / remaining;
				ctx[draw ? 'lineTo' : 'moveTo'](x0, y0);
				// update starting position
				dx = x1 - x0;
				dy = y1 - y0;
				remaining = Math.sqrt(dx * dx + dy * dy);
				// update pattern
				draw = !draw;
				pindex = (pindex + 1) % plen;
				segmentLength = pattern[pindex];
			}
			if (remaining > 0)
			{
				ctx[draw ? 'lineTo' : 'moveTo'](x1, y1);
				segmentLength -= remaining;
			}
			x0 = x1;
			y0 = y1;
		}
	}

	function drawLine(ctx, style, path)
	{
		setStrokeStyle(ctx, style);
		return line(ctx, style, path);
	}

	function texture(redo, ctx, src)
	{
		var img = new Image();
		img.src = src;
		img.onload = redo;
		return ctx.createPattern(img, 'repeat');
	}

	function gradient(ctx, grad)
	{
		var g;
		var stops = [];
		if (grad.ctor === 'Linear')
		{
			var p0 = grad._0, p1 = grad._1;
			g = ctx.createLinearGradient(p0._0, -p0._1, p1._0, -p1._1);
			stops = List.toArray(grad._2);
		}
		else
		{
			var p0 = grad._0, p2 = grad._2;
			g = ctx.createRadialGradient(p0._0, -p0._1, grad._1, p2._0, -p2._1, grad._3);
			stops = List.toArray(grad._4);
		}
		var len = stops.length;
		for (var i = 0; i < len; ++i)
		{
			var stop = stops[i];
			g.addColorStop(stop._0, Color.toCss(stop._1));
		}
		return g;
	}

	function drawShape(redo, ctx, style, path)
	{
		trace(ctx, path);
		setFillStyle(ctx, style);
		ctx.scale(1,-1);
		ctx.fill();
	}


	// TEXT RENDERING

	function fillText(redo, ctx, text)
	{
		drawText(ctx, text, ctx.fillText);
	}

	function strokeText(redo, ctx, style, text)
	{
		setStrokeStyle(ctx, style);
		// Use native canvas API for dashes only for text for now
		// Degrades to non-dashed on IE 9 + 10
		if (style.dashing.ctor !== '[]' && ctx.setLineDash)
		{
			var pattern = List.toArray(style.dashing);
			ctx.setLineDash(pattern);
		}
		drawText(ctx, text, ctx.strokeText);
	}

	function drawText(ctx, text, canvasDrawFn)
	{
		var textChunks = chunkText(defaultContext, text);

		var totalWidth = 0;
		var maxHeight = 0;
		var numChunks = textChunks.length;

		ctx.scale(1,-1);

		for (var i = numChunks; i--; )
		{
			var chunk = textChunks[i];
			ctx.font = chunk.font;
			var metrics = ctx.measureText(chunk.text);
			chunk.width = metrics.width;
			totalWidth += chunk.width;
			if (chunk.height > maxHeight)
			{
				maxHeight = chunk.height;
			}
		}

		var x = -totalWidth / 2.0;
		for (var i = 0; i < numChunks; ++i)
		{
			var chunk = textChunks[i];
			ctx.font = chunk.font;
			ctx.fillStyle = chunk.color;
			canvasDrawFn.call(ctx, chunk.text, x, maxHeight / 2);
			x += chunk.width;
		}
	}

	function toFont(props)
	{
		return [
			props['font-style'],
			props['font-variant'],
			props['font-weight'],
			props['font-size'],
			props['font-family']
		].join(' ');
	}


	// Convert the object returned by the text module
	// into something we can use for styling canvas text
	function chunkText(context, text)
	{
		var tag = text.ctor;
		if (tag === 'Text:Append')
		{
			var leftChunks = chunkText(context, text._0);
			var rightChunks = chunkText(context, text._1);
			return leftChunks.concat(rightChunks);
		}
		if (tag === 'Text:Text')
		{
			return [{
				text: text._0,
				color: context.color,
				height: context['font-size'].slice(0,-2) | 0,
				font: toFont(context)
			}];
		}
		if (tag === 'Text:Meta')
		{
			var newContext = freshContext(text._0, context);
			return chunkText(newContext, text._1);
		}
	}

	function freshContext(props, ctx)
	{
		return {
			'font-style': props['font-style'] || ctx['font-style'],
			'font-variant': props['font-variant'] || ctx['font-variant'],
			'font-weight': props['font-weight'] || ctx['font-weight'],
			'font-size': props['font-size'] || ctx['font-size'],
			'font-family': props['font-family'] || ctx['font-family'],
			'color': props['color'] || ctx['color']
		};
	}

	var defaultContext = {
		'font-style': 'normal',
		'font-variant': 'normal',
		'font-weight': 'normal',
		'font-size': '12px',
		'font-family': 'sans-serif',
		'color': 'black'
	};


	// IMAGES

	function drawImage(redo, ctx, form)
	{
		var img = new Image();
		img.onload = redo;
		img.src = form._3;
		var w = form._0,
			h = form._1,
			pos = form._2,
			srcX = pos._0,
			srcY = pos._1,
			srcW = w,
			srcH = h,
			destX = -w/2,
			destY = -h/2,
			destW = w,
			destH = h;

		ctx.scale(1,-1);
		ctx.drawImage(img, srcX, srcY, srcW, srcH, destX, destY, destW, destH);
	}

	function renderForm(redo, ctx, form)
	{
		ctx.save();

		var x = form.x,
			y = form.y,
			theta = form.theta,
			scale = form.scale;

		if (x !== 0 || y !== 0)
		{
			ctx.translate(x, y);
		}
		if (theta !== 0)
		{
			ctx.rotate(theta);
		}
		if (scale !== 1)
		{
			ctx.scale(scale,scale);
		}
		if (form.alpha !== 1)
		{
			ctx.globalAlpha = ctx.globalAlpha * form.alpha;
		}

		ctx.beginPath();
		var f = form.form;
		switch (f.ctor)
		{
			case 'FPath':
				drawLine(ctx, f._0, f._1);
				break;

			case 'FImage':
				drawImage(redo, ctx, f);
				break;

			case 'FShape':
				if (f._0.ctor === 'Line')
				{
					f._1.closed = true;
					drawLine(ctx, f._0._0, f._1);
				}
				else
				{
					drawShape(redo, ctx, f._0._0, f._1);
				}
				break;

			case 'FText':
				fillText(redo, ctx, f._0);
				break;

			case 'FOutlinedText':
				strokeText(redo, ctx, f._0, f._1);
				break;
		}
		ctx.restore();
	}

	function formToMatrix(form)
	{
	   var scale = form.scale;
	   var matrix = A6( Transform.matrix, scale, 0, 0, scale, form.x, form.y );

	   var theta = form.theta
	   if (theta !== 0)
	   {
		   matrix = A2( Transform.multiply, matrix, Transform.rotation(theta) );
	   }

	   return matrix;
	}

	function str(n)
	{
		if (n < 0.00001 && n > -0.00001)
		{
			return 0;
		}
		return n;
	}

	function makeTransform(w, h, form, matrices)
	{
		var props = form.form._0.props;
		var m = A6( Transform.matrix, 1, 0, 0, -1,
					(w - props.width ) / 2,
					(h - props.height) / 2 );
		var len = matrices.length;
		for (var i = 0; i < len; ++i)
		{
			m = A2( Transform.multiply, m, matrices[i] );
		}
		m = A2( Transform.multiply, m, formToMatrix(form) );

		return 'matrix(' +
			str( m[0]) + ', ' + str( m[3]) + ', ' +
			str(-m[1]) + ', ' + str(-m[4]) + ', ' +
			str( m[2]) + ', ' + str( m[5]) + ')';
	}

	function stepperHelp(list)
	{
		var arr = List.toArray(list);
		var i = 0;
		function peekNext()
		{
			return i < arr.length ? arr[i].form.ctor : '';
		}
		// assumes that there is a next element
		function next()
		{
			var out = arr[i];
			++i;
			return out;
		}
		return {
			peekNext: peekNext,
			next: next
		};
	}

	function formStepper(forms)
	{
		var ps = [stepperHelp(forms)];
		var matrices = [];
		var alphas = [];
		function peekNext()
		{
			var len = ps.length;
			var formType = '';
			for (var i = 0; i < len; ++i )
			{
				if (formType = ps[i].peekNext()) return formType;
			}
			return '';
		}
		// assumes that there is a next element
		function next(ctx)
		{
			while (!ps[0].peekNext())
			{
				ps.shift();
				matrices.pop();
				alphas.shift();
				if (ctx)
				{
					ctx.restore();
				}
			}
			var out = ps[0].next();
			var f = out.form;
			if (f.ctor === 'FGroup')
			{
				ps.unshift(stepperHelp(f._1));
				var m = A2(Transform.multiply, f._0, formToMatrix(out));
				ctx.save();
				ctx.transform(m[0], m[3], m[1], m[4], m[2], m[5]);
				matrices.push(m);

				var alpha = (alphas[0] || 1) * out.alpha;
				alphas.unshift(alpha);
				ctx.globalAlpha = alpha;
			}
			return out;
		}
		function transforms()
		{
			return matrices;
		}
		function alpha()
		{
			return alphas[0] || 1;
		}
		return {
			peekNext: peekNext,
			next: next,
			transforms: transforms,
			alpha: alpha
		};
	}

	function makeCanvas(w,h)
	{
		var canvas = NativeElement.createNode('canvas');
		canvas.style.width  = w + 'px';
		canvas.style.height = h + 'px';
		canvas.style.display = "block";
		canvas.style.position = "absolute";
		var ratio = window.devicePixelRatio || 1;
		canvas.width  = w * ratio;
		canvas.height = h * ratio;
		return canvas;
	}

	function render(model)
	{
		var div = NativeElement.createNode('div');
		div.style.overflow = 'hidden';
		div.style.position = 'relative';
		update(div, model, model);
		return div;
	}

	function nodeStepper(w,h,div)
	{
		var kids = div.childNodes;
		var i = 0;
		var ratio = window.devicePixelRatio || 1;

		function transform(transforms, ctx)
		{
			ctx.translate( w / 2 * ratio, h / 2 * ratio );
			ctx.scale( ratio, -ratio );
			var len = transforms.length;
			for (var i = 0; i < len; ++i)
			{
				var m = transforms[i];
				ctx.save();
				ctx.transform(m[0], m[3], m[1], m[4], m[2], m[5]);
			}
			return ctx;
		}
		function nextContext(transforms)
		{
			while (i < kids.length)
			{
				var node = kids[i];
				if (node.getContext)
				{
					node.width = w * ratio;
					node.height = h * ratio;
					node.style.width = w + 'px';
					node.style.height = h + 'px';
					++i;
					return transform(transforms, node.getContext('2d'));
				}
				div.removeChild(node);
			}
			var canvas = makeCanvas(w,h);
			div.appendChild(canvas);
			// we have added a new node, so we must step our position
			++i;
			return transform(transforms, canvas.getContext('2d'));
		}
		function addElement(matrices, alpha, form)
		{
			var kid = kids[i];
			var elem = form.form._0;

			var node = (!kid || kid.getContext)
				? NativeElement.render(elem)
				: NativeElement.update(kid, kid.oldElement, elem);

			node.style.position = 'absolute';
			node.style.opacity = alpha * form.alpha * elem.props.opacity;
			NativeElement.addTransform(node.style, makeTransform(w, h, form, matrices));
			node.oldElement = elem;
			++i;
			if (!kid)
			{
				div.appendChild(node);
			}
			else
			{
				div.insertBefore(node, kid);
			}
		}
		function clearRest()
		{
			while (i < kids.length)
			{
				div.removeChild(kids[i]);
			}
		}
		return {
			nextContext: nextContext,
			addElement: addElement,
			clearRest: clearRest
		};
	}


	function update(div, _, model)
	{
		var w = model.w;
		var h = model.h;

		var forms = formStepper(model.forms);
		var nodes = nodeStepper(w,h,div);
		var ctx = null;
		var formType = '';

		while (formType = forms.peekNext())
		{
			// make sure we have context if we need it
			if (ctx === null && formType !== 'FElement')
			{
				ctx = nodes.nextContext(forms.transforms());
				ctx.globalAlpha = forms.alpha();
			}

			var form = forms.next(ctx);
			// if it is FGroup, all updates are made within formStepper when next is called.
			if (formType === 'FElement')
			{
				// update or insert an element, get a new context
				nodes.addElement(forms.transforms(), forms.alpha(), form);
				ctx = null;
			}
			else if (formType !== 'FGroup')
			{
				renderForm(function() { update(div, model, model); }, ctx, form);
			}
		}
		nodes.clearRest();
		return div;
	}


	function collage(w,h,forms)
	{
		return A3(NativeElement.newElement, w, h, {
			ctor: 'Custom',
			type: 'Collage',
			render: render,
			update: update,
			model: {w:w, h:h, forms:forms}
		});
	}

	return localRuntime.Native.Graphics.Collage.values = {
		collage: F3(collage)
	};

};


// setup
Elm.Native = Elm.Native || {};
Elm.Native.Graphics = Elm.Native.Graphics || {};
Elm.Native.Graphics.Element = Elm.Native.Graphics.Element || {};

// definition
Elm.Native.Graphics.Element.make = function(localRuntime) {
	'use strict';

	// attempt to short-circuit
	localRuntime.Native = localRuntime.Native || {};
	localRuntime.Native.Graphics = localRuntime.Native.Graphics || {};
	localRuntime.Native.Graphics.Element = localRuntime.Native.Graphics.Element || {};
	if ('values' in localRuntime.Native.Graphics.Element)
	{
		return localRuntime.Native.Graphics.Element.values;
	}

	var Color = Elm.Native.Color.make(localRuntime);
	var List = Elm.Native.List.make(localRuntime);
	var Maybe = Elm.Maybe.make(localRuntime);
	var Text = Elm.Native.Text.make(localRuntime);
	var Utils = Elm.Native.Utils.make(localRuntime);


	// CREATION

	function createNode(elementType)
	{
		var node = document.createElement(elementType);
		node.style.padding = "0";
		node.style.margin = "0";
		return node;
	}


	function newElement(width, height, elementPrim)
	{
		return {
			_: {},
			element: elementPrim,
			props: {
				_: {},
				id: Utils.guid(),
				width: width,
				height: height,
				opacity: 1,
				color: Maybe.Nothing,
				href: "",
				tag: "",
				hover: Utils.Tuple0,
				click: Utils.Tuple0
			}
		};
	}


	// PROPERTIES

	function setProps(elem, node)
	{
		var props = elem.props;

		var element = elem.element;
		var width = props.width - (element.adjustWidth || 0);
		var height = props.height - (element.adjustHeight || 0);
		node.style.width  = (width |0) + 'px';
		node.style.height = (height|0) + 'px';

		if (props.opacity !== 1)
		{
			node.style.opacity = props.opacity;
		}

		if (props.color.ctor === 'Just')
		{
			node.style.backgroundColor = Color.toCss(props.color._0);
		}

		if (props.tag !== '')
		{
			node.id = props.tag;
		}

		if (props.hover.ctor !== '_Tuple0')
		{
			addHover(node, props.hover);
		}

		if (props.click.ctor !== '_Tuple0')
		{
			addClick(node, props.click);
		}

		if (props.href !== '')
		{
			var anchor = createNode('a');
			anchor.href = props.href;
			anchor.style.display = 'block';
			anchor.style.pointerEvents = 'auto';
			anchor.appendChild(node);
			node = anchor;
		}

		return node;
	}

	function addClick(e, handler)
	{
		e.style.pointerEvents = 'auto';
		e.elm_click_handler = handler;
		function trigger(ev)
		{
			e.elm_click_handler(Utils.Tuple0);
			ev.stopPropagation();
		}
		e.elm_click_trigger = trigger;
		e.addEventListener('click', trigger);
	}

	function removeClick(e, handler)
	{
		if (e.elm_click_trigger)
		{
			e.removeEventListener('click', e.elm_click_trigger);
			e.elm_click_trigger = null;
			e.elm_click_handler = null;
		}
	}

	function addHover(e, handler)
	{
		e.style.pointerEvents = 'auto';
		e.elm_hover_handler = handler;
		e.elm_hover_count = 0;

		function over(evt)
		{
			if (e.elm_hover_count++ > 0) return;
			e.elm_hover_handler(true);
			evt.stopPropagation();
		}
		function out(evt)
		{
			if (e.contains(evt.toElement || evt.relatedTarget)) return;
			e.elm_hover_count = 0;
			e.elm_hover_handler(false);
			evt.stopPropagation();
		}
		e.elm_hover_over = over;
		e.elm_hover_out = out;
		e.addEventListener('mouseover', over);
		e.addEventListener('mouseout', out);
	}

	function removeHover(e)
	{
		e.elm_hover_handler = null;
		if (e.elm_hover_over)
		{
			e.removeEventListener('mouseover', e.elm_hover_over);
			e.elm_hover_over = null;
		}
		if (e.elm_hover_out)
		{
			e.removeEventListener('mouseout', e.elm_hover_out);
			e.elm_hover_out = null;
		}
	}


	// IMAGES

	function image(props, img)
	{
		switch (img._0.ctor)
		{
			case 'Plain':
				return plainImage(img._3);

			case 'Fitted':
				return fittedImage(props.width, props.height, img._3);

			case 'Cropped':
				return croppedImage(img,props.width,props.height,img._3);

			case 'Tiled':
				return tiledImage(img._3);
		}
	}

	function plainImage(src)
	{
		var img = createNode('img');
		img.src = src;
		img.name = src;
		img.style.display = "block";
		return img;
	}

	function tiledImage(src)
	{
		var div = createNode('div');
		div.style.backgroundImage = 'url(' + src + ')';
		return div;
	}

	function fittedImage(w, h, src)
	{
		var div = createNode('div');
		div.style.background = 'url(' + src + ') no-repeat center';
		div.style.webkitBackgroundSize = 'cover';
		div.style.MozBackgroundSize = 'cover';
		div.style.OBackgroundSize = 'cover';
		div.style.backgroundSize = 'cover';
		return div;
	}

	function croppedImage(elem, w, h, src)
	{
		var pos = elem._0._0;
		var e = createNode('div');
		e.style.overflow = "hidden";

		var img = createNode('img');
		img.onload = function() {
			var sw = w / elem._1, sh = h / elem._2;
			img.style.width = ((this.width * sw)|0) + 'px';
			img.style.height = ((this.height * sh)|0) + 'px';
			img.style.marginLeft = ((- pos._0 * sw)|0) + 'px';
			img.style.marginTop = ((- pos._1 * sh)|0) + 'px';
		};
		img.src = src;
		img.name = src;
		e.appendChild(img);
		return e;
	}


	// FLOW

	function goOut(node)
	{
		node.style.position = 'absolute';
		return node;
	}
	function goDown(node)
	{
		return node;
	}
	function goRight(node)
	{
		node.style.styleFloat = 'left';
		node.style.cssFloat = 'left';
		return node;
	}

	var directionTable = {
		DUp    : goDown,
		DDown  : goDown,
		DLeft  : goRight,
		DRight : goRight,
		DIn    : goOut,
		DOut   : goOut
	};
	function needsReversal(dir)
	{
		return dir == 'DUp' || dir == 'DLeft' || dir == 'DIn';
	}

	function flow(dir,elist)
	{
		var array = List.toArray(elist);
		var container = createNode('div');
		var goDir = directionTable[dir];
		if (goDir == goOut)
		{
			container.style.pointerEvents = 'none';
		}
		if (needsReversal(dir))
		{
			array.reverse();
		}
		var len = array.length;
		for (var i = 0; i < len; ++i)
		{
			container.appendChild(goDir(render(array[i])));
		}
		return container;
	}


	// CONTAINER

	function toPos(pos)
	{
		return pos.ctor === "Absolute"
			? pos._0 + "px"
			: (pos._0 * 100) + "%";
	}

	// must clear right, left, top, bottom, and transform
	// before calling this function
	function setPos(pos,elem,e)
	{
		var element = elem.element;
		var props = elem.props;
		var w = props.width + (element.adjustWidth ? element.adjustWidth : 0);
		var h = props.height + (element.adjustHeight ? element.adjustHeight : 0);

		e.style.position = 'absolute';
		e.style.margin = 'auto';
		var transform = '';

		switch (pos.horizontal.ctor)
		{
			case 'P':
				e.style.right = toPos(pos.x);
				e.style.removeProperty('left');
				break;

			case 'Z':
				transform = 'translateX(' + ((-w/2)|0) + 'px) ';

			case 'N':
				e.style.left = toPos(pos.x);
				e.style.removeProperty('right');
				break;
		}
		switch (pos.vertical.ctor)
		{
			case 'N':
				e.style.bottom = toPos(pos.y);
				e.style.removeProperty('top');
				break;

			case 'Z':
				transform += 'translateY(' + ((-h/2)|0) + 'px)';

			case 'P':
				e.style.top = toPos(pos.y);
				e.style.removeProperty('bottom');
				break;
		}
		if (transform !== '')
		{
			addTransform(e.style, transform);
		}
		return e;
	}

	function addTransform(style, transform)
	{
		style.transform       = transform;
		style.msTransform     = transform;
		style.MozTransform    = transform;
		style.webkitTransform = transform;
		style.OTransform      = transform;
	}

	function container(pos,elem)
	{
		var e = render(elem);
		setPos(pos, elem, e);
		var div = createNode('div');
		div.style.position = 'relative';
		div.style.overflow = 'hidden';
		div.appendChild(e);
		return div;
	}


	function rawHtml(elem)
	{
		var html = elem.html;
		var guid = elem.guid;
		var align = elem.align;

		var div = createNode('div');
		div.innerHTML = html;
		div.style.visibility = "hidden";
		if (align)
		{
			div.style.textAlign = align;
		}
		div.style.visibility = 'visible';
		div.style.pointerEvents = 'auto';
		return div;
	}


	// RENDER

	function render(elem)
	{
		return setProps(elem, makeElement(elem));
	}
	function makeElement(e)
	{
		var elem = e.element;
		switch(elem.ctor)
		{
			case 'Image':
				return image(e.props, elem);

			case 'Flow':
				return flow(elem._0.ctor, elem._1);

			case 'Container':
				return container(elem._0, elem._1);

			case 'Spacer':
				return createNode('div');

			case 'RawHtml':
				return rawHtml(elem);

			case 'Custom':
				return elem.render(elem.model);
		}
	}

	function updateAndReplace(node, curr, next)
	{
		var newNode = update(node, curr, next);
		if (newNode !== node)
		{
			node.parentNode.replaceChild(newNode, node);
		}
		return newNode;
	}


	// UPDATE

	function update(node, curr, next)
	{
		var rootNode = node;
		if (node.tagName === 'A')
		{
			node = node.firstChild;
		}
		if (curr.props.id === next.props.id)
		{
			updateProps(node, curr, next);
			return rootNode;
		}
		if (curr.element.ctor !== next.element.ctor)
		{
			return render(next);
		}
		var nextE = next.element;
		var currE = curr.element;
		switch(nextE.ctor)
		{
			case "Spacer":
				updateProps(node, curr, next);
				return rootNode;

			case "RawHtml":
				if(currE.html.valueOf() !== nextE.html.valueOf())
				{
					node.innerHTML = nextE.html;
				}
				updateProps(node, curr, next);
				return rootNode;

			case "Image":
				if (nextE._0.ctor === 'Plain')
				{
					if (nextE._3 !== currE._3)
					{
						node.src = nextE._3;
					}
				}
				else if (!Utils.eq(nextE,currE)
					|| next.props.width !== curr.props.width
					|| next.props.height !== curr.props.height)
				{
					return render(next);
				}
				updateProps(node, curr, next);
				return rootNode;

			case "Flow":
				var arr = List.toArray(nextE._1);
				for (var i = arr.length; i--; )
				{
					arr[i] = arr[i].element.ctor;
				}
				if (nextE._0.ctor !== currE._0.ctor)
				{
					return render(next);
				}
				var nexts = List.toArray(nextE._1);
				var kids = node.childNodes;
				if (nexts.length !== kids.length)
				{
					return render(next);
				}
				var currs = List.toArray(currE._1);
				var dir = nextE._0.ctor;
				var goDir = directionTable[dir];
				var toReverse = needsReversal(dir);
				var len = kids.length;
				for (var i = len; i-- ;)
				{
					var subNode = kids[toReverse ? len - i - 1 : i];
					goDir(updateAndReplace(subNode, currs[i], nexts[i]));
				}
				updateProps(node, curr, next);
				return rootNode;

			case "Container":
				var subNode = node.firstChild;
				var newSubNode = updateAndReplace(subNode, currE._1, nextE._1);
				setPos(nextE._0, nextE._1, newSubNode);
				updateProps(node, curr, next);
				return rootNode;

			case "Custom":
				if (currE.type === nextE.type)
				{
					var updatedNode = nextE.update(node, currE.model, nextE.model);
					updateProps(updatedNode, curr, next);
					return updatedNode;
				}
				return render(next);
		}
	}

	function updateProps(node, curr, next)
	{
		var nextProps = next.props;
		var currProps = curr.props;

		var element = next.element;
		var width = nextProps.width - (element.adjustWidth || 0);
		var height = nextProps.height - (element.adjustHeight || 0);
		if (width !== currProps.width)
		{
			node.style.width = (width|0) + 'px';
		}
		if (height !== currProps.height)
		{
			node.style.height = (height|0) + 'px';
		}

		if (nextProps.opacity !== currProps.opacity)
		{
			node.style.opacity = nextProps.opacity;
		}

		var nextColor = nextProps.color.ctor === 'Just'
			? Color.toCss(nextProps.color._0)
			: '';
		if (node.style.backgroundColor !== nextColor)
		{
			node.style.backgroundColor = nextColor;
		}

		if (nextProps.tag !== currProps.tag)
		{
			node.id = nextProps.tag;
		}

		if (nextProps.href !== currProps.href)
		{
			if (currProps.href === '')
			{
				// add a surrounding href
				var anchor = createNode('a');
				anchor.href = nextProps.href;
				anchor.style.display = 'block';
				anchor.style.pointerEvents = 'auto';

				node.parentNode.replaceChild(anchor, node);
				anchor.appendChild(node);
			}
			else if (nextProps.href === '')
			{
				// remove the surrounding href
				var anchor = node.parentNode;
				anchor.parentNode.replaceChild(node, anchor);
			}
			else
			{
				// just update the link
				node.parentNode.href = nextProps.href;
			}
		}

		// update click and hover handlers
		var removed = false;

		// update hover handlers
		if (currProps.hover.ctor === '_Tuple0')
		{
			if (nextProps.hover.ctor !== '_Tuple0')
			{
				addHover(node, nextProps.hover);
			}
		}
		else
		{
			if (nextProps.hover.ctor === '_Tuple0')
			{
				removed = true;
				removeHover(node);
			}
			else
			{
				node.elm_hover_handler = nextProps.hover;
			}
		}

		// update click handlers
		if (currProps.click.ctor === '_Tuple0')
		{
			if (nextProps.click.ctor !== '_Tuple0')
			{
				addClick(node, nextProps.click);
			}
		}
		else
		{
			if (nextProps.click.ctor === '_Tuple0')
			{
				removed = true;
				removeClick(node);
			}
			else
			{
				node.elm_click_handler = nextProps.click;
			}
		}

		// stop capturing clicks if
		if (removed
			&& nextProps.hover.ctor === '_Tuple0'
			&& nextProps.click.ctor === '_Tuple0')
		{
			node.style.pointerEvents = 'none';
		}
	}


	// TEXT

	function block(align)
	{
		return function(text)
		{
			var raw = {
				ctor :'RawHtml',
				html : Text.renderHtml(text),
				align: align
			};
			var pos = htmlHeight(0, raw);
			return newElement(pos._0, pos._1, raw);
		}
	}

	function markdown(text)
	{
		var raw = {
			ctor:'RawHtml',
			html: text,
			align: null
		};
		var pos = htmlHeight(0, raw);
		return newElement(pos._0, pos._1, raw);
	}

	function htmlHeight(width, rawHtml)
	{
		// create dummy node
		var temp = document.createElement('div');
		temp.innerHTML = rawHtml.html;
		if (width > 0)
		{
			temp.style.width = width + "px";
		}
		temp.style.visibility = "hidden";
		temp.style.styleFloat = "left";
		temp.style.cssFloat   = "left";

		document.body.appendChild(temp);

		// get dimensions
		var style = window.getComputedStyle(temp, null);
		var w = Math.ceil(style.getPropertyValue("width").slice(0,-2) - 0);
		var h = Math.ceil(style.getPropertyValue("height").slice(0,-2) - 0);
		document.body.removeChild(temp);
		return Utils.Tuple2(w,h);
	}


	return localRuntime.Native.Graphics.Element.values = {
		render: render,
		update: update,
		updateAndReplace: updateAndReplace,

		createNode: createNode,
		newElement: F3(newElement),
		addTransform: addTransform,
		htmlHeight: F2(htmlHeight),
		guid: Utils.guid,

		block: block,
		markdown: markdown
	};

};

// setup
Elm.Native = Elm.Native || {};
Elm.Native.Graphics = Elm.Native.Graphics || {};
Elm.Native.Graphics.Input = Elm.Native.Graphics.Input || {};

// definition
Elm.Native.Graphics.Input.make = function(localRuntime) {
	'use strict';

	// attempt to short-circuit
	if ('values' in Elm.Native.Graphics.Input) {
		return Elm.Native.Graphics.Input.values;
	}

	var Color = Elm.Native.Color.make(localRuntime);
	var List = Elm.Native.List.make(localRuntime);
	var Signal = Elm.Native.Signal.make(localRuntime);
	var Text = Elm.Native.Text.make(localRuntime);
	var Utils = Elm.Native.Utils.make(localRuntime);

	var Element = Elm.Native.Graphics.Element.make(localRuntime);


	function renderDropDown(model)
	{
		var drop = Element.createNode('select');
    // rkc begin: seems to be ignored by WebKit
    drop.style["font-family"] = 'Tahoma, sans-serif';
    drop.style["font-size"] = '10pt';
    // rkc end
		drop.style.border = '0 solid';
		drop.style.pointerEvents = 'auto';
		drop.style.display = 'block';

		drop.elm_values = List.toArray(model.values);
		drop.elm_handler = model.handler;
		var values = drop.elm_values;

		for (var i = 0; i < values.length; ++i)
		{
			var option = Element.createNode('option');
			var name = values[i]._0;
      // rkc begin: seems to be ignored by WebKit
      option.style["font-family"] = 'Tahoma, sans-serif';
      option.style["font-size"] = '10pt';
      // rkc end
			option.value = name;
			option.innerHTML = name;
			drop.appendChild(option);
		}
		drop.addEventListener('change', function() {
			Signal.sendMessage(drop.elm_handler(drop.elm_values[drop.selectedIndex]._1));
		});

		return drop;
	}

	function updateDropDown(node, oldModel, newModel)
	{
		node.elm_values = List.toArray(newModel.values);
		node.elm_handler = newModel.handler;

		var values = node.elm_values;
		var kids = node.childNodes;
		var kidsLength = kids.length;

		var i = 0;
		for (; i < kidsLength && i < values.length; ++i)
		{
			var option = kids[i];
			var name = values[i]._0;
			option.value = name;
			option.innerHTML = name;
		}
		for (; i < kidsLength; ++i)
		{
			node.removeChild(node.lastChild);
		}
		for (; i < values.length; ++i)
		{
			var option = Element.createNode('option');
			var name = values[i]._0;
			option.value = name;
			option.innerHTML = name;
			node.appendChild(option);
		}
		return node;
	}

	function dropDown(handler, values)
	{
		return A3(Element.newElement, 100, 24, {
			ctor: 'Custom',
			type: 'DropDown',
			render: renderDropDown,
			update: updateDropDown,
			model: {
				values: values,
				handler: handler
			}
		});
	}

	function renderButton(model)
	{
		var node = Element.createNode('button');
		node.style.display = 'block';
		node.style.pointerEvents = 'auto';
		node.elm_message = model.message;
		function click()
		{
			Signal.sendMessage(node.elm_message);
		}
		node.addEventListener('click', click);
		node.innerHTML = model.text;
		return node;
	}

	function updateButton(node, oldModel, newModel)
	{
		node.elm_message = newModel.message;
		var txt = newModel.text;
		if (oldModel.text !== txt)
		{
			node.innerHTML = txt;
		}
		return node;
	}

	function button(message, text)
	{
		return A3(Element.newElement, 100, 40, {
			ctor: 'Custom',
			type: 'Button',
			render: renderButton,
			update: updateButton,
			model: {
				message: message,
				text:text
			}
		});
	}

	function renderCustomButton(model)
	{
		var btn = Element.createNode('div');
		btn.style.pointerEvents = 'auto';
		btn.elm_message = model.message;

		btn.elm_up    = Element.render(model.up);
		btn.elm_hover = Element.render(model.hover);
		btn.elm_down  = Element.render(model.down);

		btn.elm_up.style.display = 'block';
		btn.elm_hover.style.display = 'none';
		btn.elm_down.style.display = 'none';

		btn.appendChild(btn.elm_up);
		btn.appendChild(btn.elm_hover);
		btn.appendChild(btn.elm_down);

		function swap(visibleNode, hiddenNode1, hiddenNode2)
		{
			visibleNode.style.display = 'block';
			hiddenNode1.style.display = 'none';
			hiddenNode2.style.display = 'none';
		}

		var overCount = 0;
		function over(e)
		{
			if (overCount++ > 0) return;
			swap(btn.elm_hover, btn.elm_down, btn.elm_up);
		}
		function out(e)
		{
			if (btn.contains(e.toElement || e.relatedTarget)) return;
			overCount = 0;
			swap(btn.elm_up, btn.elm_down, btn.elm_hover);
		}
		function up()
		{
			swap(btn.elm_hover, btn.elm_down, btn.elm_up);
			Signal.sendMessage(btn.elm_message);
		}
		function down()
		{
			swap(btn.elm_down, btn.elm_hover, btn.elm_up);
		}

		btn.addEventListener('mouseover', over);
		btn.addEventListener('mouseout' , out);
		btn.addEventListener('mousedown', down);
		btn.addEventListener('mouseup'  , up);

		return btn;
	}

	function updateCustomButton(node, oldModel, newModel)
	{
		node.elm_message = newModel.message;

		var kids = node.childNodes;
		var styleUp    = kids[0].style.display;
		var styleHover = kids[1].style.display;
		var styleDown  = kids[2].style.display;

		Element.updateAndReplace(kids[0], oldModel.up, newModel.up);
		Element.updateAndReplace(kids[1], oldModel.hover, newModel.hover);
		Element.updateAndReplace(kids[2], oldModel.down, newModel.down);

		var kids = node.childNodes;
		kids[0].style.display = styleUp;
		kids[1].style.display = styleHover;
		kids[2].style.display = styleDown;

		return node;
	}

	function max3(a,b,c)
	{
		var ab = a > b ? a : b;
		return ab > c ? ab : c;
	}

	function customButton(message, up, hover, down)
	{
		return A3(Element.newElement,
				  max3(up.props.width, hover.props.width, down.props.width),
				  max3(up.props.height, hover.props.height, down.props.height),
				  { ctor: 'Custom',
					type: 'CustomButton',
					render: renderCustomButton,
					update: updateCustomButton,
					model: {
						message: message,
						up: up,
						hover: hover,
						down: down
					}
				  });
	}

	function renderCheckbox(model)
	{
		var node = Element.createNode('input');
		node.type = 'checkbox';
		node.checked = model.checked;
		node.style.display = 'block';
		node.style.pointerEvents = 'auto';
		node.elm_handler = model.handler;
		function change()
		{
			Signal.sendMessage(node.elm_handler(node.checked));
		}
		node.addEventListener('change', change);
		return node;
	}

	function updateCheckbox(node, oldModel, newModel)
	{
		node.elm_handler = newModel.handler;
		node.checked = newModel.checked;
		return node;
	}

	function checkbox(handler, checked)
	{
		return A3(Element.newElement, 13, 13, {
			ctor: 'Custom',
			type: 'CheckBox',
			render: renderCheckbox,
			update: updateCheckbox,
			model: { handler:handler, checked:checked }
		});
	}

	function setRange(node, start, end, dir)
	{
		if (node.parentNode)
		{
			node.setSelectionRange(start, end, dir);
		}
		else
		{
			setTimeout(function(){node.setSelectionRange(start, end, dir);}, 0);
		}
	}

	function updateIfNeeded(css, attribute, latestAttribute)
	{
		if (css[attribute] !== latestAttribute)
		{
			css[attribute] = latestAttribute;
		}
	}
	function cssDimensions(dimensions)
	{
		return dimensions.top    + 'px ' +
			   dimensions.right  + 'px ' +
			   dimensions.bottom + 'px ' +
			   dimensions.left   + 'px';
	}
	function updateFieldStyle(css, style)
	{
		updateIfNeeded(css, 'padding', cssDimensions(style.padding));

		var outline = style.outline;
		updateIfNeeded(css, 'border-width', cssDimensions(outline.width));
		updateIfNeeded(css, 'border-color', Color.toCss(outline.color));
		updateIfNeeded(css, 'border-radius', outline.radius + 'px');

		var highlight = style.highlight;
		if (highlight.width === 0)
		{
			css.outline = 'none';
		}
		else
		{
			updateIfNeeded(css, 'outline-width', highlight.width + 'px');
			updateIfNeeded(css, 'outline-color', Color.toCss(highlight.color));
		}

		var textStyle = style.style;
		updateIfNeeded(css, 'color', Color.toCss(textStyle.color));
		if (textStyle.typeface.ctor !== '[]')
		{
			updateIfNeeded(css, 'font-family', Text.toTypefaces(textStyle.typeface));
		}
		if (textStyle.height.ctor !== "Nothing")
		{
			updateIfNeeded(css, 'font-size', textStyle.height._0 + 'px');
		}
		updateIfNeeded(css, 'font-weight', textStyle.bold ? 'bold' : 'normal');
		updateIfNeeded(css, 'font-style', textStyle.italic ? 'italic' : 'normal');
		if (textStyle.line.ctor !== 'Nothing')
		{
			updateIfNeeded(css, 'text-decoration', Text.toLine(textStyle.line._0));
		}
	}

	function renderField(model)
	{
		var field = Element.createNode('input');
		updateFieldStyle(field.style, model.style);
		field.style.borderStyle = 'solid';
		field.style.pointerEvents = 'auto';

		field.type = model.type;
		field.placeholder = model.placeHolder;
		field.value = model.content.string;

		field.elm_handler = model.handler;
		field.elm_old_value = field.value;

		function inputUpdate(event)
		{
			var curr = field.elm_old_value;
			var next = field.value;
			if (curr === next)
			{
				return;
			}

			var direction = field.selectionDirection === 'forward' ? 'Forward' : 'Backward';
			var start = field.selectionStart;
			var end = field.selectionEnd;
			field.value = field.elm_old_value;

			Signal.sendMessage(field.elm_handler({
				_:{},
				string: next,
				selection: {
					_:{},
					start: start,
					end: end,
					direction: { ctor: direction }
				}
			}));
		}

		field.addEventListener('input', inputUpdate);
		field.addEventListener('focus', function() {
			field.elm_hasFocus = true;
		});
		field.addEventListener('blur', function() {
			field.elm_hasFocus = false;
		});

		return field;
	}

	function updateField(field, oldModel, newModel)
	{
		if (oldModel.style !== newModel.style)
		{
			updateFieldStyle(field.style, newModel.style);
		}
		field.elm_handler = newModel.handler;

		field.type = newModel.type;
		field.placeholder = newModel.placeHolder;
		var value = newModel.content.string;
		field.value = value;
		field.elm_old_value = value;
		if (field.elm_hasFocus)
		{
			var selection = newModel.content.selection;
			var direction = selection.direction.ctor === 'Forward' ? 'forward' : 'backward';
			setRange(field, selection.start, selection.end, direction);
		}
		return field;
	}

	function mkField(type)
	{
		function field(style, handler, placeHolder, content)
		{
			var padding = style.padding;
			var outline = style.outline.width;
			var adjustWidth = padding.left + padding.right + outline.left + outline.right;
			var adjustHeight = padding.top + padding.bottom + outline.top + outline.bottom;
			return A3(Element.newElement, 200, 30, {
				ctor: 'Custom',
				type: type + 'Field',
				adjustWidth: adjustWidth,
				adjustHeight: adjustHeight,
				render: renderField,
				update: updateField,
				model: {
					handler:handler,
					placeHolder:placeHolder,
					content:content,
					style:style,
					type:type
				}
			});
		}
		return F4(field);
	}

	function hoverable(handler, elem)
	{
		function onHover(bool)
		{
			Signal.sendMessage(handler(bool));
		}
		var props = Utils.replace([['hover',onHover]], elem.props);
		return {
			props: props,
			element: elem.element
		};
	}

	function clickable(message, elem)
	{
		function onClick()
		{
			Signal.sendMessage(message);
		}
		var props = Utils.replace([['click',onClick]], elem.props);
		return {
			props: props,
			element: elem.element
		};
	}

	return Elm.Native.Graphics.Input.values = {
		button: F2(button),
		customButton: F4(customButton),
		checkbox: F2(checkbox),
		dropDown: F2(dropDown),
		field: mkField('text'),
		email: mkField('email'),
		password: mkField('password'),
		hoverable: F2(hoverable),
		clickable: F2(clickable)
	};

};

Elm.Native.Json = {};
Elm.Native.Json.make = function(localRuntime) {

	localRuntime.Native = localRuntime.Native || {};
	localRuntime.Native.Json = localRuntime.Native.Json || {};
	if (localRuntime.Native.Json.values) {
		return localRuntime.Native.Json.values;
	}

	var ElmArray = Elm.Native.Array.make(localRuntime);
	var List = Elm.Native.List.make(localRuntime);
	var Maybe = Elm.Maybe.make(localRuntime);
	var Result = Elm.Result.make(localRuntime);
	var Utils = Elm.Native.Utils.make(localRuntime);


	function crash(expected, actual) {
		throw new Error(
			'expecting ' + expected + ' but got ' + JSON.stringify(actual)
		);
	}


	// PRIMITIVE VALUES

	function decodeNull(successValue) {
		return function(value) {
			if (value === null) {
				return successValue;
			}
			crash('null', value);
		};
	}


	function decodeString(value) {
		if (typeof value === 'string' || value instanceof String) {
			return value;
		}
		crash('a String', value);
	}


	function decodeFloat(value) {
		if (typeof value === 'number') {
			return value;
		}
		crash('a Float', value);
	}


	function decodeInt(value) {
		if (typeof value === 'number' && (value|0) === value) {
			return value;
		}
		crash('an Int', value);
	}


	function decodeBool(value) {
		if (typeof value === 'boolean') {
			return value;
		}
		crash('a Bool', value);
	}


	// ARRAY

	function decodeArray(decoder) {
		return function(value) {
			if (value instanceof Array) {
				var len = value.length;
				var array = new Array(len);
				for (var i = len; i-- ; ) {
					array[i] = decoder(value[i]);
				}
				return ElmArray.fromJSArray(array);
			}
			crash('an Array', value);
		};
	}


	// LIST

	function decodeList(decoder) {
		return function(value) {
			if (value instanceof Array) {
				var len = value.length;
				var list = List.Nil;
				for (var i = len; i-- ; ) {
					list = List.Cons( decoder(value[i]), list );
				}
				return list;
			}
			crash('a List', value);
		};
	}


	// MAYBE

	function decodeMaybe(decoder) {
		return function(value) {
			try {
				return Maybe.Just(decoder(value));
			} catch(e) {
				return Maybe.Nothing;
			}
		};
	}


	// FIELDS

	function decodeField(field, decoder) {
		return function(value) {
			var subValue = value[field];
			if (subValue !== undefined) {
				return decoder(subValue);
			}
			crash("an object with field '" + field + "'", value);
		};
	}


	// OBJECTS

	function decodeKeyValuePairs(decoder) {
		return function(value) {
			var isObject =
				typeof value === 'object'
					&& value !== null
					&& !(value instanceof Array);

			if (isObject) {
				var keyValuePairs = List.Nil;
				for (var key in value) {
					var elmValue = decoder(value[key]);
					var pair = Utils.Tuple2(key, elmValue);
					keyValuePairs = List.Cons(pair, keyValuePairs);
				}
				return keyValuePairs;
			}

			crash("an object", value);
		};
	}

	function decodeObject1(f, d1) {
		return function(value) {
			return f(d1(value));
		};
	}

	function decodeObject2(f, d1, d2) {
		return function(value) {
			return A2( f, d1(value), d2(value) );
		};
	}

	function decodeObject3(f, d1, d2, d3) {
		return function(value) {
			return A3( f, d1(value), d2(value), d3(value) );
		};
	}

	function decodeObject4(f, d1, d2, d3, d4) {
		return function(value) {
			return A4( f, d1(value), d2(value), d3(value), d4(value) );
		};
	}

	function decodeObject5(f, d1, d2, d3, d4, d5) {
		return function(value) {
			return A5( f, d1(value), d2(value), d3(value), d4(value), d5(value) );
		};
	}

	function decodeObject6(f, d1, d2, d3, d4, d5, d6) {
		return function(value) {
			return A6( f,
				d1(value),
				d2(value),
				d3(value),
				d4(value),
				d5(value),
				d6(value)
			);
		};
	}

	function decodeObject7(f, d1, d2, d3, d4, d5, d6, d7) {
		return function(value) {
			return A7( f,
				d1(value),
				d2(value),
				d3(value),
				d4(value),
				d5(value),
				d6(value),
				d7(value)
			);
		};
	}

	function decodeObject8(f, d1, d2, d3, d4, d5, d6, d7, d8) {
		return function(value) {
			return A8( f,
				d1(value),
				d2(value),
				d3(value),
				d4(value),
				d5(value),
				d6(value),
				d7(value),
				d8(value)
			);
		};
	}


	// TUPLES

	function decodeTuple1(f, d1) {
		return function(value) {
			if ( !(value instanceof Array) || value.length !== 1 ) {
				crash('a Tuple of length 1', value);
			}
			return f( d1(value[0]) );
		};
	}

	function decodeTuple2(f, d1, d2) {
		return function(value) {
			if ( !(value instanceof Array) || value.length !== 2 ) {
				crash('a Tuple of length 2', value);
			}
			return A2( f, d1(value[0]), d2(value[1]) );
		};
	}

	function decodeTuple3(f, d1, d2, d3) {
		return function(value) {
			if ( !(value instanceof Array) || value.length !== 3 ) {
				crash('a Tuple of length 3', value);
			}
			return A3( f, d1(value[0]), d2(value[1]), d3(value[2]) );
		};
	}


	function decodeTuple4(f, d1, d2, d3, d4) {
		return function(value) {
			if ( !(value instanceof Array) || value.length !== 4 ) {
				crash('a Tuple of length 4', value);
			}
			return A4( f, d1(value[0]), d2(value[1]), d3(value[2]), d4(value[3]) );
		};
	}


	function decodeTuple5(f, d1, d2, d3, d4, d5) {
		return function(value) {
			if ( !(value instanceof Array) || value.length !== 5 ) {
				crash('a Tuple of length 5', value);
			}
			return A5( f,
				d1(value[0]),
				d2(value[1]),
				d3(value[2]),
				d4(value[3]),
				d5(value[4])
			);
		};
	}


	function decodeTuple6(f, d1, d2, d3, d4, d5, d6) {
		return function(value) {
			if ( !(value instanceof Array) || value.length !== 6 ) {
				crash('a Tuple of length 6', value);
			}
			return A6( f,
				d1(value[0]),
				d2(value[1]),
				d3(value[2]),
				d4(value[3]),
				d5(value[4]),
				d6(value[5])
			);
		};
	}

	function decodeTuple7(f, d1, d2, d3, d4, d5, d6, d7) {
		return function(value) {
			if ( !(value instanceof Array) || value.length !== 7 ) {
				crash('a Tuple of length 7', value);
			}
			return A7( f,
				d1(value[0]),
				d2(value[1]),
				d3(value[2]),
				d4(value[3]),
				d5(value[4]),
				d6(value[5]),
				d7(value[6])
			);
		};
	}


	function decodeTuple8(f, d1, d2, d3, d4, d5, d6, d7, d8) {
		return function(value) {
			if ( !(value instanceof Array) || value.length !== 8 ) {
				crash('a Tuple of length 8', value);
			}
			return A8( f,
				d1(value[0]),
				d2(value[1]),
				d3(value[2]),
				d4(value[3]),
				d5(value[4]),
				d6(value[5]),
				d7(value[6]),
				d8(value[7])
			);
		};
	}


	// CUSTOM DECODERS

	function decodeValue(value) {
		return value;
	}

	function runDecoderValue(decoder, value) {
		try {
			return Result.Ok(decoder(value));
		} catch(e) {
			return Result.Err(e.message);
		}
	}

	function customDecoder(decoder, callback) {
		return function(value) {
			var result = callback(decoder(value));
			if (result.ctor === 'Err') {
				throw new Error('custom decoder failed: ' + result._0);
			}
			return result._0;
		}
	}

	function andThen(decode, callback) {
		return function(value) {
			var result = decode(value);
			return callback(result)(value);
		}
	}

	function fail(msg) {
		return function(value) {
			throw new Error(msg);
		}
	}

	function succeed(successValue) {
		return function(value) {
			return successValue;
		}
	}


	// ONE OF MANY

	function oneOf(decoders) {
		return function(value) {
			var errors = [];
			var temp = decoders;
			while (temp.ctor !== '[]') {
				try {
					return temp._0(value);
				} catch(e) {
					errors.push(e.message);
				}
				temp = temp._1;
			}
			throw new Error('expecting one of the following:\n    ' + errors.join('\n    '));
		}
	}

	function get(decoder, value) {
		try {
			return Result.Ok(decoder(value));
		} catch(e) {
			return Result.Err(e.message);
		}
	}


	// ENCODE / DECODE

	function runDecoderString(decoder, string) {
		try {
			return Result.Ok(decoder(JSON.parse(string)));
		} catch(e) {
			return Result.Err(e.message);
		}
	}

	function encode(indentLevel, value) {
		return JSON.stringify(value, null, indentLevel);
	}

	function identity(value) {
		return value;
	}

	function encodeObject(keyValuePairs) {
		var obj = {};
		while (keyValuePairs.ctor !== '[]') {
			var pair = keyValuePairs._0;
			obj[pair._0] = pair._1;
			keyValuePairs = keyValuePairs._1;
		}
		return obj;
	}

	return localRuntime.Native.Json.values = {
		encode: F2(encode),
		runDecoderString: F2(runDecoderString),
		runDecoderValue: F2(runDecoderValue),

		get: F2(get),
		oneOf: oneOf,

		decodeNull: decodeNull,
		decodeInt: decodeInt,
		decodeFloat: decodeFloat,
		decodeString: decodeString,
		decodeBool: decodeBool,

		decodeMaybe: decodeMaybe,

		decodeList: decodeList,
		decodeArray: decodeArray,

		decodeField: F2(decodeField),

		decodeObject1: F2(decodeObject1),
		decodeObject2: F3(decodeObject2),
		decodeObject3: F4(decodeObject3),
		decodeObject4: F5(decodeObject4),
		decodeObject5: F6(decodeObject5),
		decodeObject6: F7(decodeObject6),
		decodeObject7: F8(decodeObject7),
		decodeObject8: F9(decodeObject8),
		decodeKeyValuePairs: decodeKeyValuePairs,

		decodeTuple1: F2(decodeTuple1),
		decodeTuple2: F3(decodeTuple2),
		decodeTuple3: F4(decodeTuple3),
		decodeTuple4: F5(decodeTuple4),
		decodeTuple5: F6(decodeTuple5),
		decodeTuple6: F7(decodeTuple6),
		decodeTuple7: F8(decodeTuple7),
		decodeTuple8: F9(decodeTuple8),

		andThen: F2(andThen),
		decodeValue: decodeValue,
		customDecoder: F2(customDecoder),
		fail: fail,
		succeed: succeed,

		identity: identity,
		encodeNull: null,
		encodeArray: ElmArray.toJSArray,
		encodeList: List.toArray,
		encodeObject: encodeObject

	};

};

Elm.Native.Lazy = {};
Elm.Native.Lazy.make = function(localRuntime) {

    localRuntime.Native = localRuntime.Native || {};
    localRuntime.Native.Lazy = localRuntime.Native.Lazy || {};
    if (localRuntime.Native.Lazy.values) {
        return localRuntime.Native.Lazy.values;
    }

    function memoize(thunk) {
        var value;
        var isForced = false;
        return function(tuple0) {
            if (!isForced) {
                value = thunk(tuple0);
                isForced = true;
            }
            return value;
        };
    }

    return localRuntime.Native.Lazy.values = {
        memoize: memoize
    };
};

Elm.Native.List = {};
Elm.Native.List.make = function(localRuntime) {
	localRuntime.Native = localRuntime.Native || {};
	localRuntime.Native.List = localRuntime.Native.List || {};
	if (localRuntime.Native.List.values)
	{
		return localRuntime.Native.List.values;
	}
	if ('values' in Elm.Native.List)
	{
		return localRuntime.Native.List.values = Elm.Native.List.values;
	}

	var Utils = Elm.Native.Utils.make(localRuntime);

	var Nil = Utils.Nil;
	var Cons = Utils.Cons;

	function toArray(xs)
	{
		var out = [];
		while (xs.ctor !== '[]')
		{
			out.push(xs._0);
			xs = xs._1;
		}
		return out;
	}

	function fromArray(arr)
	{
		var out = Nil;
		for (var i = arr.length; i--; )
		{
			out = Cons(arr[i], out);
		}
		return out;
	}

	function range(lo,hi)
	{
		var lst = Nil;
		if (lo <= hi)
		{
			do { lst = Cons(hi,lst) } while (hi-->lo);
		}
		return lst
	}

	// f defined similarly for both foldl and foldr (NB: different from Haskell)
	// ie, foldl : (a -> b -> b) -> b -> [a] -> b
	function foldl(f, b, xs)
	{
		var acc = b;
		while (xs.ctor !== '[]')
		{
			acc = A2(f, xs._0, acc);
			xs = xs._1;
		}
		return acc;
	}

	function foldr(f, b, xs)
	{
		var arr = toArray(xs);
		var acc = b;
		for (var i = arr.length; i--; )
		{
			acc = A2(f, arr[i], acc);
		}
		return acc;
	}

	function any(pred, xs)
	{
		while (xs.ctor !== '[]')
		{
			if (pred(xs._0))
			{
				return true;
			}
			xs = xs._1;
		}
		return false;
	}

	function map2(f, xs, ys)
	{
		var arr = [];
		while (xs.ctor !== '[]' && ys.ctor !== '[]')
		{
			arr.push(A2(f, xs._0, ys._0));
			xs = xs._1;
			ys = ys._1;
		}
		return fromArray(arr);
	}

	function map3(f, xs, ys, zs)
	{
		var arr = [];
		while (xs.ctor !== '[]' && ys.ctor !== '[]' && zs.ctor !== '[]')
		{
			arr.push(A3(f, xs._0, ys._0, zs._0));
			xs = xs._1;
			ys = ys._1;
			zs = zs._1;
		}
		return fromArray(arr);
	}

	function map4(f, ws, xs, ys, zs)
	{
		var arr = [];
		while (   ws.ctor !== '[]'
			   && xs.ctor !== '[]'
			   && ys.ctor !== '[]'
			   && zs.ctor !== '[]')
		{
			arr.push(A4(f, ws._0, xs._0, ys._0, zs._0));
			ws = ws._1;
			xs = xs._1;
			ys = ys._1;
			zs = zs._1;
		}
		return fromArray(arr);
	}

	function map5(f, vs, ws, xs, ys, zs)
	{
		var arr = [];
		while (   vs.ctor !== '[]'
			   && ws.ctor !== '[]'
			   && xs.ctor !== '[]'
			   && ys.ctor !== '[]'
			   && zs.ctor !== '[]')
		{
			arr.push(A5(f, vs._0, ws._0, xs._0, ys._0, zs._0));
			vs = vs._1;
			ws = ws._1;
			xs = xs._1;
			ys = ys._1;
			zs = zs._1;
		}
		return fromArray(arr);
	}

	function sortBy(f, xs)
	{
		return fromArray(toArray(xs).sort(function(a,b){
			return Utils.cmp(f(a), f(b));
		}));
	}

	function sortWith(f, xs)
	{
		return fromArray(toArray(xs).sort(function(a,b){
			var ord = f(a)(b).ctor;
			return ord === 'EQ' ? 0 : ord === 'LT' ? -1 : 1;
		}));
	}

	function take(n, xs)
	{
		var arr = [];
		while (xs.ctor !== '[]' && n > 0)
		{
			arr.push(xs._0);
			xs = xs._1;
			--n;
		}
		return fromArray(arr);
	}

	function drop(n, xs)
	{
		while (xs.ctor !== '[]' && n > 0)
		{
			xs = xs._1;
			--n;
		}
		return xs;
	}

	function repeat(n, x)
	{
		var arr = [];
		var pattern = [x];
		while (n > 0)
		{
			if (n & 1)
			{
				arr = arr.concat(pattern);
			}
			n >>= 1, pattern = pattern.concat(pattern);
		}
		return fromArray(arr);
	}


	Elm.Native.List.values = {
		Nil:Nil,
		Cons:Cons,
		cons:F2(Cons),
		toArray:toArray,
		fromArray:fromArray,
		range:range,

		foldl:F3(foldl),
		foldr:F3(foldr),

		any:F2(any),
		map2:F3(map2),
		map3:F4(map3),
		map4:F5(map4),
		map5:F6(map5),
		sortBy:F2(sortBy),
		sortWith:F2(sortWith),
		take:F2(take),
		drop:F2(drop),
		repeat:F2(repeat)
	};
	return localRuntime.Native.List.values = Elm.Native.List.values;

};

Elm.Native = Elm.Native || {};
Elm.Native.Mouse = {};
Elm.Native.Mouse.make = function(localRuntime) {

	localRuntime.Native = localRuntime.Native || {};
	localRuntime.Native.Mouse = localRuntime.Native.Mouse || {};
	if (localRuntime.Native.Mouse.values)
	{
		return localRuntime.Native.Mouse.values;
	}

	var NS = Elm.Native.Signal.make(localRuntime);
	var Utils = Elm.Native.Utils.make(localRuntime);

	var position = NS.input('Mouse.position', Utils.Tuple2(0,0));

	var isDown = NS.input('Mouse.isDown', false);

	var clicks = NS.input('Mouse.clicks', Utils.Tuple0);

	var node = localRuntime.isFullscreen()
		? document
		: localRuntime.node;

	localRuntime.addListener([clicks.id], node, 'click', function click() {
		localRuntime.notify(clicks.id, Utils.Tuple0);
	});
	localRuntime.addListener([isDown.id], node, 'mousedown', function down() {
		localRuntime.notify(isDown.id, true);
	});
	localRuntime.addListener([isDown.id], node, 'mouseup', function up() {
		localRuntime.notify(isDown.id, false);
	});
	localRuntime.addListener([position.id], node, 'mousemove', function move(e) {
		localRuntime.notify(position.id, Utils.getXY(e));
	});

	return localRuntime.Native.Mouse.values = {
		position: position,
		isDown: isDown,
		clicks: clicks
	};
};

Elm.Native.Port = {};
Elm.Native.Port.make = function(localRuntime) {

	localRuntime.Native = localRuntime.Native || {};
	localRuntime.Native.Port = localRuntime.Native.Port || {};
	if (localRuntime.Native.Port.values)
	{
		return localRuntime.Native.Port.values;
	}

	var NS;
	var Utils = Elm.Native.Utils.make(localRuntime);


	// INBOUND

	function inbound(name, type, converter)
	{
		if (!localRuntime.argsTracker[name])
		{
			throw new Error(
				"Port Error:\n" +
				"No argument was given for the port named '" + name + "' with type:\n\n" +
				"    " + type.split('\n').join('\n        ') + "\n\n" +
				"You need to provide an initial value!\n\n" +
				"Find out more about ports here <http://elm-lang.org/learn/Ports.elm>"
			);
		}
		var arg = localRuntime.argsTracker[name];
		arg.used = true;

		return jsToElm(name, type, converter, arg.value);
	}


	function inboundSignal(name, type, converter)
	{
		var initialValue = inbound(name, type, converter);

		if (!NS)
		{
			NS = Elm.Native.Signal.make(localRuntime);
		}
		var signal = NS.input('inbound-port-' + name, initialValue);

		function send(jsValue)
		{
			var elmValue = jsToElm(name, type, converter, jsValue);
			setTimeout(function() {
				localRuntime.notify(signal.id, elmValue);
			}, 0);
		}

		localRuntime.ports[name] = { send: send };

		return signal;
	}


	function jsToElm(name, type, converter, value)
	{
		try
		{
			return converter(value);
		}
		catch(e)
		{
			throw new Error(
				"Port Error:\n" +
				"Regarding the port named '" + name + "' with type:\n\n" +
				"    " + type.split('\n').join('\n        ') + "\n\n" +
				"You just sent the value:\n\n" +
				"    " + JSON.stringify(arg.value) + "\n\n" +
				"but it cannot be converted to the necessary type.\n" +
				e.message
			);
		}
	}


	// OUTBOUND

	function outbound(name, converter, elmValue)
	{
		localRuntime.ports[name] = converter(elmValue);
	}


	function outboundSignal(name, converter, signal)
	{
		var subscribers = [];

		function subscribe(handler)
		{
			subscribers.push(handler);
		}
		function unsubscribe(handler)
		{
			subscribers.pop(subscribers.indexOf(handler));
		}

		function notify(elmValue)
		{
			var jsValue = converter(elmValue);
			var len = subscribers.length;
			for (var i = 0; i < len; ++i)
			{
				subscribers[i](jsValue);
			}
		}

		if (!NS)
		{
			NS = Elm.Native.Signal.make(localRuntime);
		}
		NS.output('outbound-port-' + name, notify, signal);

		localRuntime.ports[name] = {
			subscribe: subscribe,
			unsubscribe: unsubscribe
		};

		return signal;
	}


	return localRuntime.Native.Port.values = {
		inbound: inbound,
		outbound: outbound,
		inboundSignal: inboundSignal,
		outboundSignal: outboundSignal
	};
};


if (!Elm.fullscreen) {

	(function() {
		'use strict';

		var Display = {
			FULLSCREEN: 0,
			COMPONENT: 1,
			NONE: 2
		};

		Elm.fullscreen = function(module, args)
		{
			var container = document.createElement('div');
			document.body.appendChild(container);
			return init(Display.FULLSCREEN, container, module, args || {});
		};

		Elm.embed = function(module, container, args)
		{
			var tag = container.tagName;
			if (tag !== 'DIV')
			{
				throw new Error('Elm.node must be given a DIV, not a ' + tag + '.');
			}
			return init(Display.COMPONENT, container, module, args || {});
		};

		Elm.worker = function(module, args)
		{
			return init(Display.NONE, {}, module, args || {});
		};

		function init(display, container, module, args, moduleToReplace)
		{
			// defining state needed for an instance of the Elm RTS
			var inputs = [];

			/* OFFSET
			 * Elm's time traveling debugger lets you pause time. This means
			 * "now" may be shifted a bit into the past. By wrapping Date.now()
			 * we can manage this.
			 */
			var timer = {
				programStart: Date.now(),
				now: function()
				{
					return Date.now();
				}
			};

			var updateInProgress = false;
			function notify(id, v)
			{
				if (updateInProgress)
				{
					throw new Error(
						'The notify function has been called synchronously!\n' +
						'This can lead to frames being dropped.\n' +
						'Definitely report this to <https://github.com/elm-lang/Elm/issues>\n');
				}
				updateInProgress = true;
				var timestep = timer.now();
				for (var i = inputs.length; i--; )
				{
					inputs[i].notify(timestep, id, v);
				}
				updateInProgress = false;
			}
			function setTimeout(func, delay)
			{
				return window.setTimeout(func, delay);
			}

			var listeners = [];
			function addListener(relevantInputs, domNode, eventName, func)
			{
				domNode.addEventListener(eventName, func);
				var listener = {
					relevantInputs: relevantInputs,
					domNode: domNode,
					eventName: eventName,
					func: func
				};
				listeners.push(listener);
			}

			var argsTracker = {};
			for (var name in args)
			{
				argsTracker[name] = {
					value: args[name],
					used: false
				};
			}

			// create the actual RTS. Any impure modules will attach themselves to this
			// object. This permits many Elm programs to be embedded per document.
			var elm = {
				notify: notify,
				setTimeout: setTimeout,
				node: container,
				addListener: addListener,
				inputs: inputs,
				timer: timer,
				argsTracker: argsTracker,
				ports: {},

				isFullscreen: function() { return display === Display.FULLSCREEN; },
				isEmbed: function() { return display === Display.COMPONENT; },
				isWorker: function() { return display === Display.NONE; }
			};

			function swap(newModule)
			{
				removeListeners(listeners);
				var div = document.createElement('div');
				var newElm = init(display, div, newModule, args, elm);
				inputs = [];
				// elm.swap = newElm.swap;
				return newElm;
			}

			function dispose()
			{
				removeListeners(listeners);
				inputs = [];
			}

			var Module = {};
			try
			{
				Module = module.make(elm);
				checkInputs(elm);
			}
			catch (error)
			{
				if (typeof container.appendChild == 'undefined')
				{
					console.log(error.message);
				}
				else
				{
					container.appendChild(errorNode(error.message));
				}
				throw error;
			}

			if (display !== Display.NONE)
			{
				var graphicsNode = initGraphics(elm, Module);
			}

			var rootNode = { kids: inputs };
			trimDeadNodes(rootNode);
			inputs = rootNode.kids;
			filterListeners(inputs, listeners);

			addReceivers(elm.ports);

			if (typeof moduleToReplace !== 'undefined')
			{
				hotSwap(moduleToReplace, elm);

				// rerender scene if graphics are enabled.
				if (typeof graphicsNode !== 'undefined')
				{
					graphicsNode.notify(0, true, 0);
				}
			}

			return {
				swap: swap,
				ports: elm.ports,
				dispose: dispose
			};
		};

		function checkInputs(elm)
		{
			var argsTracker = elm.argsTracker;
			for (var name in argsTracker)
			{
				if (!argsTracker[name].used)
				{
					throw new Error(
						"Port Error:\nYou provided an argument named '" + name +
						"' but there is no corresponding port!\n\n" +
						"Maybe add a port '" + name + "' to your Elm module?\n" +
						"Maybe remove the '" + name + "' argument from your initialization code in JS?"
					);
				}
			}
		}

		function errorNode(message)
		{
			var code = document.createElement('code');

			var lines = message.split('\n');
			code.appendChild(document.createTextNode(lines[0]));
			code.appendChild(document.createElement('br'));
			code.appendChild(document.createElement('br'));
			for (var i = 1; i < lines.length; ++i)
			{
				code.appendChild(document.createTextNode('\u00A0 \u00A0 ' + lines[i].replace(/  /g, '\u00A0 ')));
				code.appendChild(document.createElement('br'));
			}
			code.appendChild(document.createElement('br'));
			code.appendChild(document.createTextNode("Open the developer console for more details."));
			return code;
		}


		//// FILTER SIGNALS ////

		// TODO: move this code into the signal module and create a function
		// Signal.initializeGraph that actually instantiates everything.

		function filterListeners(inputs, listeners)
		{
			loop:
			for (var i = listeners.length; i--; )
			{
				var listener = listeners[i];
				for (var j = inputs.length; j--; )
				{
					if (listener.relevantInputs.indexOf(inputs[j].id) >= 0)
					{
						continue loop;
					}
				}
				listener.domNode.removeEventListener(listener.eventName, listener.func);
			}
		}

		function removeListeners(listeners)
		{
			for (var i = listeners.length; i--; )
			{
				var listener = listeners[i];
				listener.domNode.removeEventListener(listener.eventName, listener.func);
			}
		}

		// add receivers for built-in ports if they are defined
		function addReceivers(ports)
		{
			if ('title' in ports)
			{
				if (typeof ports.title === 'string')
				{
					document.title = ports.title;
				}
				else
				{
					ports.title.subscribe(function(v) { document.title = v; });
				}
			}
			if ('redirect' in ports)
			{
				ports.redirect.subscribe(function(v) {
					if (v.length > 0)
					{
						window.location = v;
					}
				});
			}
		}


		// returns a boolean representing whether the node is alive or not.
		function trimDeadNodes(node)
		{
			if (node.isOutput)
			{
				return true;
			}

			var liveKids = [];
			for (var i = node.kids.length; i--; )
			{
				var kid = node.kids[i];
				if (trimDeadNodes(kid))
				{
					liveKids.push(kid);
				}
			}
			node.kids = liveKids;

			return liveKids.length > 0;
		}


		////  RENDERING  ////

		function initGraphics(elm, Module)
		{
			if (!('main' in Module))
			{
				throw new Error("'main' is missing! What do I display?!");
			}

			var signalGraph = Module.main;

			// make sure the signal graph is actually a signal & extract the visual model
			if (!('notify' in signalGraph))
			{
				signalGraph = Elm.Signal.make(elm).constant(signalGraph);
			}
			var initialScene = signalGraph.value;

			// Figure out what the render functions should be
			var render;
			var update;
			if (initialScene.props)
			{
				var Element = Elm.Native.Graphics.Element.make(elm);
				render = Element.render;
				update = Element.updateAndReplace;
			}
			else
			{
				var VirtualDom = Elm.Native.VirtualDom.make(elm);
				render = VirtualDom.render;
				update = VirtualDom.updateAndReplace;
			}

			// Add the initialScene to the DOM
			var container = elm.node;
			var node = render(initialScene);
			while (container.firstChild)
			{
				container.removeChild(container.firstChild);
			}
			container.appendChild(node);

			var _requestAnimationFrame =
				typeof requestAnimationFrame !== 'undefined'
					? requestAnimationFrame
					: function(cb) { setTimeout(cb, 1000/60); }
					;

			// domUpdate is called whenever the main Signal changes.
			//
			// domUpdate and drawCallback implement a small state machine in order
			// to schedule only 1 draw per animation frame. This enforces that
			// once draw has been called, it will not be called again until the
			// next frame.
			//
			// drawCallback is scheduled whenever
			// 1. The state transitions from PENDING_REQUEST to EXTRA_REQUEST, or
			// 2. The state transitions from NO_REQUEST to PENDING_REQUEST
			//
			// Invariants:
			// 1. In the NO_REQUEST state, there is never a scheduled drawCallback.
			// 2. In the PENDING_REQUEST and EXTRA_REQUEST states, there is always exactly 1
			//    scheduled drawCallback.
			var NO_REQUEST = 0;
			var PENDING_REQUEST = 1;
			var EXTRA_REQUEST = 2;
			var state = NO_REQUEST;
			var savedScene = initialScene;
			var scheduledScene = initialScene;

			function domUpdate(newScene)
			{
				scheduledScene = newScene;

				switch (state)
				{
					case NO_REQUEST:
						_requestAnimationFrame(drawCallback);
						state = PENDING_REQUEST;
						return;
					case PENDING_REQUEST:
						state = PENDING_REQUEST;
						return;
					case EXTRA_REQUEST:
						state = PENDING_REQUEST;
						return;
				}
			}

			function drawCallback()
			{
				switch (state)
				{
					case NO_REQUEST:
						// This state should not be possible. How can there be no
						// request, yet somehow we are actively fulfilling a
						// request?
						throw new Error(
							"Unexpected draw callback.\n" +
							"Please report this to <https://github.com/elm-lang/core/issues>."
						);

					case PENDING_REQUEST:
						// At this point, we do not *know* that another frame is
						// needed, but we make an extra request to rAF just in
						// case. It's possible to drop a frame if rAF is called
						// too late, so we just do it preemptively.
						_requestAnimationFrame(drawCallback);
						state = EXTRA_REQUEST;

						// There's also stuff we definitely need to draw.
						draw();
						return;

					case EXTRA_REQUEST:
						// Turns out the extra request was not needed, so we will
						// stop calling rAF. No reason to call it all the time if
						// no one needs it.
						state = NO_REQUEST;
						return;
				}
			}

			function draw()
			{
				update(elm.node.firstChild, savedScene, scheduledScene);
				if (elm.Native.Window)
				{
					elm.Native.Window.values.resizeIfNeeded();
				}
				savedScene = scheduledScene;
			}

			var renderer = Elm.Native.Signal.make(elm).output('main', domUpdate, signalGraph);

			// must check for resize after 'renderer' is created so
			// that changes show up.
			if (elm.Native.Window)
			{
				elm.Native.Window.values.resizeIfNeeded();
			}

			return renderer;
		}

		//// HOT SWAPPING ////

		// Returns boolean indicating if the swap was successful.
		// Requires that the two signal graphs have exactly the same
		// structure.
		function hotSwap(from, to)
		{
			function similar(nodeOld,nodeNew)
			{
				if (nodeOld.id !== nodeNew.id)
				{
					return false;
				}
				if (nodeOld.isOutput)
				{
					return nodeNew.isOutput;
				}
				return nodeOld.kids.length === nodeNew.kids.length;
			}
			function swap(nodeOld,nodeNew)
			{
				nodeNew.value = nodeOld.value;
				return true;
			}
			var canSwap = depthFirstTraversals(similar, from.inputs, to.inputs);
			if (canSwap)
			{
				depthFirstTraversals(swap, from.inputs, to.inputs);
			}
			from.node.parentNode.replaceChild(to.node, from.node);

			return canSwap;
		}

		// Returns false if the node operation f ever fails.
		function depthFirstTraversals(f, queueOld, queueNew)
		{
			if (queueOld.length !== queueNew.length)
			{
				return false;
			}
			queueOld = queueOld.slice(0);
			queueNew = queueNew.slice(0);

			var seen = [];
			while (queueOld.length > 0 && queueNew.length > 0)
			{
				var nodeOld = queueOld.pop();
				var nodeNew = queueNew.pop();
				if (seen.indexOf(nodeOld.id) < 0)
				{
					if (!f(nodeOld, nodeNew))
					{
						return false;
					}
					queueOld = queueOld.concat(nodeOld.kids || []);
					queueNew = queueNew.concat(nodeNew.kids || []);
					seen.push(nodeOld.id);
				}
			}
			return true;
		}
	}());

	function F2(fun)
	{
		function wrapper(a) { return function(b) { return fun(a,b) } }
		wrapper.arity = 2;
		wrapper.func = fun;
		return wrapper;
	}

	function F3(fun)
	{
		function wrapper(a) {
			return function(b) { return function(c) { return fun(a,b,c) }}
		}
		wrapper.arity = 3;
		wrapper.func = fun;
		return wrapper;
	}

	function F4(fun)
	{
		function wrapper(a) { return function(b) { return function(c) {
			return function(d) { return fun(a,b,c,d) }}}
		}
		wrapper.arity = 4;
		wrapper.func = fun;
		return wrapper;
	}

	function F5(fun)
	{
		function wrapper(a) { return function(b) { return function(c) {
			return function(d) { return function(e) { return fun(a,b,c,d,e) }}}}
		}
		wrapper.arity = 5;
		wrapper.func = fun;
		return wrapper;
	}

	function F6(fun)
	{
		function wrapper(a) { return function(b) { return function(c) {
			return function(d) { return function(e) { return function(f) {
			return fun(a,b,c,d,e,f) }}}}}
		}
		wrapper.arity = 6;
		wrapper.func = fun;
		return wrapper;
	}

	function F7(fun)
	{
		function wrapper(a) { return function(b) { return function(c) {
			return function(d) { return function(e) { return function(f) {
			return function(g) { return fun(a,b,c,d,e,f,g) }}}}}}
		}
		wrapper.arity = 7;
		wrapper.func = fun;
		return wrapper;
	}

	function F8(fun)
	{
		function wrapper(a) { return function(b) { return function(c) {
			return function(d) { return function(e) { return function(f) {
			return function(g) { return function(h) {
			return fun(a,b,c,d,e,f,g,h)}}}}}}}
		}
		wrapper.arity = 8;
		wrapper.func = fun;
		return wrapper;
	}

	function F9(fun)
	{
		function wrapper(a) { return function(b) { return function(c) {
			return function(d) { return function(e) { return function(f) {
			return function(g) { return function(h) { return function(i) {
			return fun(a,b,c,d,e,f,g,h,i) }}}}}}}}
		}
		wrapper.arity = 9;
		wrapper.func = fun;
		return wrapper;
	}

	function A2(fun,a,b)
	{
		return fun.arity === 2
			? fun.func(a,b)
			: fun(a)(b);
	}
	function A3(fun,a,b,c)
	{
		return fun.arity === 3
			? fun.func(a,b,c)
			: fun(a)(b)(c);
	}
	function A4(fun,a,b,c,d)
	{
		return fun.arity === 4
			? fun.func(a,b,c,d)
			: fun(a)(b)(c)(d);
	}
	function A5(fun,a,b,c,d,e)
	{
		return fun.arity === 5
			? fun.func(a,b,c,d,e)
			: fun(a)(b)(c)(d)(e);
	}
	function A6(fun,a,b,c,d,e,f)
	{
		return fun.arity === 6
			? fun.func(a,b,c,d,e,f)
			: fun(a)(b)(c)(d)(e)(f);
	}
	function A7(fun,a,b,c,d,e,f,g)
	{
		return fun.arity === 7
			? fun.func(a,b,c,d,e,f,g)
			: fun(a)(b)(c)(d)(e)(f)(g);
	}
	function A8(fun,a,b,c,d,e,f,g,h)
	{
		return fun.arity === 8
			? fun.func(a,b,c,d,e,f,g,h)
			: fun(a)(b)(c)(d)(e)(f)(g)(h);
	}
	function A9(fun,a,b,c,d,e,f,g,h,i)
	{
		return fun.arity === 9
			? fun.func(a,b,c,d,e,f,g,h,i)
			: fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
	}
}

Elm.Native.Show = {};
Elm.Native.Show.make = function(localRuntime) {
	localRuntime.Native = localRuntime.Native || {};
	localRuntime.Native.Show = localRuntime.Native.Show || {};
	if (localRuntime.Native.Show.values)
	{
		return localRuntime.Native.Show.values;
	}

	var _Array;
	var Dict;
	var List;
	var Utils = Elm.Native.Utils.make(localRuntime);

	var toString = function(v)
	{
		var type = typeof v;
		if (type === "function")
		{
			var name = v.func ? v.func.name : v.name;
			return '<function' + (name === '' ? '' : ': ') + name + '>';
		}
		else if (type === "boolean")
		{
			return v ? "True" : "False";
		}
		else if (type === "number")
		{
			return v + "";
		}
		else if ((v instanceof String) && v.isChar)
		{
			return "'" + addSlashes(v, true) + "'";
		}
		else if (type === "string")
		{
			return '"' + addSlashes(v, false) + '"';
		}
		else if (type === "object" && '_' in v && probablyPublic(v))
		{
			var output = [];
			for (var k in v._)
			{
				for (var i = v._[k].length; i--; )
				{
					output.push(k + " = " + toString(v._[k][i]));
				}
			}
			for (var k in v)
			{
				if (k === '_') continue;
				output.push(k + " = " + toString(v[k]));
			}
			if (output.length === 0)
			{
				return "{}";
			}
			return "{ " + output.join(", ") + " }";
		}
		else if (type === "object" && 'ctor' in v)
		{
			if (v.ctor.substring(0,6) === "_Tuple")
			{
				var output = [];
				for (var k in v)
				{
					if (k === 'ctor') continue;
					output.push(toString(v[k]));
				}
				return "(" + output.join(",") + ")";
			}
			else if (v.ctor === "_Array")
			{
				if (!_Array)
				{
					_Array = Elm.Array.make(localRuntime);
				}
				var list = _Array.toList(v);
				return "Array.fromList " + toString(list);
			}
			else if (v.ctor === "::")
			{
				var output = '[' + toString(v._0);
				v = v._1;
				while (v.ctor === "::")
				{
					output += "," + toString(v._0);
					v = v._1;
				}
				return output + ']';
			}
			else if (v.ctor === "[]")
			{
				return "[]";
			}
			else if (v.ctor === "RBNode" || v.ctor === "RBEmpty")
			{
				if (!Dict)
				{
					Dict = Elm.Dict.make(localRuntime);
				}
				if (!List)
				{
					List = Elm.List.make(localRuntime);
				}
				var list = Dict.toList(v);
				var name = "Dict";
				if (list.ctor === "::" && list._0._1.ctor === "_Tuple0")
				{
					name = "Set";
					list = A2(List.map, function(x){return x._0}, list);
				}
				return name + ".fromList " + toString(list);
			}
			else if (v.ctor.slice(0,5) === "Text:")
			{
				return '<text>'
			}
			else
			{
				var output = "";
				for (var i in v)
				{
					if (i === 'ctor') continue;
					var str = toString(v[i]);
					var parenless = str[0] === '{' || str[0] === '<' || str.indexOf(' ') < 0;
					output += ' ' + (parenless ? str : '(' + str + ')');
				}
				return v.ctor + output;
			}
		}
		if (type === 'object' && 'notify' in v && 'id' in v)
		{
			return 'initialValue' in v
				? '<Signal>'
				: '<Stream>';
		}
		return "<internal structure>";
	};

	function addSlashes(str, isChar)
	{
		var s = str.replace(/\\/g, '\\\\')
				  .replace(/\n/g, '\\n')
				  .replace(/\t/g, '\\t')
				  .replace(/\r/g, '\\r')
				  .replace(/\v/g, '\\v')
				  .replace(/\0/g, '\\0');
		if (isChar)
		{
			return s.replace(/\'/g, "\\'")
		}
		else
		{
			return s.replace(/\"/g, '\\"');
		}
	}

	function probablyPublic(v)
	{
		var keys = Object.keys(v);
		var len = keys.length;
		if (len === 3
			&& 'props' in v
			&& 'element' in v)
		{
			return false;
		}
		else if (len === 5
			&& 'horizontal' in v
			&& 'vertical' in v
			&& 'x' in v
			&& 'y' in v)
		{
			return false;
		}
		else if (len === 7
			&& 'theta' in v
			&& 'scale' in v
			&& 'x' in v
			&& 'y' in v
			&& 'alpha' in v
			&& 'form' in v)
		{
			return false;
		}
		return true;
	}

	return localRuntime.Native.Show.values = {
		toString: toString
	};
};

Elm.Native.Signal = {};
Elm.Native.Signal.make = function(localRuntime) {

	localRuntime.Native = localRuntime.Native || {};
	localRuntime.Native.Signal = localRuntime.Native.Signal || {};
	if (localRuntime.Native.Signal.values)
	{
		return localRuntime.Native.Signal.values;
	}


	var Task = Elm.Native.Task.make(localRuntime);
	var Utils = Elm.Native.Utils.make(localRuntime);


	function broadcastToKids(node, timestamp, update)
	{
		var kids = node.kids;
		for (var i = kids.length; i--; )
		{
			kids[i].notify(timestamp, update, node.id);
		}
	}


	// INPUT

	function input(name, base)
	{
		var node = {
			id: Utils.guid(),
			name: 'input-' + name,
			value: base,
			parents: [],
			kids: []
		};

		node.notify = function(timestamp, targetId, value) {
			var update = targetId === node.id;
			if (update)
			{
				node.value = value;
			}
			broadcastToKids(node, timestamp, update);
			return update;
		};

		localRuntime.inputs.push(node);

		return node;
	}

	function constant(value)
	{
		return input('constant', value);
	}


	// MAILBOX

	function mailbox(base)
	{
		var signal = input('mailbox', base);

		function send(value) {
			return Task.asyncFunction(function(callback) {
				localRuntime.setTimeout(function() {
					localRuntime.notify(signal.id, value);
				}, 0);
				callback(Task.succeed(Utils.Tuple0));
			});
		}

		return {
			_: {},
			signal: signal,
			address: {
				ctor: 'Address',
				_0: send
			}
		};
	}

	function sendMessage(message)
	{
		Task.perform(message._0);
	}


	// OUTPUT

	function output(name, handler, parent)
	{
		var node = {
			id: Utils.guid(),
			name: 'output-' + name,
			parents: [parent],
			isOutput: true
		};

		node.notify = function(timestamp, parentUpdate, parentID)
		{
			if (parentUpdate)
			{
				handler(parent.value);
			}
		};

		parent.kids.push(node);

		return node;
	}


	// MAP

	function mapMany(refreshValue, args)
	{
		var node = {
			id: Utils.guid(),
			name: 'map' + args.length,
			value: refreshValue(),
			parents: args,
			kids: []
		};

		var numberOfParents = args.length;
		var count = 0;
		var update = false;

		node.notify = function(timestamp, parentUpdate, parentID)
		{
			++count;

			update = update || parentUpdate;

			if (count === numberOfParents)
			{
				if (update)
				{
					node.value = refreshValue();
				}
				broadcastToKids(node, timestamp, update);
				update = false;
				count = 0;
			}
		};

		for (var i = numberOfParents; i--; )
		{
			args[i].kids.push(node);
		}

		return node;
	}


	function map(func, a)
	{
		function refreshValue()
		{
			return func(a.value);
		}
		return mapMany(refreshValue, [a]);
	}


	function map2(func, a, b)
	{
		function refreshValue()
		{
			return A2( func, a.value, b.value );
		}
		return mapMany(refreshValue, [a,b]);
	}


	function map3(func, a, b, c)
	{
		function refreshValue()
		{
			return A3( func, a.value, b.value, c.value );
		}
		return mapMany(refreshValue, [a,b,c]);
	}


	function map4(func, a, b, c, d)
	{
		function refreshValue()
		{
			return A4( func, a.value, b.value, c.value, d.value );
		}
		return mapMany(refreshValue, [a,b,c,d]);
	}


	function map5(func, a, b, c, d, e)
	{
		function refreshValue()
		{
			return A5( func, a.value, b.value, c.value, d.value, e.value );
		}
		return mapMany(refreshValue, [a,b,c,d,e]);
	}



	// FOLD

	function foldp(update, state, signal)
	{
		var node = {
			id: Utils.guid(),
			name: 'foldp',
			parents: [signal],
			kids: [],
			value: state
		};

		node.notify = function(timestamp, parentUpdate, parentID)
		{
			if (parentUpdate)
			{
				node.value = A2( update, signal.value, node.value );
			}
			broadcastToKids(node, timestamp, parentUpdate);
		};

		signal.kids.push(node);

		return node;
	}


	// TIME

	function timestamp(signal)
	{
		var node = {
			id: Utils.guid(),
			name: 'timestamp',
			value: Utils.Tuple2(localRuntime.timer.programStart, signal.value),
			parents: [signal],
			kids: []
		};

		node.notify = function(timestamp, parentUpdate, parentID)
		{
			if (parentUpdate)
			{
				node.value = Utils.Tuple2(timestamp, signal.value);
			}
			broadcastToKids(node, timestamp, parentUpdate);
		};

		signal.kids.push(node);

		return node;
	}


	function delay(time, signal)
	{
		var delayed = input('delay-input-' + time, signal.value);

		function handler(value)
		{
			setTimeout(function() {
				localRuntime.notify(delayed.id, value);
			}, time);
		}

		output('delay-output-' + time, handler, signal);

		return delayed;
	}


	// MERGING

	function genericMerge(tieBreaker, leftStream, rightStream)
	{
		var node = {
			id: Utils.guid(),
			name: 'merge',
			value: A2(tieBreaker, leftStream.value, rightStream.value),
			parents: [leftStream, rightStream],
			kids: []
		};

		var left = { touched: false, update: false, value: null };
		var right = { touched: false, update: false, value: null };

		node.notify = function(timestamp, parentUpdate, parentID)
		{
			if (parentID === leftStream.id)
			{
				left.touched = true;
				left.update = parentUpdate;
				left.value = leftStream.value;
			}
			if (parentID === rightStream.id)
			{
				right.touched = true;
				right.update = parentUpdate;
				right.value = rightStream.value;
			}

			if (left.touched && right.touched)
			{
				var update = false;
				if (left.update && right.update)
				{
					node.value = A2(tieBreaker, left.value, right.value);
					update = true;
				}
				else if (left.update)
				{
					node.value = left.value;
					update = true;
				}
				else if (right.update)
				{
					node.value = right.value;
					update = true;
				}
				left.touched = false;
				right.touched = false;

				broadcastToKids(node, timestamp, update);
			}
		};

		leftStream.kids.push(node);
		rightStream.kids.push(node);

		return node;
	}


	// FILTERING

	function filterMap(toMaybe, base, signal)
	{
		var maybe = toMaybe(signal.value);
		var node = {
			id: Utils.guid(),
			name: 'filterMap',
			value: maybe.ctor === 'Nothing' ? base : maybe._0,
			parents: [signal],
			kids: []
		};

		node.notify = function(timestamp, parentUpdate, parentID)
		{
			var update = false;
			if (parentUpdate)
			{
				var maybe = toMaybe(signal.value);
				if (maybe.ctor === 'Just')
				{
					update = true;
					node.value = maybe._0;
				}
			}
			broadcastToKids(node, timestamp, update);
		};

		signal.kids.push(node);

		return node;
	}


	// SAMPLING

	function sampleOn(ticker, signal)
	{
		var node = {
			id: Utils.guid(),
			name: 'sampleOn',
			value: signal.value,
			parents: [ticker, signal],
			kids: []
		};

		var signalTouch = false;
		var tickerTouch = false;
		var tickerUpdate = false;

		node.notify = function(timestamp, parentUpdate, parentID)
		{
			if (parentID === ticker.id)
			{
				tickerTouch = true;
				tickerUpdate = parentUpdate;
			}
			if (parentID === signal.id)
			{
				signalTouch = true;
			}

			if (tickerTouch && signalTouch)
			{
				if (tickerUpdate)
				{
					node.value = signal.value;
				}
				tickerTouch = false;
				signalTouch = false;

				broadcastToKids(node, timestamp, tickerUpdate);
			}
		};

		ticker.kids.push(node);
		signal.kids.push(node);

		return node;
	}


	// DROP REPEATS

	function dropRepeats(signal)
	{
		var node = {
			id: Utils.guid(),
			name: 'dropRepeats',
			value: signal.value,
			parents: [signal],
			kids: []
		};

		node.notify = function(timestamp, parentUpdate, parentID)
		{
			var update = false;
			if (parentUpdate && !Utils.eq(node.value, signal.value))
			{
				node.value = signal.value;
				update = true;
			}
			broadcastToKids(node, timestamp, update);
		};

		signal.kids.push(node);

		return node;
	}


	return localRuntime.Native.Signal.values = {
		input: input,
		constant: constant,
		mailbox: mailbox,
		sendMessage: sendMessage,
		output: output,
		map: F2(map),
		map2: F3(map2),
		map3: F4(map3),
		map4: F5(map4),
		map5: F6(map5),
		foldp: F3(foldp),
		genericMerge: F3(genericMerge),
		filterMap: F3(filterMap),
		sampleOn: F2(sampleOn),
		dropRepeats: dropRepeats,
		timestamp: timestamp,
		delay: F2(delay)
	};
};

Elm.Native.String = {};
Elm.Native.String.make = function(localRuntime) {

	localRuntime.Native = localRuntime.Native || {};
	localRuntime.Native.String = localRuntime.Native.String || {};
	if (localRuntime.Native.String.values)
	{
		return localRuntime.Native.String.values;
	}
	if ('values' in Elm.Native.String)
	{
		return localRuntime.Native.String.values = Elm.Native.String.values;
	}


	var Char = Elm.Char.make(localRuntime);
	var List = Elm.Native.List.make(localRuntime);
	var Maybe = Elm.Maybe.make(localRuntime);
	var Result = Elm.Result.make(localRuntime);
	var Utils = Elm.Native.Utils.make(localRuntime);

	function isEmpty(str)
	{
		return str.length === 0;
	}
	function cons(chr,str)
	{
		return chr + str;
	}
	function uncons(str)
	{
		var hd;
		return (hd = str[0])
			? Maybe.Just(Utils.Tuple2(Utils.chr(hd), str.slice(1)))
			: Maybe.Nothing;
	}
	function append(a,b)
	{
		return a + b;
	}
	function concat(strs)
	{
		return List.toArray(strs).join('');
	}
	function length(str)
	{
		return str.length;
	}
	function map(f,str)
	{
		var out = str.split('');
		for (var i = out.length; i--; )
		{
			out[i] = f(Utils.chr(out[i]));
		}
		return out.join('');
	}
	function filter(pred,str)
	{
		return str.split('').map(Utils.chr).filter(pred).join('');
	}
	function reverse(str)
	{
		return str.split('').reverse().join('');
	}
	function foldl(f,b,str)
	{
		var len = str.length;
		for (var i = 0; i < len; ++i)
		{
			b = A2(f, Utils.chr(str[i]), b);
		}
		return b;
	}
	function foldr(f,b,str)
	{
		for (var i = str.length; i--; )
		{
			b = A2(f, Utils.chr(str[i]), b);
		}
		return b;
	}

	function split(sep, str)
	{
		return List.fromArray(str.split(sep));
	}
	function join(sep, strs)
	{
		return List.toArray(strs).join(sep);
	}
	function repeat(n, str)
	{
		var result = '';
		while (n > 0)
		{
			if (n & 1)
			{
				result += str;
			}
			n >>= 1, str += str;
		}
		return result;
	}

	function slice(start, end, str)
	{
		return str.slice(start,end);
	}
	function left(n, str)
	{
		return n < 1 ? "" : str.slice(0,n);
	}
	function right(n, str)
	{
		return n < 1 ? "" : str.slice(-n);
	}
	function dropLeft(n, str)
	{
		return n < 1 ? str : str.slice(n);
	}
	function dropRight(n, str)
	{
		return n < 1 ? str : str.slice(0,-n);
	}

	function pad(n,chr,str)
	{
		var half = (n - str.length) / 2;
		return repeat(Math.ceil(half),chr) + str + repeat(half|0,chr);
	}
	function padRight(n,chr,str)
	{
		return str + repeat(n - str.length, chr);
	}
	function padLeft(n,chr,str)
	{
		return repeat(n - str.length, chr) + str;
	}

	function trim(str)
	{
		return str.trim();
	}
	function trimLeft(str)
	{
		return str.trimLeft();
	}
	function trimRight(str)
	{
		return str.trimRight();
	}

	function words(str)
	{
		return List.fromArray(str.trim().split(/\s+/g));
	}
	function lines(str)
	{
		return List.fromArray(str.split(/\r\n|\r|\n/g));
	}

	function toUpper(str)
	{
		return str.toUpperCase();
	}
	function toLower(str)
	{
		return str.toLowerCase();
	}

	function any(pred, str)
	{
		for (var i = str.length; i--; )
		{
			if (pred(Utils.chr(str[i])))
			{
				return true;
			}
		}
		return false;
	}
	function all(pred, str)
	{
		for (var i = str.length; i--; )
		{
			if (!pred(Utils.chr(str[i])))
			{
				return false;
			}
		}
		return true;
	}

	function contains(sub, str)
	{
		return str.indexOf(sub) > -1;
	}
	function startsWith(sub, str)
	{
		return str.indexOf(sub) === 0;
	}
	function endsWith(sub, str)
	{
		return str.length >= sub.length &&
			str.lastIndexOf(sub) === str.length - sub.length;
	}
	function indexes(sub, str)
	{
		var subLen = sub.length;
		var i = 0;
		var is = [];
		while ((i = str.indexOf(sub, i)) > -1)
		{
			is.push(i);
			i = i + subLen;
		}
		return List.fromArray(is);
	}

	function toInt(s)
	{
		var len = s.length;
		if (len === 0)
		{
			return Result.Err("could not convert string '" + s + "' to an Int" );
		}
		var start = 0;
		if (s[0] == '-')
		{
			if (len === 1)
			{
				return Result.Err("could not convert string '" + s + "' to an Int" );
			}
			start = 1;
		}
		for (var i = start; i < len; ++i)
		{
			if (!Char.isDigit(s[i]))
			{
				return Result.Err("could not convert string '" + s + "' to an Int" );
			}
		}
		return Result.Ok(parseInt(s, 10));
	}

	function toFloat(s)
	{
		var len = s.length;
		if (len === 0)
		{
			return Result.Err("could not convert string '" + s + "' to a Float" );
		}
		var start = 0;
		if (s[0] == '-')
		{
			if (len === 1)
			{
				return Result.Err("could not convert string '" + s + "' to a Float" );
			}
			start = 1;
		}
		var dotCount = 0;
		for (var i = start; i < len; ++i)
		{
			if (Char.isDigit(s[i]))
			{
				continue;
			}
			if (s[i] === '.')
			{
				dotCount += 1;
				if (dotCount <= 1)
				{
					continue;
				}
			}
			return Result.Err("could not convert string '" + s + "' to a Float" );
		}
		return Result.Ok(parseFloat(s));
	}

	function toList(str)
	{
		return List.fromArray(str.split('').map(Utils.chr));
	}
	function fromList(chars)
	{
		return List.toArray(chars).join('');
	}

	return Elm.Native.String.values = {
		isEmpty: isEmpty,
		cons: F2(cons),
		uncons: uncons,
		append: F2(append),
		concat: concat,
		length: length,
		map: F2(map),
		filter: F2(filter),
		reverse: reverse,
		foldl: F3(foldl),
		foldr: F3(foldr),

		split: F2(split),
		join: F2(join),
		repeat: F2(repeat),

		slice: F3(slice),
		left: F2(left),
		right: F2(right),
		dropLeft: F2(dropLeft),
		dropRight: F2(dropRight),

		pad: F3(pad),
		padLeft: F3(padLeft),
		padRight: F3(padRight),

		trim: trim,
		trimLeft: trimLeft,
		trimRight: trimRight,

		words: words,
		lines: lines,

		toUpper: toUpper,
		toLower: toLower,

		any: F2(any),
		all: F2(all),

		contains: F2(contains),
		startsWith: F2(startsWith),
		endsWith: F2(endsWith),
		indexes: F2(indexes),

		toInt: toInt,
		toFloat: toFloat,
		toList: toList,
		fromList: fromList
	};
};

Elm.Native.Task = {};
Elm.Native.Task.make = function(localRuntime) {

	localRuntime.Native = localRuntime.Native || {};
	localRuntime.Native.Task = localRuntime.Native.Task || {};
	if (localRuntime.Native.Task.values)
	{
		return localRuntime.Native.Task.values;
	}

	var Result = Elm.Result.make(localRuntime);
	var Signal;
	var Utils = Elm.Native.Utils.make(localRuntime);


	// CONSTRUCTORS

	function succeed(value)
	{
		return {
			tag: 'Succeed',
			value: value
		};
	}

	function fail(error)
	{
		return {
			tag: 'Fail',
			value: error
		};
	}

	function asyncFunction(func)
	{
		return {
			tag: 'Async',
			asyncFunction: func
		};
	}

	function andThen(task, callback)
	{
		return {
			tag: 'AndThen',
			task: task,
			callback: callback
		};
	}

	function catch_(task, callback)
	{
		return {
			tag: 'Catch',
			task: task,
			callback: callback
		};
	}


	// RUNNER

	function perform(task) {
		runTask({ task: task }, function() {});
	}

	function performSignal(name, signal)
	{
		var workQueue = [];

		function onComplete()
		{
			workQueue.shift();

			setTimeout(function() {
				if (workQueue.length > 0)
				{
					runTask(workQueue[0], onComplete);
				}
			}, 0);
		}

		function register(task)
		{
			var root = { task: task };
			workQueue.push(root);
			if (workQueue.length === 1)
			{
				runTask(root, onComplete);
			}
		}

		if (!Signal)
		{
			Signal = Elm.Native.Signal.make(localRuntime);
		}
		Signal.output('perform-tasks-' + name, register, signal);

		register(signal.value);

		return signal;
	}

	function mark(status, task)
	{
		return { status: status, task: task };
	}

	function runTask(root, onComplete)
	{
		var result = mark('runnable', root.task);
		while (result.status === 'runnable')
		{
			result = stepTask(onComplete, root, result.task);
		}

		if (result.status === 'done')
		{
			root.task = result.task;
			onComplete();
		}

		if (result.status === 'blocked')
		{
			root.task = result.task;
		}
	}

	function stepTask(onComplete, root, task)
	{
		var tag = task.tag;

		if (tag === 'Succeed' || tag === 'Fail')
		{
			return mark('done', task);
		}

		if (tag === 'Async')
		{
			var placeHolder = {};
			var couldBeSync = true;
			var wasSync = false;

			task.asyncFunction(function(result) {
				placeHolder.tag = result.tag;
				placeHolder.value = result.value;
				if (couldBeSync)
				{
					wasSync = true;
				}
				else
				{
					runTask(root, onComplete);
				}
			});
			couldBeSync = false;
			return mark(wasSync ? 'done' : 'blocked', placeHolder);
		}

		if (tag === 'AndThen' || tag === 'Catch')
		{
			var result = mark('runnable', task.task);
			while (result.status === 'runnable')
			{
				result = stepTask(onComplete, root, result.task);
			}

			if (result.status === 'done')
			{
				var activeTask = result.task;
				var activeTag = activeTask.tag;

				var succeedChain = activeTag === 'Succeed' && tag === 'AndThen';
				var failChain = activeTag === 'Fail' && tag === 'Catch';

				return (succeedChain || failChain)
					? mark('runnable', task.callback(activeTask.value))
					: mark('runnable', activeTask);
			}
			if (result.status === 'blocked')
			{
				return mark('blocked', {
					tag: tag,
					task: result.task,
					callback: task.callback
				});
			}
		}
	}


	// THREADS

	function sleep(time) {
		return asyncFunction(function(callback) {
			setTimeout(function() {
				callback(succeed(Utils.Tuple0));
			}, time);
		});
	}

	function spawn(task) {
		return asyncFunction(function(callback) {
			var id = setTimeout(function() {
				perform(task);
			}, 0);
			callback(succeed(id));
		});
	}


	return localRuntime.Native.Task.values = {
		succeed: succeed,
		fail: fail,
		asyncFunction: asyncFunction,
		andThen: F2(andThen),
		catch_: F2(catch_),
		perform: perform,
		performSignal: performSignal,
		spawn: spawn,
		sleep: sleep
	};
};

Elm.Native.Text = {};
Elm.Native.Text.make = function(localRuntime) {
	localRuntime.Native = localRuntime.Native || {};
	localRuntime.Native.Text = localRuntime.Native.Text || {};
	if (localRuntime.Native.Text.values)
	{
		return localRuntime.Native.Text.values;
	}

	var toCss = Elm.Native.Color.make(localRuntime).toCss;
	var List = Elm.Native.List.make(localRuntime);


	// CONSTRUCTORS

	function fromString(str)
	{
		return {
			ctor: 'Text:Text',
			_0: str
		};
	}

	function append(a, b)
	{
		return {
			ctor: 'Text:Append',
			_0: a,
			_1: b
		};
	}

	function addMeta(field, value, text)
	{
		var newProps = {};
		var newText = {
			ctor: 'Text:Meta',
			_0: newProps,
			_1: text
		};

		if (text.ctor === 'Text:Meta')
		{
			newText._1 = text._1;
			var props = text._0;
			for (var i = metaKeys.length; i--; )
			{
				var key = metaKeys[i];
				var val = props[key];
				if (val)
				{
					newProps[key] = val;
				}
			}
		}
		newProps[field] = value;
		return newText;
	}

	var metaKeys = [
		'font-size',
		'font-family',
		'font-style',
		'font-weight',
		'href',
		'text-decoration',
		'color'
	];


	// conversions from Elm values to CSS

	function toTypefaces(list)
	{
		var typefaces = List.toArray(list);
		for (var i = typefaces.length; i--; )
		{
			var typeface = typefaces[i];
			if (typeface.indexOf(' ') > -1)
			{
				typefaces[i] = "'" + typeface + "'";
			}
		}
		return typefaces.join(',');
	}

	function toLine(line)
	{
		var ctor = line.ctor;
		return ctor === 'Under'
			? 'underline'
			: ctor === 'Over'
				? 'overline'
				: 'line-through';
	}

	// setting styles of Text

	function style(style, text)
	{
		var newText = addMeta('color', toCss(style.color), text);
		var props = newText._0;

		if (style.typeface.ctor !== '[]')
		{
			props['font-family'] = toTypefaces(style.typeface);
		}
		if (style.height.ctor !== "Nothing")
		{
			props['font-size'] = style.height._0 + 'px';
		}
		if (style.bold)
		{
			props['font-weight'] = 'bold';
		}
		if (style.italic)
		{
			props['font-style'] = 'italic';
		}
		if (style.line.ctor !== 'Nothing')
		{
			props['text-decoration'] = toLine(style.line._0);
		}
		return newText;
	}

	function height(px, text)
	{
		return addMeta('font-size', px + 'px', text);
	}

	function typeface(names, text)
	{
		return addMeta('font-family', toTypefaces(names), text);
	}

	function monospace(text)
	{
		return addMeta('font-family', 'monospace', text);
	}

	function italic(text)
	{
		return addMeta('font-style', 'italic', text);
	}

	function bold(text)
	{
		return addMeta('font-weight', 'bold', text);
	}

	function link(href, text)
	{
		return addMeta('href', href, text);
	}

	function line(line, text)
	{
		return addMeta('text-decoration', toLine(line), text);
	}

	function color(color, text)
	{
		return addMeta('color', toCss(color), text);;
	}


	// RENDER

	function renderHtml(text)
	{
		var tag = text.ctor;
		if (tag === 'Text:Append')
		{
			return renderHtml(text._0) + renderHtml(text._1);
		}
		if (tag === 'Text:Text')
		{
			return properEscape(text._0);
		}
		if (tag === 'Text:Meta')
		{
			return renderMeta(text._0, renderHtml(text._1));
		}
	}

	function renderMeta(metas, string)
	{
		var href = metas['href'];
		if (href)
		{
			string = '<a href="' + href + '">' + string + '</a>';
		}
		var styles = '';
		for (var key in metas)
		{
			if (key === 'href')
			{
				continue;
			}
			styles += key + ':' + metas[key] + ';';
		}
		if (styles)
		{
			string = '<span style="' + styles + '">' + string + '</span>';
		}
		return string;
	}

	function properEscape(str)
	{
		if (str.length == 0)
		{
			return str;
		}
		str = str //.replace(/&/g,  "&#38;")
			.replace(/"/g,  '&#34;')
			.replace(/'/g,  "&#39;")
			.replace(/</g,  "&#60;")
			.replace(/>/g,  "&#62;");
		var arr = str.split('\n');
		for (var i = arr.length; i--; )
		{
			arr[i] = makeSpaces(arr[i]);
		}
		return arr.join('<br/>');
	}

	function makeSpaces(s)
	{
		if (s.length == 0)
		{
			return s;
		}
		var arr = s.split('');
		if (arr[0] == ' ')
		{
			arr[0] = "&nbsp;"
		}
		for (var i = arr.length; --i; )
		{
			if (arr[i][0] == ' ' && arr[i-1] == ' ')
			{
				arr[i-1] = arr[i-1] + arr[i];
				arr[i] = '';
			}
		}
		for (var i = arr.length; i--; )
		{
			if (arr[i].length > 1 && arr[i][0] == ' ')
			{
				var spaces = arr[i].split('');
				for (var j = spaces.length - 2; j >= 0; j -= 2)
				{
					spaces[j] = '&nbsp;';
				}
				arr[i] = spaces.join('');
			}
		}
		arr = arr.join('');
		if (arr[arr.length-1] === " ")
		{
			return arr.slice(0,-1) + '&nbsp;';
		}
		return arr;
	}


	return localRuntime.Native.Text.values = {
		fromString: fromString,
		append: F2(append),

		height: F2(height),
		italic: italic,
		bold: bold,
		line: F2(line),
		monospace: monospace,
		typeface: F2(typeface),
		color: F2(color),
		link: F2(link),
		style: F2(style),

		toTypefaces: toTypefaces,
		toLine: toLine,
		renderHtml: renderHtml
	};
};

Elm.Native.Transform2D = {};
Elm.Native.Transform2D.make = function(localRuntime) {

	localRuntime.Native = localRuntime.Native || {};
	localRuntime.Native.Transform2D = localRuntime.Native.Transform2D || {};
	if (localRuntime.Native.Transform2D.values)
	{
		return localRuntime.Native.Transform2D.values;
	}

	var A;
	if (typeof Float32Array === 'undefined')
	{
		A = function(arr)
		{
			this.length = arr.length;
			this[0] = arr[0];
			this[1] = arr[1];
			this[2] = arr[2];
			this[3] = arr[3];
			this[4] = arr[4];
			this[5] = arr[5];
		};
	}
	else
	{
		A = Float32Array;
	}

	// layout of matrix in an array is
	//
	//   | m11 m12 dx |
	//   | m21 m22 dy |
	//   |  0   0   1 |
	//
	//  new A([ m11, m12, dx, m21, m22, dy ])

	var identity = new A([1,0,0,0,1,0]);
	function matrix(m11, m12, m21, m22, dx, dy)
	{
		return new A([m11, m12, dx, m21, m22, dy]);
	}

	function rotation(t)
	{
		var c = Math.cos(t);
		var s = Math.sin(t);
		return new A([c, -s, 0, s, c, 0]);
	}

	function rotate(t,m)
	{
		var c = Math.cos(t);
		var s = Math.sin(t);
		var m11 = m[0], m12 = m[1], m21 = m[3], m22 = m[4];
		return new A([m11*c + m12*s, -m11*s + m12*c, m[2],
					  m21*c + m22*s, -m21*s + m22*c, m[5]]);
	}
	/*
	function move(xy,m) {
		var x = xy._0;
		var y = xy._1;
		var m11 = m[0], m12 = m[1], m21 = m[3], m22 = m[4];
		return new A([m11, m12, m11*x + m12*y + m[2],
					  m21, m22, m21*x + m22*y + m[5]]);
	}
	function scale(s,m) { return new A([m[0]*s, m[1]*s, m[2], m[3]*s, m[4]*s, m[5]]); }
	function scaleX(x,m) { return new A([m[0]*x, m[1], m[2], m[3]*x, m[4], m[5]]); }
	function scaleY(y,m) { return new A([m[0], m[1]*y, m[2], m[3], m[4]*y, m[5]]); }
	function reflectX(m) { return new A([-m[0], m[1], m[2], -m[3], m[4], m[5]]); }
	function reflectY(m) { return new A([m[0], -m[1], m[2], m[3], -m[4], m[5]]); }

	function transform(m11, m21, m12, m22, mdx, mdy, n) {
		var n11 = n[0], n12 = n[1], n21 = n[3], n22 = n[4], ndx = n[2], ndy = n[5];
		return new A([m11*n11 + m12*n21,
					  m11*n12 + m12*n22,
					  m11*ndx + m12*ndy + mdx,
					  m21*n11 + m22*n21,
					  m21*n12 + m22*n22,
					  m21*ndx + m22*ndy + mdy]);
	}
	*/
	function multiply(m, n)
	{
		var m11 = m[0], m12 = m[1], m21 = m[3], m22 = m[4], mdx = m[2], mdy = m[5];
		var n11 = n[0], n12 = n[1], n21 = n[3], n22 = n[4], ndx = n[2], ndy = n[5];
		return new A([m11*n11 + m12*n21,
					  m11*n12 + m12*n22,
					  m11*ndx + m12*ndy + mdx,
					  m21*n11 + m22*n21,
					  m21*n12 + m22*n22,
					  m21*ndx + m22*ndy + mdy]);
	}

	return localRuntime.Native.Transform2D.values = {
		identity:identity,
		matrix:F6(matrix),
		rotation:rotation,
		multiply:F2(multiply)
		/*
		transform:F7(transform),
		rotate:F2(rotate),
		move:F2(move),
		scale:F2(scale),
		scaleX:F2(scaleX),
		scaleY:F2(scaleY),
		reflectX:reflectX,
		reflectY:reflectY
		*/
	};

};

Elm.Native = Elm.Native || {};
Elm.Native.Utils = {};
Elm.Native.Utils.make = function(localRuntime) {

	localRuntime.Native = localRuntime.Native || {};
	localRuntime.Native.Utils = localRuntime.Native.Utils || {};
	if (localRuntime.Native.Utils.values)
	{
		return localRuntime.Native.Utils.values;
	}

	function eq(l,r)
	{
		var stack = [{'x': l, 'y': r}]
		while (stack.length > 0)
		{
			var front = stack.pop();
			var x = front.x;
			var y = front.y;
			if (x === y)
			{
				continue;
			}
			if (typeof x === "object")
			{
				var c = 0;
				for (var i in x)
				{
					++c;
					if (i in y)
					{
						if (i !== 'ctor')
						{
							stack.push({ 'x': x[i], 'y': y[i] });
						}
					}
					else
					{
						return false;
					}
				}
				if ('ctor' in x)
				{
					stack.push({'x': x.ctor, 'y': y.ctor});
				}
				if (c !== Object.keys(y).length)
				{
					return false;
				}
			}
			else if (typeof x === 'function')
			{
				throw new Error('Equality error: general function equality is ' +
								'undecidable, and therefore, unsupported');
			}
			else
			{
				return false;
			}
		}
		return true;
	}

	// code in Generate/JavaScript.hs depends on the particular
	// integer values assigned to LT, EQ, and GT
	var LT = -1, EQ = 0, GT = 1, ord = ['LT','EQ','GT'];

	function compare(x,y)
	{
		return {
			ctor: ord[cmp(x,y)+1]
		};
	}

	function cmp(x,y) {
		var ord;
		if (typeof x !== 'object')
		{
			return x === y ? EQ : x < y ? LT : GT;
		}
		else if (x.isChar)
		{
			var a = x.toString();
			var b = y.toString();
			return a === b
				? EQ
				: a < b
					? LT
					: GT;
		}
		else if (x.ctor === "::" || x.ctor === "[]")
		{
			while (true)
			{
				if (x.ctor === "[]" && y.ctor === "[]")
				{
					return EQ;
				}
				if (x.ctor !== y.ctor)
				{
					return x.ctor === '[]' ? LT : GT;
				}
				ord = cmp(x._0, y._0);
				if (ord !== EQ)
				{
					return ord;
				}
				x = x._1;
				y = y._1;
			}
		}
		else if (x.ctor.slice(0,6) === '_Tuple')
		{
			var n = x.ctor.slice(6) - 0;
			var err = 'cannot compare tuples with more than 6 elements.';
			if (n === 0) return EQ;
			if (n >= 1) { ord = cmp(x._0, y._0); if (ord !== EQ) return ord;
			if (n >= 2) { ord = cmp(x._1, y._1); if (ord !== EQ) return ord;
			if (n >= 3) { ord = cmp(x._2, y._2); if (ord !== EQ) return ord;
			if (n >= 4) { ord = cmp(x._3, y._3); if (ord !== EQ) return ord;
			if (n >= 5) { ord = cmp(x._4, y._4); if (ord !== EQ) return ord;
			if (n >= 6) { ord = cmp(x._5, y._5); if (ord !== EQ) return ord;
			if (n >= 7) throw new Error('Comparison error: ' + err); } } } } } }
			return EQ;
		}
		else
		{
			throw new Error('Comparison error: comparison is only defined on ints, ' +
							'floats, times, chars, strings, lists of comparable values, ' +
							'and tuples of comparable values.');
		}
	}


	var Tuple0 = {
		ctor: "_Tuple0"
	};

	function Tuple2(x,y)
	{
		return {
			ctor: "_Tuple2",
			_0: x,
			_1: y
		};
	}

	function chr(c)
	{
		var x = new String(c);
		x.isChar = true;
		return x;
	}

	function txt(str)
	{
		var t = new String(str);
		t.text = true;
		return t;
	}

	var count = 0;
	function guid(_)
	{
		return count++
	}

	function copy(oldRecord)
	{
		var newRecord = {};
		for (var key in oldRecord)
		{
			var value = key === '_'
				? copy(oldRecord._)
				: oldRecord[key];
			newRecord[key] = value;
		}
		return newRecord;
	}

	function remove(key, oldRecord)
	{
		var record = copy(oldRecord);
		if (key in record._)
		{
			record[key] = record._[key][0];
			record._[key] = record._[key].slice(1);
			if (record._[key].length === 0)
			{
				delete record._[key];
			}
		}
		else
		{
			delete record[key];
		}
		return record;
	}

	function replace(keyValuePairs, oldRecord)
	{
		var record = copy(oldRecord);
		for (var i = keyValuePairs.length; i--; )
		{
			var pair = keyValuePairs[i];
			record[pair[0]] = pair[1];
		}
		return record;
	}

	function insert(key, value, oldRecord)
	{
		var newRecord = copy(oldRecord);
		if (key in newRecord)
		{
			var values = newRecord._[key];
			var copiedValues = values ? values.slice(0) : [];
			newRecord._[key] = [newRecord[key]].concat(copiedValues);
		}
		newRecord[key] = value;
		return newRecord;
	}

	function getXY(e)
	{
		var posx = 0;
		var posy = 0;
		if (e.pageX || e.pageY)
		{
			posx = e.pageX;
			posy = e.pageY;
		}
		else if (e.clientX || e.clientY)
		{
			posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
			posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
		}

		if (localRuntime.isEmbed())
		{
			var rect = localRuntime.node.getBoundingClientRect();
			var relx = rect.left + document.body.scrollLeft + document.documentElement.scrollLeft;
			var rely = rect.top + document.body.scrollTop + document.documentElement.scrollTop;
			// TODO: figure out if there is a way to avoid rounding here
			posx = posx - Math.round(relx) - localRuntime.node.clientLeft;
			posy = posy - Math.round(rely) - localRuntime.node.clientTop;
		}
		return Tuple2(posx, posy);
	}


	//// LIST STUFF ////

	var Nil = { ctor:'[]' };

	function Cons(hd,tl)
	{
		return {
			ctor: "::",
			_0: hd,
			_1: tl
		};
	}

	function append(xs,ys)
	{
		// append Strings
		if (typeof xs === "string")
		{
			return xs + ys;
		}

		// append Text
		if (xs.ctor.slice(0,5) === 'Text:')
		{
			return {
				ctor: 'Text:Append',
				_0: xs,
				_1: ys
			};
		}



		// append Lists
		if (xs.ctor === '[]')
		{
			return ys;
		}
		var root = Cons(xs._0, Nil);
		var curr = root;
		xs = xs._1;
		while (xs.ctor !== '[]')
		{
			curr._1 = Cons(xs._0, Nil);
			xs = xs._1;
			curr = curr._1;
		}
		curr._1 = ys;
		return root;
	}

	//// RUNTIME ERRORS ////

	function indent(lines)
	{
		return '\n' + lines.join('\n');
	}

	function badCase(moduleName, span)
	{
		var msg = indent([
			'Non-exhaustive pattern match in case-expression.',
			'Make sure your patterns cover every case!'
		]);
		throw new Error('Runtime error in module ' + moduleName + ' (' + span + ')' + msg);
	}

	function badIf(moduleName, span)
	{
		var msg = indent([
			'Non-exhaustive pattern match in multi-way-if expression.',
			'It is best to use \'otherwise\' as the last branch of multi-way-if.'
		]);
		throw new Error('Runtime error in module ' + moduleName + ' (' + span + ')' + msg);
	}


	function badPort(expected, received)
	{
		var msg = indent([
			'Expecting ' + expected + ' but was given ',
			JSON.stringify(received)
		]);
		throw new Error('Runtime error when sending values through a port.' + msg);
	}


	return localRuntime.Native.Utils.values = {
		eq: eq,
		cmp: cmp,
		compare: F2(compare),
		Tuple0: Tuple0,
		Tuple2: Tuple2,
		chr: chr,
		txt: txt,
		copy: copy,
		remove: remove,
		replace: replace,
		insert: insert,
		guid: guid,
		getXY: getXY,

		Nil: Nil,
		Cons: Cons,
		append: F2(append),

		badCase: badCase,
		badIf: badIf,
		badPort: badPort
	};
};

(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = createHash

function createHash(elem) {
    var attributes = elem.attributes
    var hash = {}

    if (attributes === null || attributes === undefined) {
        return hash
    }

    for (var i = 0; i < attributes.length; i++) {
        var attr = attributes[i]

        if (attr.name.substr(0,5) !== "data-") {
            continue
        }

        hash[attr.name.substr(5)] = attr.value
    }

    return hash
}

},{}],2:[function(require,module,exports){
var createStore = require("weakmap-shim/create-store")
var Individual = require("individual")

var createHash = require("./create-hash.js")

var hashStore = Individual("__DATA_SET_WEAKMAP@3", createStore())

module.exports = DataSet

function DataSet(elem) {
    var store = hashStore(elem)

    if (!store.hash) {
        store.hash = createHash(elem)
    }

    return store.hash
}

},{"./create-hash.js":1,"individual":3,"weakmap-shim/create-store":4}],3:[function(require,module,exports){
(function (global){
var root = typeof window !== 'undefined' ?
    window : typeof global !== 'undefined' ?
    global : {};

module.exports = Individual

function Individual(key, value) {
    if (root[key]) {
        return root[key]
    }

    Object.defineProperty(root, key, {
        value: value
        , configurable: true
    })

    return value
}

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],4:[function(require,module,exports){
var hiddenStore = require('./hidden-store.js');

module.exports = createStore;

function createStore() {
    var key = {};

    return function (obj) {
        if (typeof obj !== 'object' || obj === null) {
            throw new Error('Weakmap-shim: Key must be object')
        }

        var store = obj.valueOf(key);
        return store && store.identity === key ?
            store : hiddenStore(obj, key);
    };
}

},{"./hidden-store.js":5}],5:[function(require,module,exports){
module.exports = hiddenStore;

function hiddenStore(obj, key) {
    var store = { identity: key };
    var valueOf = obj.valueOf;

    Object.defineProperty(obj, "valueOf", {
        value: function (value) {
            return value !== key ?
                valueOf.apply(this, arguments) : store;
        },
        writable: true
    });

    return store;
}

},{}],6:[function(require,module,exports){
var DataSet = require("data-set")

module.exports = addEvent

function addEvent(target, type, handler) {
    var ds = DataSet(target)
    var events = ds[type]

    if (!events) {
        ds[type] = handler
    } else if (Array.isArray(events)) {
        if (events.indexOf(handler) === -1) {
            events.push(handler)
        }
    } else if (events !== handler) {
        ds[type] = [events, handler]
    }
}

},{"data-set":2}],7:[function(require,module,exports){
var globalDocument = require("global/document")
var DataSet = require("data-set")
var createStore = require("weakmap-shim/create-store")

var addEvent = require("./add-event.js")
var removeEvent = require("./remove-event.js")
var ProxyEvent = require("./proxy-event.js")

var HANDLER_STORE = createStore()

module.exports = DOMDelegator

function DOMDelegator(document) {
    document = document || globalDocument

    this.target = document.documentElement
    this.events = {}
    this.rawEventListeners = {}
    this.globalListeners = {}
}

DOMDelegator.prototype.addEventListener = addEvent
DOMDelegator.prototype.removeEventListener = removeEvent

DOMDelegator.prototype.allocateHandle =
    function allocateHandle(func) {
        var handle = new Handle()

        HANDLER_STORE(handle).func = func;

        return handle
    }

DOMDelegator.prototype.transformHandle =
    function transformHandle(handle, lambda) {
        var func = HANDLER_STORE(handle).func

        return this.allocateHandle(function (ev) {
            var result = lambda(ev)
            if (result) {
                func(result)
            }
        })
    }

DOMDelegator.prototype.addGlobalEventListener =
    function addGlobalEventListener(eventName, fn) {
        var listeners = this.globalListeners[eventName] || [];
        if (listeners.indexOf(fn) === -1) {
            listeners.push(fn)
        }

        this.globalListeners[eventName] = listeners;
    }

DOMDelegator.prototype.removeGlobalEventListener =
    function removeGlobalEventListener(eventName, fn) {
        var listeners = this.globalListeners[eventName] || [];

        var index = listeners.indexOf(fn)
        if (index !== -1) {
            listeners.splice(index, 1)
        }
    }

DOMDelegator.prototype.listenTo = function listenTo(eventName) {
    if (this.events[eventName]) {
        return
    }

    this.events[eventName] = true

    var listener = this.rawEventListeners[eventName]
    if (!listener) {
        listener = this.rawEventListeners[eventName] =
            createHandler(eventName, this)
    }

    this.target.addEventListener(eventName, listener, true)
}

DOMDelegator.prototype.unlistenTo = function unlistenTo(eventName) {
    if (!this.events[eventName]) {
        return
    }

    this.events[eventName] = false
    var listener = this.rawEventListeners[eventName]

    if (!listener) {
        throw new Error("dom-delegator#unlistenTo: cannot " +
            "unlisten to " + eventName)
    }

    this.target.removeEventListener(eventName, listener, true)
}

function createHandler(eventName, delegator) {
    var globalListeners = delegator.globalListeners;
    var delegatorTarget = delegator.target;

    return handler

    function handler(ev) {
        var globalHandlers = globalListeners[eventName] || []

        if (globalHandlers.length > 0) {
            var globalEvent = new ProxyEvent(ev);
            globalEvent.currentTarget = delegatorTarget;
            callListeners(globalHandlers, globalEvent)
        }

        findAndInvokeListeners(ev.target, ev, eventName)
    }
}

function findAndInvokeListeners(elem, ev, eventName) {
    var listener = getListener(elem, eventName)

    if (listener && listener.handlers.length > 0) {
        var listenerEvent = new ProxyEvent(ev);
        listenerEvent.currentTarget = listener.currentTarget
        callListeners(listener.handlers, listenerEvent)

        if (listenerEvent._bubbles) {
            var nextTarget = listener.currentTarget.parentNode
            findAndInvokeListeners(nextTarget, ev, eventName)
        }
    }
}

function getListener(target, type) {
    // terminate recursion if parent is `null`
    if (target === null) {
        return null
    }

    var ds = DataSet(target)
    // fetch list of handler fns for this event
    var handler = ds[type]
    var allHandler = ds.event

    if (!handler && !allHandler) {
        return getListener(target.parentNode, type)
    }

    var handlers = [].concat(handler || [], allHandler || [])
    return new Listener(target, handlers)
}

function callListeners(handlers, ev) {
    handlers.forEach(function (handler) {
        if (typeof handler === "function") {
            handler(ev)
        } else if (typeof handler.handleEvent === "function") {
            handler.handleEvent(ev)
        } else if (handler.type === "dom-delegator-handle") {
            HANDLER_STORE(handler).func(ev)
        } else {
            throw new Error("dom-delegator: unknown handler " +
                "found: " + JSON.stringify(handlers));
        }
    })
}

function Listener(target, handlers) {
    this.currentTarget = target
    this.handlers = handlers
}

function Handle() {
    this.type = "dom-delegator-handle"
}

},{"./add-event.js":6,"./proxy-event.js":15,"./remove-event.js":16,"data-set":2,"global/document":10,"weakmap-shim/create-store":13}],8:[function(require,module,exports){
var Individual = require("individual")
var cuid = require("cuid")
var globalDocument = require("global/document")

var DOMDelegator = require("./dom-delegator.js")

var delegatorCache = Individual("__DOM_DELEGATOR_CACHE@9", {
    delegators: {}
})
var commonEvents = [
    "blur", "change", "click",  "contextmenu", "dblclick",
    "error","focus", "focusin", "focusout", "input", "keydown",
    "keypress", "keyup", "load", "mousedown", "mouseup",
    "resize", "scroll", "select", "submit", "touchcancel",
    "touchend", "touchstart", "unload"
]

/*  Delegator is a thin wrapper around a singleton `DOMDelegator`
        instance.

    Only one DOMDelegator should exist because we do not want
        duplicate event listeners bound to the DOM.

    `Delegator` will also `listenTo()` all events unless 
        every caller opts out of it
*/
module.exports = Delegator

function Delegator(opts) {
    opts = opts || {}
    var document = opts.document || globalDocument

    var cacheKey = document["__DOM_DELEGATOR_CACHE_TOKEN@9"]

    if (!cacheKey) {
        cacheKey =
            document["__DOM_DELEGATOR_CACHE_TOKEN@9"] = cuid()
    }

    var delegator = delegatorCache.delegators[cacheKey]

    if (!delegator) {
        delegator = delegatorCache.delegators[cacheKey] =
            new DOMDelegator(document)
    }

    if (opts.defaultEvents !== false) {
        for (var i = 0; i < commonEvents.length; i++) {
            delegator.listenTo(commonEvents[i])
        }
    }

    return delegator
}



},{"./dom-delegator.js":7,"cuid":9,"global/document":10,"individual":11}],9:[function(require,module,exports){
/**
 * cuid.js
 * Collision-resistant UID generator for browsers and node.
 * Sequential for fast db lookups and recency sorting.
 * Safe for element IDs and server-side lookups.
 *
 * Extracted from CLCTR
 * 
 * Copyright (c) Eric Elliott 2012
 * MIT License
 */

/*global window, navigator, document, require, process, module */
(function (app) {
  'use strict';
  var namespace = 'cuid',
    c = 0,
    blockSize = 4,
    base = 36,
    discreteValues = Math.pow(base, blockSize),

    pad = function pad(num, size) {
      var s = "000000000" + num;
      return s.substr(s.length-size);
    },

    randomBlock = function randomBlock() {
      return pad((Math.random() *
            discreteValues << 0)
            .toString(base), blockSize);
    },

    safeCounter = function () {
      c = (c < discreteValues) ? c : 0;
      c++; // this is not subliminal
      return c - 1;
    },

    api = function cuid() {
      // Starting with a lowercase letter makes
      // it HTML element ID friendly.
      var letter = 'c', // hard-coded allows for sequential access

        // timestamp
        // warning: this exposes the exact date and time
        // that the uid was created.
        timestamp = (new Date().getTime()).toString(base),

        // Prevent same-machine collisions.
        counter,

        // A few chars to generate distinct ids for different
        // clients (so different computers are far less
        // likely to generate the same id)
        fingerprint = api.fingerprint(),

        // Grab some more chars from Math.random()
        random = randomBlock() + randomBlock();

        counter = pad(safeCounter().toString(base), blockSize);

      return  (letter + timestamp + counter + fingerprint + random);
    };

  api.slug = function slug() {
    var date = new Date().getTime().toString(36),
      counter,
      print = api.fingerprint().slice(0,1) +
        api.fingerprint().slice(-1),
      random = randomBlock().slice(-2);

      counter = safeCounter().toString(36).slice(-4);

    return date.slice(-2) + 
      counter + print + random;
  };

  api.globalCount = function globalCount() {
    // We want to cache the results of this
    var cache = (function calc() {
        var i,
          count = 0;

        for (i in window) {
          count++;
        }

        return count;
      }());

    api.globalCount = function () { return cache; };
    return cache;
  };

  api.fingerprint = function browserPrint() {
    return pad((navigator.mimeTypes.length +
      navigator.userAgent.length).toString(36) +
      api.globalCount().toString(36), 4);
  };

  // don't change anything from here down.
  if (app.register) {
    app.register(namespace, api);
  } else if (typeof module !== 'undefined') {
    module.exports = api;
  } else {
    app[namespace] = api;
  }

}(this.applitude || this));

},{}],10:[function(require,module,exports){
(function (global){
var topLevel = typeof global !== 'undefined' ? global :
    typeof window !== 'undefined' ? window : {}
var minDoc = require('min-document');

if (typeof document !== 'undefined') {
    module.exports = document;
} else {
    var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

    if (!doccy) {
        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
    }

    module.exports = doccy;
}

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"min-document":40}],11:[function(require,module,exports){
module.exports=require(3)
},{}],12:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],13:[function(require,module,exports){
module.exports=require(4)
},{"./hidden-store.js":14}],14:[function(require,module,exports){
module.exports=require(5)
},{}],15:[function(require,module,exports){
var inherits = require("inherits")

var ALL_PROPS = [
    "altKey", "bubbles", "cancelable", "ctrlKey",
    "eventPhase", "metaKey", "relatedTarget", "shiftKey",
    "target", "timeStamp", "type", "view", "which"
]
var KEY_PROPS = ["char", "charCode", "key", "keyCode"]
var MOUSE_PROPS = [
    "button", "buttons", "clientX", "clientY", "layerX",
    "layerY", "offsetX", "offsetY", "pageX", "pageY",
    "screenX", "screenY", "toElement"
]

var rkeyEvent = /^key|input/
var rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/

module.exports = ProxyEvent

function ProxyEvent(ev) {
    if (!(this instanceof ProxyEvent)) {
        return new ProxyEvent(ev)
    }

    if (rkeyEvent.test(ev.type)) {
        return new KeyEvent(ev)
    } else if (rmouseEvent.test(ev.type)) {
        return new MouseEvent(ev)
    }

    for (var i = 0; i < ALL_PROPS.length; i++) {
        var propKey = ALL_PROPS[i]
        this[propKey] = ev[propKey]
    }

    this._rawEvent = ev
    this._bubbles = false;
}

ProxyEvent.prototype.preventDefault = function () {
    this._rawEvent.preventDefault()
}

ProxyEvent.prototype.startPropagation = function () {
    this._bubbles = true;
}

function MouseEvent(ev) {
    for (var i = 0; i < ALL_PROPS.length; i++) {
        var propKey = ALL_PROPS[i]
        this[propKey] = ev[propKey]
    }

    for (var j = 0; j < MOUSE_PROPS.length; j++) {
        var mousePropKey = MOUSE_PROPS[j]
        this[mousePropKey] = ev[mousePropKey]
    }

    this._rawEvent = ev
}

inherits(MouseEvent, ProxyEvent)

function KeyEvent(ev) {
    for (var i = 0; i < ALL_PROPS.length; i++) {
        var propKey = ALL_PROPS[i]
        this[propKey] = ev[propKey]
    }

    for (var j = 0; j < KEY_PROPS.length; j++) {
        var keyPropKey = KEY_PROPS[j]
        this[keyPropKey] = ev[keyPropKey]
    }

    this._rawEvent = ev
}

inherits(KeyEvent, ProxyEvent)

},{"inherits":12}],16:[function(require,module,exports){
var DataSet = require("data-set")

module.exports = removeEvent

function removeEvent(target, type, handler) {
    var ds = DataSet(target)
    var events = ds[type]

    if (!events) {
        return
    } else if (Array.isArray(events)) {
        var index = events.indexOf(handler)
        if (index !== -1) {
            events.splice(index, 1)
        }
    } else if (events === handler) {
        ds[type] = null
    }
}

},{"data-set":2}],17:[function(require,module,exports){
var isObject = require("is-object")
var isHook = require("vtree/is-vhook")

module.exports = applyProperties

function applyProperties(node, props, previous) {
    for (var propName in props) {
        var propValue = props[propName]

        if (propValue === undefined) {
            removeProperty(node, props, previous, propName);
        } else if (isHook(propValue)) {
            propValue.hook(node,
                propName,
                previous ? previous[propName] : undefined)
        } else {
            if (isObject(propValue)) {
                patchObject(node, props, previous, propName, propValue);
            } else if (propValue !== undefined) {
                node[propName] = propValue
            }
        }
    }
}

function removeProperty(node, props, previous, propName) {
    if (previous) {
        var previousValue = previous[propName]

        if (!isHook(previousValue)) {
            if (propName === "attributes") {
                for (var attrName in previousValue) {
                    node.removeAttribute(attrName)
                }
            } else if (propName === "style") {
                for (var i in previousValue) {
                    node.style[i] = ""
                }
            } else if (typeof previousValue === "string") {
                node[propName] = ""
            } else {
                node[propName] = null
            }
        }
    }
}

function patchObject(node, props, previous, propName, propValue) {
    var previousValue = previous ? previous[propName] : undefined

    // Set attributes
    if (propName === "attributes") {
        for (var attrName in propValue) {
            var attrValue = propValue[attrName]

            if (attrValue === undefined) {
                node.removeAttribute(attrName)
            } else {
                node.setAttribute(attrName, attrValue)
            }
        }

        return
    }

    if(previousValue && isObject(previousValue) &&
        getPrototype(previousValue) !== getPrototype(propValue)) {
        node[propName] = propValue
        return
    }

    if (!isObject(node[propName])) {
        node[propName] = {}
    }

    var replacer = propName === "style" ? "" : undefined

    for (var k in propValue) {
        var value = propValue[k]
        node[propName][k] = (value === undefined) ? replacer : value
    }
}

function getPrototype(value) {
    if (Object.getPrototypeOf) {
        return Object.getPrototypeOf(value)
    } else if (value.__proto__) {
        return value.__proto__
    } else if (value.constructor) {
        return value.constructor.prototype
    }
}

},{"is-object":21,"vtree/is-vhook":29}],18:[function(require,module,exports){
var document = require("global/document")

var applyProperties = require("./apply-properties")

var isVNode = require("vtree/is-vnode")
var isVText = require("vtree/is-vtext")
var isWidget = require("vtree/is-widget")
var handleThunk = require("vtree/handle-thunk")

module.exports = createElement

function createElement(vnode, opts) {
    var doc = opts ? opts.document || document : document
    var warn = opts ? opts.warn : null

    vnode = handleThunk(vnode).a

    if (isWidget(vnode)) {
        return vnode.init()
    } else if (isVText(vnode)) {
        return doc.createTextNode(vnode.text)
    } else if (!isVNode(vnode)) {
        if (warn) {
            warn("Item is not a valid virtual dom node", vnode)
        }
        return null
    }

    var node = (vnode.namespace === null) ?
        doc.createElement(vnode.tagName) :
        doc.createElementNS(vnode.namespace, vnode.tagName)

    var props = vnode.properties
    applyProperties(node, props)

    var children = vnode.children

    for (var i = 0; i < children.length; i++) {
        var childNode = createElement(children[i], opts)
        if (childNode) {
            node.appendChild(childNode)
        }
    }

    return node
}

},{"./apply-properties":17,"global/document":20,"vtree/handle-thunk":27,"vtree/is-vnode":30,"vtree/is-vtext":31,"vtree/is-widget":32}],19:[function(require,module,exports){
// Maps a virtual DOM tree onto a real DOM tree in an efficient manner.
// We don't want to read all of the DOM nodes in the tree so we use
// the in-order tree indexing to eliminate recursion down certain branches.
// We only recurse into a DOM node if we know that it contains a child of
// interest.

var noChild = {}

module.exports = domIndex

function domIndex(rootNode, tree, indices, nodes) {
    if (!indices || indices.length === 0) {
        return {}
    } else {
        indices.sort(ascending)
        return recurse(rootNode, tree, indices, nodes, 0)
    }
}

function recurse(rootNode, tree, indices, nodes, rootIndex) {
    nodes = nodes || {}


    if (rootNode) {
        if (indexInRange(indices, rootIndex, rootIndex)) {
            nodes[rootIndex] = rootNode
        }

        var vChildren = tree.children

        if (vChildren) {

            var childNodes = rootNode.childNodes

            for (var i = 0; i < tree.children.length; i++) {
                rootIndex += 1

                var vChild = vChildren[i] || noChild
                var nextIndex = rootIndex + (vChild.count || 0)

                // skip recursion down the tree if there are no nodes down here
                if (indexInRange(indices, rootIndex, nextIndex)) {
                    recurse(childNodes[i], vChild, indices, nodes, rootIndex)
                }

                rootIndex = nextIndex
            }
        }
    }

    return nodes
}

// Binary search for an index in the interval [left, right]
function indexInRange(indices, left, right) {
    if (indices.length === 0) {
        return false
    }

    var minIndex = 0
    var maxIndex = indices.length - 1
    var currentIndex
    var currentItem

    while (minIndex <= maxIndex) {
        currentIndex = ((maxIndex + minIndex) / 2) >> 0
        currentItem = indices[currentIndex]

        if (minIndex === maxIndex) {
            return currentItem >= left && currentItem <= right
        } else if (currentItem < left) {
            minIndex = currentIndex + 1
        } else  if (currentItem > right) {
            maxIndex = currentIndex - 1
        } else {
            return true
        }
    }

    return false;
}

function ascending(a, b) {
    return a > b ? 1 : -1
}

},{}],20:[function(require,module,exports){
module.exports=require(10)
},{"min-document":40}],21:[function(require,module,exports){
module.exports = isObject

function isObject(x) {
    return typeof x === "object" && x !== null
}

},{}],22:[function(require,module,exports){
var nativeIsArray = Array.isArray
var toString = Object.prototype.toString

module.exports = nativeIsArray || isArray

function isArray(obj) {
    return toString.call(obj) === "[object Array]"
}

},{}],23:[function(require,module,exports){
var applyProperties = require("./apply-properties")

var isWidget = require("vtree/is-widget")
var VPatch = require("vtree/vpatch")

var render = require("./create-element")
var updateWidget = require("./update-widget")

module.exports = applyPatch

function applyPatch(vpatch, domNode, renderOptions) {
    var type = vpatch.type
    var vNode = vpatch.vNode
    var patch = vpatch.patch

    switch (type) {
        case VPatch.REMOVE:
            return removeNode(domNode, vNode)
        case VPatch.INSERT:
            return insertNode(domNode, patch, renderOptions)
        case VPatch.VTEXT:
            return stringPatch(domNode, vNode, patch, renderOptions)
        case VPatch.WIDGET:
            return widgetPatch(domNode, vNode, patch, renderOptions)
        case VPatch.VNODE:
            return vNodePatch(domNode, vNode, patch, renderOptions)
        case VPatch.ORDER:
            reorderChildren(domNode, patch)
            return domNode
        case VPatch.PROPS:
            applyProperties(domNode, patch, vNode.properties)
            return domNode
        case VPatch.THUNK:
            return replaceRoot(domNode,
                renderOptions.patch(domNode, patch, renderOptions))
        default:
            return domNode
    }
}

function removeNode(domNode, vNode) {
    var parentNode = domNode.parentNode

    if (parentNode) {
        parentNode.removeChild(domNode)
    }

    destroyWidget(domNode, vNode);

    return null
}

function insertNode(parentNode, vNode, renderOptions) {
    var newNode = render(vNode, renderOptions)

    if (parentNode) {
        parentNode.appendChild(newNode)
    }

    return parentNode
}

function stringPatch(domNode, leftVNode, vText, renderOptions) {
    var newNode

    if (domNode.nodeType === 3) {
        domNode.replaceData(0, domNode.length, vText.text)
        newNode = domNode
    } else {
        var parentNode = domNode.parentNode
        newNode = render(vText, renderOptions)

        if (parentNode) {
            parentNode.replaceChild(newNode, domNode)
        }
    }

    destroyWidget(domNode, leftVNode)

    return newNode
}

function widgetPatch(domNode, leftVNode, widget, renderOptions) {
    if (updateWidget(leftVNode, widget)) {
        return widget.update(leftVNode, domNode) || domNode
    }

    var parentNode = domNode.parentNode
    var newWidget = render(widget, renderOptions)

    if (parentNode) {
        parentNode.replaceChild(newWidget, domNode)
    }

    destroyWidget(domNode, leftVNode)

    return newWidget
}

function vNodePatch(domNode, leftVNode, vNode, renderOptions) {
    var parentNode = domNode.parentNode
    var newNode = render(vNode, renderOptions)

    if (parentNode) {
        parentNode.replaceChild(newNode, domNode)
    }

    destroyWidget(domNode, leftVNode)

    return newNode
}

function destroyWidget(domNode, w) {
    if (typeof w.destroy === "function" && isWidget(w)) {
        w.destroy(domNode)
    }
}

function reorderChildren(domNode, bIndex) {
    var children = []
    var childNodes = domNode.childNodes
    var len = childNodes.length
    var i
    var reverseIndex = bIndex.reverse

    for (i = 0; i < len; i++) {
        children.push(domNode.childNodes[i])
    }

    var insertOffset = 0
    var move
    var node
    var insertNode
    for (i = 0; i < len; i++) {
        move = bIndex[i]
        if (move !== undefined && move !== i) {
            // the element currently at this index will be moved later so increase the insert offset
            if (reverseIndex[i] > i) {
                insertOffset++
            }

            node = children[move]
            insertNode = childNodes[i + insertOffset] || null
            if (node !== insertNode) {
                domNode.insertBefore(node, insertNode)
            }

            // the moved element came from the front of the array so reduce the insert offset
            if (move < i) {
                insertOffset--
            }
        }

        // element at this index is scheduled to be removed so increase insert offset
        if (i in bIndex.removes) {
            insertOffset++
        }
    }
}

function replaceRoot(oldRoot, newRoot) {
    if (oldRoot && newRoot && oldRoot !== newRoot && oldRoot.parentNode) {
        console.log(oldRoot)
        oldRoot.parentNode.replaceChild(newRoot, oldRoot)
    }

    return newRoot;
}

},{"./apply-properties":17,"./create-element":18,"./update-widget":25,"vtree/is-widget":32,"vtree/vpatch":37}],24:[function(require,module,exports){
var document = require("global/document")
var isArray = require("x-is-array")

var domIndex = require("./dom-index")
var patchOp = require("./patch-op")
module.exports = patch

function patch(rootNode, patches) {
    return patchRecursive(rootNode, patches)
}

function patchRecursive(rootNode, patches, renderOptions) {
    var indices = patchIndices(patches)

    if (indices.length === 0) {
        return rootNode
    }

    var index = domIndex(rootNode, patches.a, indices)
    var ownerDocument = rootNode.ownerDocument

    if (!renderOptions) {
        renderOptions = { patch: patchRecursive }
        if (ownerDocument !== document) {
            renderOptions.document = ownerDocument
        }
    }

    for (var i = 0; i < indices.length; i++) {
        var nodeIndex = indices[i]
        rootNode = applyPatch(rootNode,
            index[nodeIndex],
            patches[nodeIndex],
            renderOptions)
    }

    return rootNode
}

function applyPatch(rootNode, domNode, patchList, renderOptions) {
    if (!domNode) {
        return rootNode
    }

    var newNode

    if (isArray(patchList)) {
        for (var i = 0; i < patchList.length; i++) {
            newNode = patchOp(patchList[i], domNode, renderOptions)

            if (domNode === rootNode) {
                rootNode = newNode
            }
        }
    } else {
        newNode = patchOp(patchList, domNode, renderOptions)

        if (domNode === rootNode) {
            rootNode = newNode
        }
    }

    return rootNode
}

function patchIndices(patches) {
    var indices = []

    for (var key in patches) {
        if (key !== "a") {
            indices.push(Number(key))
        }
    }

    return indices
}

},{"./dom-index":19,"./patch-op":23,"global/document":20,"x-is-array":22}],25:[function(require,module,exports){
var isWidget = require("vtree/is-widget")

module.exports = updateWidget

function updateWidget(a, b) {
    if (isWidget(a) && isWidget(b)) {
        if ("name" in a && "name" in b) {
            return a.id === b.id
        } else {
            return a.init === b.init
        }
    }

    return false
}

},{"vtree/is-widget":32}],26:[function(require,module,exports){
var isArray = require("x-is-array")
var isObject = require("is-object")

var VPatch = require("./vpatch")
var isVNode = require("./is-vnode")
var isVText = require("./is-vtext")
var isWidget = require("./is-widget")
var isThunk = require("./is-thunk")
var handleThunk = require("./handle-thunk")

module.exports = diff

function diff(a, b) {
    var patch = { a: a }
    walk(a, b, patch, 0)
    return patch
}

function walk(a, b, patch, index) {
    if (a === b) {
        if (isThunk(a) || isThunk(b)) {
            thunks(a, b, patch, index)
        } else {
            hooks(b, patch, index)
        }
        return
    }

    var apply = patch[index]

    if (b == null) {
        apply = appendPatch(apply, new VPatch(VPatch.REMOVE, a, b))
        destroyWidgets(a, patch, index)
    } else if (isThunk(a) || isThunk(b)) {
        thunks(a, b, patch, index)
    } else if (isVNode(b)) {
        if (isVNode(a)) {
            if (a.tagName === b.tagName &&
                a.namespace === b.namespace &&
                a.key === b.key) {
                var propsPatch = diffProps(a.properties, b.properties, b.hooks)
                if (propsPatch) {
                    apply = appendPatch(apply,
                        new VPatch(VPatch.PROPS, a, propsPatch))
                }
                apply = diffChildren(a, b, patch, apply, index)
            } else {
                apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
                destroyWidgets(a, patch, index)
            }
        } else {
            apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b))
            destroyWidgets(a, patch, index)
        }
    } else if (isVText(b)) {
        if (!isVText(a)) {
            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))
            destroyWidgets(a, patch, index)
        } else if (a.text !== b.text) {
            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b))
        }
    } else if (isWidget(b)) {
        apply = appendPatch(apply, new VPatch(VPatch.WIDGET, a, b))

        if (!isWidget(a)) {
            destroyWidgets(a, patch, index)
        }
    }

    if (apply) {
        patch[index] = apply
    }
}

function diffProps(a, b, hooks) {
    var diff

    for (var aKey in a) {
        if (!(aKey in b)) {
            diff = diff || {}
            diff[aKey] = undefined
        }

        var aValue = a[aKey]
        var bValue = b[aKey]

        if (hooks && aKey in hooks) {
            diff = diff || {}
            diff[aKey] = bValue
        } else {
            if (isObject(aValue) && isObject(bValue)) {
                if (getPrototype(bValue) !== getPrototype(aValue)) {
                    diff = diff || {}
                    diff[aKey] = bValue
                } else {
                    var objectDiff = diffProps(aValue, bValue)
                    if (objectDiff) {
                        diff = diff || {}
                        diff[aKey] = objectDiff
                    }
                }
            } else if (aValue !== bValue) {
                diff = diff || {}
                diff[aKey] = bValue
            }
        }
    }

    for (var bKey in b) {
        if (!(bKey in a)) {
            diff = diff || {}
            diff[bKey] = b[bKey]
        }
    }

    return diff
}

function getPrototype(value) {
    if (Object.getPrototypeOf) {
        return Object.getPrototypeOf(value)
    } else if (value.__proto__) {
        return value.__proto__
    } else if (value.constructor) {
        return value.constructor.prototype
    }
}

function diffChildren(a, b, patch, apply, index) {
    var aChildren = a.children
    var bChildren = reorder(aChildren, b.children)

    var aLen = aChildren.length
    var bLen = bChildren.length
    var len = aLen > bLen ? aLen : bLen

    for (var i = 0; i < len; i++) {
        var leftNode = aChildren[i]
        var rightNode = bChildren[i]
        index += 1

        if (!leftNode) {
            if (rightNode) {
                // Excess nodes in b need to be added
                apply = appendPatch(apply,
                    new VPatch(VPatch.INSERT, null, rightNode))
            }
        } else if (!rightNode) {
            if (leftNode) {
                // Excess nodes in a need to be removed
                patch[index] = new VPatch(VPatch.REMOVE, leftNode, null)
                destroyWidgets(leftNode, patch, index)
            }
        } else {
            walk(leftNode, rightNode, patch, index)
        }

        if (isVNode(leftNode) && leftNode.count) {
            index += leftNode.count
        }
    }

    if (bChildren.moves) {
        // Reorder nodes last
        apply = appendPatch(apply, new VPatch(VPatch.ORDER, a, bChildren.moves))
    }

    return apply
}

// Patch records for all destroyed widgets must be added because we need
// a DOM node reference for the destroy function
function destroyWidgets(vNode, patch, index) {
    if (isWidget(vNode)) {
        if (typeof vNode.destroy === "function") {
            patch[index] = new VPatch(VPatch.REMOVE, vNode, null)
        }
    } else if (isVNode(vNode) && vNode.hasWidgets) {
        var children = vNode.children
        var len = children.length
        for (var i = 0; i < len; i++) {
            var child = children[i]
            index += 1

            destroyWidgets(child, patch, index)

            if (isVNode(child) && child.count) {
                index += child.count
            }
        }
    }
}

// Create a sub-patch for thunks
function thunks(a, b, patch, index) {
    var nodes = handleThunk(a, b);
    var thunkPatch = diff(nodes.a, nodes.b)
    if (hasPatches(thunkPatch)) {
        patch[index] = new VPatch(VPatch.THUNK, null, thunkPatch)
    }
}

function hasPatches(patch) {
    for (var index in patch) {
        if (index !== "a") {
            return true;
        }
    }

    return false;
}

// Execute hooks when two nodes are identical
function hooks(vNode, patch, index) {
    if (isVNode(vNode)) {
        if (vNode.hooks) {
            patch[index] = new VPatch(VPatch.PROPS, vNode.hooks, vNode.hooks)
        }

        if (vNode.descendantHooks) {
            var children = vNode.children
            var len = children.length
            for (var i = 0; i < len; i++) {
                var child = children[i]
                index += 1

                hooks(child, patch, index)

                if (isVNode(child) && child.count) {
                    index += child.count
                }
            }
        }
    }
}

// List diff, naive left to right reordering
function reorder(aChildren, bChildren) {

    var bKeys = keyIndex(bChildren)

    if (!bKeys) {
        return bChildren
    }

    var aKeys = keyIndex(aChildren)

    if (!aKeys) {
        return bChildren
    }

    var bMatch = {}, aMatch = {}

    for (var key in bKeys) {
        bMatch[bKeys[key]] = aKeys[key]
    }

    for (var key in aKeys) {
        aMatch[aKeys[key]] = bKeys[key]
    }

    var aLen = aChildren.length
    var bLen = bChildren.length
    var len = aLen > bLen ? aLen : bLen
    var shuffle = []
    var freeIndex = 0
    var i = 0
    var moveIndex = 0
    var moves = {}
    var removes = moves.removes = {}
    var reverse = moves.reverse = {}
    var hasMoves = false

    while (freeIndex < len) {
        var move = aMatch[i]
        if (move !== undefined) {
            shuffle[i] = bChildren[move]
            if (move !== moveIndex) {
                moves[move] = moveIndex
                reverse[moveIndex] = move
                hasMoves = true
            }
            moveIndex++
        } else if (i in aMatch) {
            shuffle[i] = undefined
            removes[i] = moveIndex++
            hasMoves = true
        } else {
            while (bMatch[freeIndex] !== undefined) {
                freeIndex++
            }

            if (freeIndex < len) {
                var freeChild = bChildren[freeIndex]
                if (freeChild) {
                    shuffle[i] = freeChild
                    if (freeIndex !== moveIndex) {
                        hasMoves = true
                        moves[freeIndex] = moveIndex
                        reverse[moveIndex] = freeIndex
                    }
                    moveIndex++
                }
                freeIndex++
            }
        }
        i++
    }

    if (hasMoves) {
        shuffle.moves = moves
    }

    return shuffle
}

function keyIndex(children) {
    var i, keys

    for (i = 0; i < children.length; i++) {
        var child = children[i]

        if (child.key !== undefined) {
            keys = keys || {}
            keys[child.key] = i
        }
    }

    return keys
}

function appendPatch(apply, patch) {
    if (apply) {
        if (isArray(apply)) {
            apply.push(patch)
        } else {
            apply = [apply, patch]
        }

        return apply
    } else {
        return patch
    }
}

},{"./handle-thunk":27,"./is-thunk":28,"./is-vnode":30,"./is-vtext":31,"./is-widget":32,"./vpatch":37,"is-object":33,"x-is-array":34}],27:[function(require,module,exports){
var isVNode = require("./is-vnode")
var isVText = require("./is-vtext")
var isWidget = require("./is-widget")
var isThunk = require("./is-thunk")

module.exports = handleThunk

function handleThunk(a, b) {
    var renderedA = a
    var renderedB = b

    if (isThunk(b)) {
        renderedB = renderThunk(b, a)
    }

    if (isThunk(a)) {
        renderedA = renderThunk(a, null)
    }

    return {
        a: renderedA,
        b: renderedB
    }
}

function renderThunk(thunk, previous) {
    var renderedThunk = thunk.vnode

    if (!renderedThunk) {
        renderedThunk = thunk.vnode = thunk.render(previous)
    }

    if (!(isVNode(renderedThunk) ||
            isVText(renderedThunk) ||
            isWidget(renderedThunk))) {
        throw new Error("thunk did not return a valid node");
    }

    return renderedThunk
}

},{"./is-thunk":28,"./is-vnode":30,"./is-vtext":31,"./is-widget":32}],28:[function(require,module,exports){
module.exports = isThunk

function isThunk(t) {
    return t && t.type === "Thunk"
}

},{}],29:[function(require,module,exports){
module.exports = isHook

function isHook(hook) {
    return hook && typeof hook.hook === "function" &&
        !hook.hasOwnProperty("hook")
}

},{}],30:[function(require,module,exports){
var version = require("./version")

module.exports = isVirtualNode

function isVirtualNode(x) {
    return x && x.type === "VirtualNode" && x.version === version
}

},{"./version":35}],31:[function(require,module,exports){
var version = require("./version")

module.exports = isVirtualText

function isVirtualText(x) {
    return x && x.type === "VirtualText" && x.version === version
}

},{"./version":35}],32:[function(require,module,exports){
module.exports = isWidget

function isWidget(w) {
    return w && w.type === "Widget"
}

},{}],33:[function(require,module,exports){
module.exports=require(21)
},{}],34:[function(require,module,exports){
module.exports=require(22)
},{}],35:[function(require,module,exports){
module.exports = "1"

},{}],36:[function(require,module,exports){
var version = require("./version")
var isVNode = require("./is-vnode")
var isWidget = require("./is-widget")
var isVHook = require("./is-vhook")

module.exports = VirtualNode

var noProperties = {}
var noChildren = []

function VirtualNode(tagName, properties, children, key, namespace) {
    this.tagName = tagName
    this.properties = properties || noProperties
    this.children = children || noChildren
    this.key = key != null ? String(key) : undefined
    this.namespace = (typeof namespace === "string") ? namespace : null

    var count = (children && children.length) || 0
    var descendants = 0
    var hasWidgets = false
    var descendantHooks = false
    var hooks

    for (var propName in properties) {
        if (properties.hasOwnProperty(propName)) {
            var property = properties[propName]
            if (isVHook(property)) {
                if (!hooks) {
                    hooks = {}
                }

                hooks[propName] = property
            }
        }
    }

    for (var i = 0; i < count; i++) {
        var child = children[i]
        if (isVNode(child)) {
            descendants += child.count || 0

            if (!hasWidgets && child.hasWidgets) {
                hasWidgets = true
            }

            if (!descendantHooks && (child.hooks || child.descendantHooks)) {
                descendantHooks = true
            }
        } else if (!hasWidgets && isWidget(child)) {
            if (typeof child.destroy === "function") {
                hasWidgets = true
            }
        }
    }

    this.count = count + descendants
    this.hasWidgets = hasWidgets
    this.hooks = hooks
    this.descendantHooks = descendantHooks
}

VirtualNode.prototype.version = version
VirtualNode.prototype.type = "VirtualNode"

},{"./is-vhook":29,"./is-vnode":30,"./is-widget":32,"./version":35}],37:[function(require,module,exports){
var version = require("./version")

VirtualPatch.NONE = 0
VirtualPatch.VTEXT = 1
VirtualPatch.VNODE = 2
VirtualPatch.WIDGET = 3
VirtualPatch.PROPS = 4
VirtualPatch.ORDER = 5
VirtualPatch.INSERT = 6
VirtualPatch.REMOVE = 7
VirtualPatch.THUNK = 8

module.exports = VirtualPatch

function VirtualPatch(type, vNode, patch) {
    this.type = Number(type)
    this.vNode = vNode
    this.patch = patch
}

VirtualPatch.prototype.version = version
VirtualPatch.prototype.type = "VirtualPatch"

},{"./version":35}],38:[function(require,module,exports){
var version = require("./version")

module.exports = VirtualText

function VirtualText(text) {
    this.text = String(text)
}

VirtualText.prototype.version = version
VirtualText.prototype.type = "VirtualText"

},{"./version":35}],39:[function(require,module,exports){

var VNode = require('vtree/vnode');
var VText = require('vtree/vtext');
var diff = require('vtree/diff');
var patch = require('vdom/patch');
var createElement = require('vdom/create-element');
var DataSet = require("data-set");
var Delegator = require("dom-delegator");
var isHook = require("vtree/is-vhook");

Elm.Native.VirtualDom = {};
Elm.Native.VirtualDom.make = function(elm)
{
	elm.Native = elm.Native || {};
	elm.Native.VirtualDom = elm.Native.VirtualDom || {};
	if (elm.Native.VirtualDom.values)
	{
		return elm.Native.VirtualDom.values;
	}

	// This manages event listeners. Somehow...
	// Save a reference for use in on(...)
	var delegator = Delegator();

	var Element = Elm.Native.Graphics.Element.make(elm);
	var Json = Elm.Native.Json.make(elm);
	var List = Elm.Native.List.make(elm);
	var Signal = Elm.Native.Signal.make(elm);
	var Utils = Elm.Native.Utils.make(elm);

	var ATTRIBUTE_KEY = 'UniqueNameThatOthersAreVeryUnlikelyToUse';

	function listToProperties(list)
	{
		var object = {};
		while (list.ctor !== '[]')
		{
			var entry = list._0;
			if (entry.key === ATTRIBUTE_KEY)
			{
				object.attributes = object.attributes || {};
				object.attributes[entry.value.attrKey] = entry.value.attrValue;
			}
			else
			{
				object[entry.key] = entry.value;
			}
			list = list._1;
		}
		return object;
	}

	function node(name, propertyList, contents)
	{
		var props = listToProperties(propertyList);

		var key, namespace;
		// support keys
		if (props.key !== undefined)
		{
			key = props.key;
			props.key = undefined;
		}

		// support namespace
		if (props.namespace !== undefined)
		{
			namespace = props.namespace;
			props.namespace = undefined;
		}

		// ensure that setting text of an input does not move the cursor
		var useSoftSet =
			name === 'input'
			&& props.value !== undefined
			&& !isHook(props.value);

		if (useSoftSet)
		{
			props.value = SoftSetHook(props.value);
		}

		return new VNode(name, props, List.toArray(contents), key, namespace);
	}

	function property(key, value)
	{
		return {
			key: key,
			value: value
		};
	}

	function attribute(key, value)
	{
		return {
			key: ATTRIBUTE_KEY,
			value: {
				attrKey: key,
				attrValue: value
			}
		};
	}

	function on(name, decoder, createMessage)
	{
		// Ensure we're listening for this type of event
		delegator.listenTo(name);
		function eventHandler(event)
		{
			var value = A2(Json.runDecoderValue, decoder, event);
			if (value.ctor === 'Ok')
			{
				Signal.sendMessage(createMessage(value._0));
			}
		}
		return property(name, DataSetHook(eventHandler));
	}

	function DataSetHook(value)
	{
		if (!(this instanceof DataSetHook))
		{
			return new DataSetHook(value);
		}

		this.value = value;
	}

	DataSetHook.prototype.hook = function (node, propertyName) {
		var ds = DataSet(node);
		ds[propertyName] = this.value;
	};


	function SoftSetHook(value)
	{
		if (!(this instanceof SoftSetHook))
		{
			return new SoftSetHook(value);
		}

		this.value = value;
	}

	SoftSetHook.prototype.hook = function (node, propertyName)
	{
		if (node[propertyName] !== this.value)
		{
			node[propertyName] = this.value;
		}
	};

	function text(string)
	{
		return new VText(string);
	}

	function fromElement(element)
	{
		return {
			type: "Widget",

			element: element,

			init: function () {
				return Element.render(element);
			},

			update: function (previous, node) {
				return Element.update(node, previous.element, element);
			}
		};
	}

	function toElement(width, height, html)
	{
		return A3(Element.newElement, width, height, {
			ctor: 'Custom',
			type: 'evancz/elm-html',
			render: render,
			update: update,
			model: html
		});
	}

	function render(model)
	{
		var element = Element.createNode('div');
		element.appendChild(createElement(model));
		return element;
	}

	function update(node, oldModel, newModel)
	{
		updateAndReplace(node.firstChild, oldModel, newModel);
		return node;
	}

	function updateAndReplace(node, oldModel, newModel)
	{
		var patches = diff(oldModel, newModel);
		var newNode = patch(node, patches);
		return newNode;
	}

	function lazyRef(fn, a)
	{
		function thunk()
		{
			return fn(a);
		}
		return new Thunk(fn, [a], thunk);
	}

	function lazyRef2(fn, a, b)
	{
		function thunk()
		{
			return A2(fn, a, b);
		}
		return new Thunk(fn, [a,b], thunk);
	}

	function lazyRef3(fn, a, b, c)
	{
		function thunk()
		{
			return A3(fn, a, b, c);
		}
		return new Thunk(fn, [a,b,c], thunk);
	}

	function Thunk(fn, args, thunk)
	{
		this.fn = fn;
		this.args = args;
		this.vnode = null;
		this.key = undefined;
		this.thunk = thunk;
	}

	Thunk.prototype.type = "Thunk";
	Thunk.prototype.update = updateThunk;
	Thunk.prototype.render = renderThunk;

	function shouldUpdate(current, previous)
	{
		if (current.fn !== previous.fn)
		{
			return true;
		}

		// if it's the same function, we know the number of args must match
		var cargs = current.args;
		var pargs = previous.args;

		for (var i = cargs.length; i--; )
		{
			if (cargs[i] !== pargs[i])
			{
				return true;
			}
		}

		return false;
	}

	function updateThunk(previous, domNode)
	{
		if (!shouldUpdate(this, previous))
		{
			this.vnode = previous.vnode;
			return;
		}

		if (!this.vnode)
		{
			this.vnode = this.thunk();
		}

		var patches = diff(previous.vnode, this.vnode);
		patch(domNode, patches);
	}

	function renderThunk()
	{
		return this.thunk();
	}

	return Elm.Native.VirtualDom.values = {
		node: F3(node),
		text: text,
		on: F3(on),

		property: F2(property),
		attribute: F2(attribute),

		lazy: F2(lazyRef),
		lazy2: F3(lazyRef2),
		lazy3: F4(lazyRef3),

		toElement: F3(toElement),
		fromElement: fromElement,

		render: createElement,
		updateAndReplace: updateAndReplace
	};
};

},{"data-set":2,"dom-delegator":8,"vdom/create-element":18,"vdom/patch":24,"vtree/diff":26,"vtree/is-vhook":29,"vtree/vnode":36,"vtree/vtext":38}],40:[function(require,module,exports){

},{}]},{},[39]);

Elm.Native = Elm.Native || {};
Elm.Native.Window = {};
Elm.Native.Window.make = function(localRuntime) {

	localRuntime.Native = localRuntime.Native || {};
	localRuntime.Native.Window = localRuntime.Native.Window || {};
	if (localRuntime.Native.Window.values)
	{
		return localRuntime.Native.Window.values;
	}

	var NS = Elm.Native.Signal.make(localRuntime);
	var Tuple2 = Elm.Native.Utils.make(localRuntime).Tuple2;


	function getWidth()
	{
		return localRuntime.node.clientWidth;
	}


	function getHeight()
	{
		if (localRuntime.isFullscreen())
		{
			return window.innerHeight;
		}
		return localRuntime.node.clientHeight;
	}


	var dimensions = NS.input('Window.dimensions', Tuple2(getWidth(), getHeight()));


	function resizeIfNeeded()
	{
		// Do not trigger event if the dimensions have not changed.
		// This should be most of the time.
		var w = getWidth();
		var h = getHeight();
		if (dimensions.value._0 === w && dimensions.value._1 === h)
		{
			return;
		}

		setTimeout(function () {
			// Check again to see if the dimensions have changed.
			// It is conceivable that the dimensions have changed
			// again while some other event was being processed.
			var w = getWidth();
			var h = getHeight();
			if (dimensions.value._0 === w && dimensions.value._1 === h)
			{
				return;
			}
			localRuntime.notify(dimensions.id, Tuple2(w,h));
		}, 0);
	}


	localRuntime.addListener([dimensions.id], window, 'resize', resizeIfNeeded);


	return localRuntime.Native.Window.values = {
		dimensions: dimensions,
		resizeIfNeeded: resizeIfNeeded
	};
};

Elm.OurParser = Elm.OurParser || {};
Elm.OurParser.make = function (_elm) {
   "use strict";
   _elm.OurParser = _elm.OurParser || {};
   if (_elm.OurParser.values)
   return _elm.OurParser.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "OurParser",
   $Basics = Elm.Basics.make(_elm),
   $Lazy = Elm.Lazy.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $String = Elm.String.make(_elm);
   var runParser = function (p) {
      return function () {
         switch (p.ctor)
         {case "LazyP":
            return $Lazy.force(p._0);
            case "P": return p._0;}
         _U.badCase($moduleName,
         "between lines 19 and 21");
      }();
   };
   var parse = F2(function (p,s) {
      return function () {
         var _v3 = A2(runParser,p,s);
         switch (_v3.ctor)
         {case "::": switch (_v3._0.ctor)
              {case "_Tuple2":
                 switch (_v3._0._1)
                   {case "": switch (_v3._1.ctor)
                        {case "[]":
                           return $Result.Ok(_v3._0._0);}
                        break;}
                   switch (_v3._1.ctor)
                   {case "[]":
                      return $Result.Err("incomplete parse");}
                   break;}
              break;
            case "[]":
            return $Result.Err(A2($Basics._op["++"],
              "no parse\n\n",
              s));}
         return $Result.Err(A2($Basics._op["++"],
         "ambiguous parse\n\n",
         $Basics.toString(_v3)));
      }();
   });
   var LazyP = function (a) {
      return {ctor: "LazyP",_0: a};
   };
   var recursively = function (thunk) {
      return LazyP($Lazy.lazy(function (_v8) {
         return function () {
            return runParser(thunk({ctor: "_Tuple0"}));
         }();
      }));
   };
   var P = function (a) {
      return {ctor: "P",_0: a};
   };
   var $return = function (x) {
      return P(function (s) {
         return _L.fromArray([{ctor: "_Tuple2"
                              ,_0: x
                              ,_1: s}]);
      });
   };
   var bind = F2(function (pa,f) {
      return P(function (s) {
         return $List.concat(A2($List.map,
         function (_v10) {
            return function () {
               switch (_v10.ctor)
               {case "_Tuple2":
                  return A2(runParser,
                    f(_v10._0),
                    _v10._1);}
               _U.badCase($moduleName,
               "on line 36, column 37 to 55");
            }();
         },
         A2(runParser,pa,s)));
      });
   });
   var sequence = F2(function (p1,
   p2) {
      return A2(bind,
      p1,
      $Basics.always(p2));
   });
   _op[">>>"] = sequence;
   _op[">>="] = bind;
   var between = F3(function (p1,
   p2,
   p) {
      return A2(_op[">>="],
      A2(_op[">>>"],p1,p),
      function (x) {
         return A2(_op[">>>"],
         p2,
         $return(x));
      });
   });
   var satisfy = function (f) {
      return P(function (s) {
         return function () {
            var _v14 = $String.uncons(s);
            switch (_v14.ctor)
            {case "Just":
               switch (_v14._0.ctor)
                 {case "_Tuple2":
                    return f(_v14._0._0) ? _L.fromArray([{ctor: "_Tuple2"
                                                         ,_0: _v14._0._0
                                                         ,_1: _v14._0._1}]) : _L.fromArray([]);}
                 break;
               case "Nothing":
               return _L.fromArray([]);}
            _U.badCase($moduleName,
            "between lines 46 and 49");
         }();
      });
   };
   var $char = function (c) {
      return satisfy(F2(function (x,
      y) {
         return _U.eq(x,y);
      })(c));
   };
   var string = function (str) {
      return P(function (s) {
         return A2($String.startsWith,
         str,
         s) ? function () {
            var n = $String.length(str);
            return _L.fromArray([{ctor: "_Tuple2"
                                 ,_0: str
                                 ,_1: A2($String.dropLeft,
                                 n,
                                 s)}]);
         }() : _L.fromArray([]);
      });
   };
   var map = F2(function (f,p) {
      return P(function (s) {
         return A2($List.map,
         function (_v18) {
            return function () {
               switch (_v18.ctor)
               {case "_Tuple2":
                  return {ctor: "_Tuple2"
                         ,_0: f(_v18._0)
                         ,_1: _v18._1};}
               _U.badCase($moduleName,
               "on line 62, column 25 to 32");
            }();
         },
         A2(runParser,p,s));
      });
   });
   var token = function ($) {
      return map($Basics.always({ctor: "_Tuple0"}))(string($));
   };
   _op["<$>"] = map;
   var end = P(function (s) {
      return _U.eq(s,
      "") ? _L.fromArray([{ctor: "_Tuple2"
                          ,_0: {ctor: "_Tuple0"}
                          ,_1: ""}]) : _L.fromArray([]);
   });
   var fail = P($Basics.always(_L.fromArray([])));
   var or = F2(function (p1,p2) {
      return P(function (s) {
         return A2($Basics._op["++"],
         A2(runParser,p1,s),
         A2(runParser,p2,s));
      });
   });
   var choice = function (ps) {
      return function () {
         switch (ps.ctor)
         {case "::": return A2(or,
              ps._0,
              choice(ps._1));
            case "[]": return fail;}
         _U.badCase($moduleName,
         "between lines 103 and 105");
      }();
   };
   _op["+++"] = or;
   var option = F2(function ($default,
   p) {
      return A2(_op["+++"],
      p,
      $return($default));
   });
   var optional = function (p) {
      return A2(_op["+++"],
      A2(_op[">>>"],
      p,
      $return({ctor: "_Tuple0"})),
      $return({ctor: "_Tuple0"}));
   };
   var many = function (p) {
      return A2(_op["+++"],
      $return(_L.fromArray([])),
      some(p));
   };
   var some = function (p) {
      return A2(_op[">>="],
      p,
      function (x) {
         return A2(_op[">>="],
         many(p),
         function (xs) {
            return $return(A2($List._op["::"],
            x,
            xs));
         });
      });
   };
   var sepBy1 = F2(function (p,
   sep) {
      return A2(_op[">>="],
      p,
      function (x) {
         return A2(_op[">>="],
         many(A2(_op[">>>"],sep,p)),
         function (xs) {
            return $return(A2($List._op["::"],
            x,
            xs));
         });
      });
   });
   var sepBy = F2(function (p,
   sep) {
      return A2(_op["+++"],
      $return(_L.fromArray([])),
      A2(sepBy1,p,sep));
   });
   var left_or = F2(function (p1,
   p2) {
      return P(function (s) {
         return function () {
            var _v25 = A2(runParser,
            p1,
            s);
            switch (_v25.ctor)
            {case "[]": return A2(runParser,
                 p2,
                 s);}
            return _v25;
         }();
      });
   });
   _op["<++"] = left_or;
   var munch = function (f) {
      return P(function (s) {
         return function () {
            var walk = F2(function (acc,
            s) {
               return function () {
                  var _v26 = $String.uncons(s);
                  switch (_v26.ctor)
                  {case "Just":
                     switch (_v26._0.ctor)
                       {case "_Tuple2":
                          return f(_v26._0._0) ? A2(walk,
                            A2($String.cons,_v26._0._0,acc),
                            _v26._0._1) : {ctor: "_Tuple2"
                                          ,_0: acc
                                          ,_1: s};}
                       break;
                     case "Nothing":
                     return {ctor: "_Tuple2"
                            ,_0: acc
                            ,_1: s};}
                  _U.badCase($moduleName,
                  "between lines 85 and 89");
               }();
            });
            return _L.fromArray([A2(walk,
            "",
            s)]);
         }();
      });
   };
   var skipSpaces = A2(map,
   $Basics.always({ctor: "_Tuple0"}),
   munch(F2(function (x,y) {
      return _U.eq(x,y);
   })(_U.chr(" "))));
   var munch1 = function (f) {
      return P(function (s) {
         return function () {
            var _ = A2(runParser,
            munch(f),
            s);
            var pre = function () {
               switch (_.ctor)
               {case "::": switch (_._0.ctor)
                    {case "_Tuple2":
                       switch (_._1.ctor)
                         {case "[]": return _._0._0;}
                         break;}
                    break;}
               _U.badCase($moduleName,
               "on line 94, column 21 to 42");
            }();
            var suf = function () {
               switch (_.ctor)
               {case "::": switch (_._0.ctor)
                    {case "_Tuple2":
                       switch (_._1.ctor)
                         {case "[]": return _._0._1;}
                         break;}
                    break;}
               _U.badCase($moduleName,
               "on line 94, column 21 to 42");
            }();
            return _U.eq(s,
            suf) ? _L.fromArray([]) : _L.fromArray([{ctor: "_Tuple2"
                                                    ,_0: pre
                                                    ,_1: suf}]);
         }();
      });
   };
   _elm.OurParser.values = {_op: _op
                           ,P: P
                           ,LazyP: LazyP
                           ,recursively: recursively
                           ,runParser: runParser
                           ,parse: parse
                           ,$return: $return
                           ,bind: bind
                           ,sequence: sequence
                           ,satisfy: satisfy
                           ,$char: $char
                           ,string: string
                           ,map: map
                           ,token: token
                           ,end: end
                           ,fail: fail
                           ,or: or
                           ,left_or: left_or
                           ,munch: munch
                           ,munch1: munch1
                           ,skipSpaces: skipSpaces
                           ,choice: choice
                           ,between: between
                           ,option: option
                           ,optional: optional
                           ,many: many
                           ,some: some
                           ,sepBy: sepBy
                           ,sepBy1: sepBy1};
   return _elm.OurParser.values;
};
Elm.PreludeGenerated = Elm.PreludeGenerated || {};
Elm.PreludeGenerated.make = function (_elm) {
   "use strict";
   _elm.PreludeGenerated = _elm.PreludeGenerated || {};
   if (_elm.PreludeGenerated.values)
   return _elm.PreludeGenerated.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "PreludeGenerated";
   var prelude = "\n\n(def id (\\x x))\n\n(def always (\\(x _) x))\n\n(def compose (\\(f g) (\\x (f (g x)))))\n\n(def fst (\\[x|_] x))\n\n(defrec len (\\xs (case xs ([] 0) ([_ | xs1] (+ 1 (len xs1))))))\n\n(defrec map (\\(f xs)\n  (case xs ([] []) ([hd|tl] [(f hd)|(map f tl)]))))\n\n(defrec map2 (\\(f xs ys)\n  (case [xs ys]\n    ([[x|xs1] [y|ys1]] [ (f x y) | (map2 f xs1 ys1) ])\n    (_                 []))))\n\n(defrec foldl (\\(f acc xs)\n  (case xs ([] acc) ([x|xs1] (foldl f (f x acc) xs1)))))\n\n(defrec foldr (\\(f acc xs)\n  (case xs ([] acc) ([x|xs1] (f x (foldr f acc xs1))))))\n\n(defrec append (\\(xs ys)\n  (case xs ([] ys) ([x|xs1] [ x | (append xs1 ys)]))))\n\n(def concat (foldr append []))\n\n(def concatMap (\\(f xs) (concat (map f xs))))\n\n(def cartProd (\\(xs ys)\n  (concatMap (\\x (map (\\y [x y]) ys)) xs)))\n\n(def zip (map2 (\\(x y) [x y])))\n\n(def nil  [])\n(def cons (\\(x xs) [x | xs]))\n(def snoc (\\(x ys) (append ys [x])))\n(def hd   (\\[x|xs] x))\n(def tl   (\\[x|xs] xs))\n\n(def reverse (foldl cons nil))\n\n(defrec range (\\(i j)\n  (if (< i (+ j 1))\n      (cons i (range (+ i 1) j))\n      nil)))\n\n(def list0N\n  (letrec foo (\\i (if (< i 0) nil (cons i (foo (- i 1)))))\n  (compose reverse foo)))\n\n(def list1N (\\n (range 1 n)))\n\n(def repeat (\\(n x) (map (always x) (range 1 n))))\n\n(defrec intermingle (\\(xs ys)\n  (case [xs ys]\n    ([[x|xs1] [y|ys1]] (cons x (cons y (intermingle xs1 ys1))))\n    ([[]      []]      nil)\n    (_                 (append xs ys)))))\n\n(defrec mult (\\(m n)\n  (if (< m 1) 0 (+ n (mult (+ m -1) n)))))\n\n(def minus (\\(x y) (+ x (mult y -1))))\n\n(defrec div (\\(m n)\n  (if (< m n) 0\n  (if (< n 2) m\n    (+ 1 (div (minus m n) n))))))\n\n(def neg (\\x (- 0 x)))\n\n(def not (\\b (if b false true)))\n\n(def implies (\\(p q) (if p q true)))\n\n(def clamp (\\(i j n) (if (< n i) i (if (< j n) j n))))\n\n(def joinStrings (\\(sep ss)\n  (foldr (\\(str acc) (if (= acc \'\') str (+ str (+ sep acc)))) \'\' ss)))\n\n;\n; SVG Manipulating Functions\n;\n\n(def circle (\\(fill x y r)\n  [\'circle\'\n     [[\'cx\' x] [\'cy\' y] [\'r\' r] [\'fill\' fill]]\n     []]))\n\n(def ring (\\(c w x y r)\n  [\'circle\'\n     [ [\'cx\' x] [\'cy\' y] [\'r\' r] [\'fill\' \'none\'] [\'stroke\' c] [\'stroke-width\' w] ]\n     []]))\n\n(def ellipse (\\(fill x y rx ry)\n  [\'ellipse\'\n     [ [\'cx\' x] [\'cy\' y] [\'rx\' rx] [\'ry\' ry] [\'fill\' fill] ]\n     []]))\n\n(def rect (\\(fill x y w h)\n  [\'rect\'\n     [ [\'x\' x] [\'y\' y] [\'width\' w] [\'height\' h] [\'fill\' fill] ]\n     []]))\n\n(def square (\\(fill x y side) (rect fill x y side side)))\n\n(def line (\\(fill w x1 y1 x2 y2)\n  [\'line\'\n     [ [\'x1\' x1] [\'y1\' y1] [\'x2\' x2] [\'y2\' y2] [\'stroke\' fill] [\'stroke-width\' w] ]\n     []]))\n\n(def polygon (\\(fill stroke w pts)\n  [\'polygon\'\n     [ [\'fill\' fill] [\'points\' pts] [\'stroke\' stroke] [\'stroke-width\' w] ]\n     []]))\n\n(def polyline (\\(fill stroke w pts)\n  [\'polyline\'\n     [ [\'fill\' fill] [\'points\' pts] [\'stroke\' stroke] [\'stroke-width\' w] ]\n     []]))\n\n(def path (\\(fill stroke w d)\n  [\'path\'\n     [ [\'fill\' fill] [\'stroke\' stroke] [\'stroke-width\' w] [\'d\' d] ]\n     []]))\n\n(def text (\\(x y s)\n   [\'text\' [[\'x\' x] [\'y\' y] [\'style\' \'fill:black\']\n            [\'font-family\' \'Tahoma, sans-serif\']]\n           [[\'TEXT\' s]]]))\n\n(def addAttr (\\([shapeKind oldAttrs children] newAttr)\n  [shapeKind (snoc newAttr oldAttrs) children]))\n\n(def svg (\\shapes [\'svg\' [] shapes]))\n(def svgViewBox (\\(xMax yMax shapes)\n  (let [sx sy] [(toString xMax) (toString yMax)]\n  [\'svg\'\n    [[\'x\' \'0\'] [\'y\' \'0\'] [\'viewBox\' (joinStrings \' \' [\'0\' \'0\' sx sy])]]\n    shapes])))\n\n(def rectCenter (\\(fill cx cy w h)\n  (rect fill (- cx (/ w 2)) (- cy (/ h 2)) w h)))\n\n(def square (\\(fill x y w) (rect fill x y w w)))\n(def squareCenter (\\(fill cx cy w) (rectCenter fill cx cy w w)))\n\n(def circle_    (circle \'red\'))\n(def ellipse_   (ellipse \'orange\'))\n(def rect_      (rect \'#999999\'))\n(def square_    (square \'#999999\'))\n(def line_      (line \'blue\' 2))\n(def polygon_   (polygon \'green\' \'purple\' 3))\n(def path_      (path \'transparent\' \'goldenrod\' 5))\n\n; TODO add constant literals to patterns, and match \'svg\'\n;\n; accDiff pre-condition: indices in increasing order\n;   (so can\'t just use foldr instead of reverse . foldl)\n;\n(def updateCanvas (\\([_ svgAttrs oldShapes] diff)\n  (let oldShapesI (zip (list1N (len oldShapes)) oldShapes)\n  (let initAcc [[] diff]\n  (let f (\\([i oldShape] [accShapes accDiff])\n    (case accDiff\n      ([]\n        [(cons oldShape accShapes) accDiff])\n      ([[j newShape] | accDiffRest]\n        (if (= i j)\n          [(cons newShape accShapes) accDiffRest]\n          [(cons oldShape accShapes) accDiff]))))\n  (let newShapes (reverse (fst (foldl f initAcc oldShapesI)))\n    [\'svg\' svgAttrs newShapes]))))))\n\n; \"constant folding\"\n(def twoPi (* 2 (pi)))\n(def halfPi (/ (pi) 2))\n\n; TODO explain coordinate system for these functions\n\n(def nPointsOnUnitCircle (\\(n rot)\n  (let off (- halfPi rot)\n  (let foo (\\i\n    (let ang (+ off (* (/ i n) twoPi))\n    [(cos ang) (neg (sin ang))]))\n  (map foo (list0N (- n 1)))))))\n\n(def nPointsOnCircle (\\(n rot cx cy r)\n  (let pts (nPointsOnUnitCircle n rot)\n  (map (\\[x y] [(+ cx (* x r)) (+ cy (* y r))]) pts))))\n\n(def nStar (\\(fill stroke w n len1 len2 rot cx cy)\n  (let pti (\\[i len]\n    (let anglei (+ (- (/ (* i (pi)) n) rot) halfPi)\n    (let xi (+ cx (* len (cos anglei)))\n    (let yi (+ cy (neg (* len (sin anglei))))\n      [xi yi]))))\n  (let lengths\n    (map (\\b (if b len1 len2))\n         (concat (repeat n [true false])))\n  (let indices (list0N (- (* 2! n) 1!))\n    (polygon fill stroke w (map pti (zip indices lengths))))))))\n\n; TODO refactor as in paper\n(def hSlider_ (\\(dropBall roundInt xStart xEnd y minVal maxVal caption curVal)\n  (let [rPoint wLine rBall] [4! 3! 10!]\n  (let [xDiff valDiff] [(- xEnd xStart) (- maxVal minVal)]\n  (let xBall (+ xStart (* xDiff (/ (- curVal minVal) valDiff)))\n  (let xBall_ (clamp xStart xEnd xBall)\n  (let rBall_ (if dropBall (if (= xBall_ xBall) rBall 0) rBall)\n  (let val\n    (let val_ (clamp minVal maxVal curVal)\n    (if roundInt (round val_) val_))\n  (let shapes\n    [ (line \'black\' wLine xStart y xEnd y)\n      (circle \'black\' xStart y rPoint)\n      (circle \'black\' xEnd y rPoint)\n      (circle \'black\' xBall y rBall_)\n      (text (+ xEnd 10) (+ y 5) (+ caption (toString val))) ]\n  [val shapes])))))))))\n\n(def hSlider (hSlider_ true))\n\n(def button_ (\\(dropBall xStart y caption xCur)\n  (let [rPoint wLine rBall wSlider] [4! 3! 10! 70!]\n  (let xEnd (+ xStart wSlider)\n  (let xBall (+ xStart (* xCur wSlider))\n  (let xBall_ (clamp xStart xEnd xBall)\n  (let rBall_ (if dropBall (if (= xBall_ xBall) rBall 0) rBall)\n  (let val (< xCur 0.5)\n  (let shapes\n    [ (circle \'black\' xStart y rPoint)\n      (circle \'black\' xEnd y rPoint)\n      (line \'black\' wLine xStart y xEnd y)\n      (circle (if val \'darkgreen\' \'darkred\') xBall y rBall_)\n      (text (+ xEnd 10) (+ y 5) (+ caption (toString val))) ]\n  [val shapes])))))))))\n\n(def button (button_ true))\n\n0\n\n";
   var src = prelude;
   _elm.PreludeGenerated.values = {_op: _op
                                  ,src: src};
   return _elm.PreludeGenerated.values;
};
Elm.Result = Elm.Result || {};
Elm.Result.make = function (_elm) {
   "use strict";
   _elm.Result = _elm.Result || {};
   if (_elm.Result.values)
   return _elm.Result.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Result",
   $Maybe = Elm.Maybe.make(_elm);
   var toMaybe = function (result) {
      return function () {
         switch (result.ctor)
         {case "Err":
            return $Maybe.Nothing;
            case "Ok":
            return $Maybe.Just(result._0);}
         _U.badCase($moduleName,
         "between lines 164 and 177");
      }();
   };
   var Err = function (a) {
      return {ctor: "Err",_0: a};
   };
   var andThen = F2(function (result,
   callback) {
      return function () {
         switch (result.ctor)
         {case "Err":
            return Err(result._0);
            case "Ok":
            return callback(result._0);}
         _U.badCase($moduleName,
         "between lines 126 and 145");
      }();
   });
   var Ok = function (a) {
      return {ctor: "Ok",_0: a};
   };
   var map = F2(function (func,
   ra) {
      return function () {
         switch (ra.ctor)
         {case "Err": return Err(ra._0);
            case "Ok":
            return Ok(func(ra._0));}
         _U.badCase($moduleName,
         "between lines 41 and 52");
      }();
   });
   var map2 = F3(function (func,
   ra,
   rb) {
      return function () {
         var _v9 = {ctor: "_Tuple2"
                   ,_0: ra
                   ,_1: rb};
         switch (_v9.ctor)
         {case "_Tuple2":
            switch (_v9._0.ctor)
              {case "Err":
                 return Err(_v9._0._0);
                 case "Ok": switch (_v9._1.ctor)
                   {case "Ok": return Ok(A2(func,
                        _v9._0._0,
                        _v9._1._0));}
                   break;}
              switch (_v9._1.ctor)
              {case "Err":
                 return Err(_v9._1._0);}
              break;}
         _U.badCase($moduleName,
         "between lines 55 and 58");
      }();
   });
   var map3 = F4(function (func,
   ra,
   rb,
   rc) {
      return function () {
         var _v16 = {ctor: "_Tuple3"
                    ,_0: ra
                    ,_1: rb
                    ,_2: rc};
         switch (_v16.ctor)
         {case "_Tuple3":
            switch (_v16._0.ctor)
              {case "Err":
                 return Err(_v16._0._0);
                 case "Ok": switch (_v16._1.ctor)
                   {case "Ok":
                      switch (_v16._2.ctor)
                        {case "Ok": return Ok(A3(func,
                             _v16._0._0,
                             _v16._1._0,
                             _v16._2._0));}
                        break;}
                   break;}
              switch (_v16._1.ctor)
              {case "Err":
                 return Err(_v16._1._0);}
              switch (_v16._2.ctor)
              {case "Err":
                 return Err(_v16._2._0);}
              break;}
         _U.badCase($moduleName,
         "between lines 63 and 67");
      }();
   });
   var map4 = F5(function (func,
   ra,
   rb,
   rc,
   rd) {
      return function () {
         var _v26 = {ctor: "_Tuple4"
                    ,_0: ra
                    ,_1: rb
                    ,_2: rc
                    ,_3: rd};
         switch (_v26.ctor)
         {case "_Tuple4":
            switch (_v26._0.ctor)
              {case "Err":
                 return Err(_v26._0._0);
                 case "Ok": switch (_v26._1.ctor)
                   {case "Ok":
                      switch (_v26._2.ctor)
                        {case "Ok":
                           switch (_v26._3.ctor)
                             {case "Ok": return Ok(A4(func,
                                  _v26._0._0,
                                  _v26._1._0,
                                  _v26._2._0,
                                  _v26._3._0));}
                             break;}
                        break;}
                   break;}
              switch (_v26._1.ctor)
              {case "Err":
                 return Err(_v26._1._0);}
              switch (_v26._2.ctor)
              {case "Err":
                 return Err(_v26._2._0);}
              switch (_v26._3.ctor)
              {case "Err":
                 return Err(_v26._3._0);}
              break;}
         _U.badCase($moduleName,
         "between lines 72 and 77");
      }();
   });
   var map5 = F6(function (func,
   ra,
   rb,
   rc,
   rd,
   re) {
      return function () {
         var _v39 = {ctor: "_Tuple5"
                    ,_0: ra
                    ,_1: rb
                    ,_2: rc
                    ,_3: rd
                    ,_4: re};
         switch (_v39.ctor)
         {case "_Tuple5":
            switch (_v39._0.ctor)
              {case "Err":
                 return Err(_v39._0._0);
                 case "Ok": switch (_v39._1.ctor)
                   {case "Ok":
                      switch (_v39._2.ctor)
                        {case "Ok":
                           switch (_v39._3.ctor)
                             {case "Ok":
                                switch (_v39._4.ctor)
                                  {case "Ok": return Ok(A5(func,
                                       _v39._0._0,
                                       _v39._1._0,
                                       _v39._2._0,
                                       _v39._3._0,
                                       _v39._4._0));}
                                  break;}
                             break;}
                        break;}
                   break;}
              switch (_v39._1.ctor)
              {case "Err":
                 return Err(_v39._1._0);}
              switch (_v39._2.ctor)
              {case "Err":
                 return Err(_v39._2._0);}
              switch (_v39._3.ctor)
              {case "Err":
                 return Err(_v39._3._0);}
              switch (_v39._4.ctor)
              {case "Err":
                 return Err(_v39._4._0);}
              break;}
         _U.badCase($moduleName,
         "between lines 82 and 123");
      }();
   });
   var formatError = F2(function (f,
   result) {
      return function () {
         switch (result.ctor)
         {case "Err":
            return Err(f(result._0));
            case "Ok":
            return Ok(result._0);}
         _U.badCase($moduleName,
         "between lines 148 and 161");
      }();
   });
   var fromMaybe = F2(function (err,
   maybe) {
      return function () {
         switch (maybe.ctor)
         {case "Just":
            return Ok(maybe._0);
            case "Nothing":
            return Err(err);}
         _U.badCase($moduleName,
         "between lines 180 and 182");
      }();
   });
   _elm.Result.values = {_op: _op
                        ,map: map
                        ,map2: map2
                        ,map3: map3
                        ,map4: map4
                        ,map5: map5
                        ,andThen: andThen
                        ,toMaybe: toMaybe
                        ,fromMaybe: fromMaybe
                        ,formatError: formatError
                        ,Ok: Ok
                        ,Err: Err};
   return _elm.Result.values;
};
Elm.Set = Elm.Set || {};
Elm.Set.make = function (_elm) {
   "use strict";
   _elm.Set = _elm.Set || {};
   if (_elm.Set.values)
   return _elm.Set.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Set",
   $Dict = Elm.Dict.make(_elm),
   $List = Elm.List.make(_elm);
   var partition = F2(function (p,
   set) {
      return A2($Dict.partition,
      F2(function (k,_v0) {
         return function () {
            return p(k);
         }();
      }),
      set);
   });
   var filter = F2(function (p,
   set) {
      return A2($Dict.filter,
      F2(function (k,_v2) {
         return function () {
            return p(k);
         }();
      }),
      set);
   });
   var foldr = F3(function (f,
   b,
   s) {
      return A3($Dict.foldr,
      F3(function (k,_v4,b) {
         return function () {
            return A2(f,k,b);
         }();
      }),
      b,
      s);
   });
   var foldl = F3(function (f,
   b,
   s) {
      return A3($Dict.foldl,
      F3(function (k,_v6,b) {
         return function () {
            return A2(f,k,b);
         }();
      }),
      b,
      s);
   });
   var toList = $Dict.keys;
   var diff = $Dict.diff;
   var intersect = $Dict.intersect;
   var union = $Dict.union;
   var member = $Dict.member;
   var remove = $Dict.remove;
   var insert = function (k) {
      return A2($Dict.insert,
      k,
      {ctor: "_Tuple0"});
   };
   var singleton = function (k) {
      return A2($Dict.singleton,
      k,
      {ctor: "_Tuple0"});
   };
   var empty = $Dict.empty;
   var fromList = function (xs) {
      return A3($List.foldl,
      insert,
      empty,
      xs);
   };
   var map = F2(function (f,s) {
      return fromList(A2($List.map,
      f,
      toList(s)));
   });
   _elm.Set.values = {_op: _op
                     ,empty: empty
                     ,singleton: singleton
                     ,insert: insert
                     ,remove: remove
                     ,member: member
                     ,foldl: foldl
                     ,foldr: foldr
                     ,map: map
                     ,filter: filter
                     ,partition: partition
                     ,union: union
                     ,intersect: intersect
                     ,diff: diff
                     ,toList: toList
                     ,fromList: fromList};
   return _elm.Set.values;
};
Elm.Signal = Elm.Signal || {};
Elm.Signal.make = function (_elm) {
   "use strict";
   _elm.Signal = _elm.Signal || {};
   if (_elm.Signal.values)
   return _elm.Signal.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Signal",
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Native$Signal = Elm.Native.Signal.make(_elm),
   $Task = Elm.Task.make(_elm);
   var send = F2(function (_v0,
   value) {
      return function () {
         switch (_v0.ctor)
         {case "Address":
            return A2($Task.onError,
              _v0._0(value),
              function (_v3) {
                 return function () {
                    return $Task.succeed({ctor: "_Tuple0"});
                 }();
              });}
         _U.badCase($moduleName,
         "between lines 370 and 371");
      }();
   });
   var Message = function (a) {
      return {ctor: "Message"
             ,_0: a};
   };
   var message = F2(function (_v5,
   value) {
      return function () {
         switch (_v5.ctor)
         {case "Address":
            return Message(_v5._0(value));}
         _U.badCase($moduleName,
         "on line 352, column 5 to 24");
      }();
   });
   var mailbox = $Native$Signal.mailbox;
   var Address = function (a) {
      return {ctor: "Address"
             ,_0: a};
   };
   var forwardTo = F2(function (_v8,
   f) {
      return function () {
         switch (_v8.ctor)
         {case "Address":
            return Address(function (x) {
                 return _v8._0(f(x));
              });}
         _U.badCase($moduleName,
         "on line 339, column 5 to 29");
      }();
   });
   var Mailbox = F2(function (a,
   b) {
      return {_: {}
             ,address: a
             ,signal: b};
   });
   var sampleOn = $Native$Signal.sampleOn;
   var dropRepeats = $Native$Signal.dropRepeats;
   var filterMap = $Native$Signal.filterMap;
   var filter = F3(function (isOk,
   base,
   signal) {
      return A3(filterMap,
      function (value) {
         return isOk(value) ? $Maybe.Just(value) : $Maybe.Nothing;
      },
      base,
      signal);
   });
   var merge = F2(function (left,
   right) {
      return A3($Native$Signal.genericMerge,
      $Basics.always,
      left,
      right);
   });
   var mergeMany = function (signalList) {
      return function () {
         var _v11 = $List.reverse(signalList);
         switch (_v11.ctor)
         {case "::":
            return A3($List.foldl,
              merge,
              _v11._0,
              _v11._1);
            case "[]":
            return $Debug.crash("mergeMany was given an empty list!");}
         _U.badCase($moduleName,
         "between lines 177 and 197");
      }();
   };
   var foldp = $Native$Signal.foldp;
   var map5 = $Native$Signal.map5;
   var map4 = $Native$Signal.map4;
   var map3 = $Native$Signal.map3;
   var map2 = $Native$Signal.map2;
   _op["~"] = F2(function (funcs,
   args) {
      return A3(map2,
      F2(function (f,v) {
         return f(v);
      }),
      funcs,
      args);
   });
   var map = $Native$Signal.map;
   _op["<~"] = map;
   var constant = $Native$Signal.constant;
   var Signal = {ctor: "Signal"};
   _elm.Signal.values = {_op: _op
                        ,merge: merge
                        ,mergeMany: mergeMany
                        ,map: map
                        ,map2: map2
                        ,map3: map3
                        ,map4: map4
                        ,map5: map5
                        ,constant: constant
                        ,dropRepeats: dropRepeats
                        ,filter: filter
                        ,filterMap: filterMap
                        ,sampleOn: sampleOn
                        ,foldp: foldp
                        ,mailbox: mailbox
                        ,send: send
                        ,message: message
                        ,forwardTo: forwardTo
                        ,Mailbox: Mailbox};
   return _elm.Signal.values;
};
Elm.String = Elm.String || {};
Elm.String.make = function (_elm) {
   "use strict";
   _elm.String = _elm.String || {};
   if (_elm.String.values)
   return _elm.String.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "String",
   $Maybe = Elm.Maybe.make(_elm),
   $Native$String = Elm.Native.String.make(_elm),
   $Result = Elm.Result.make(_elm);
   var fromList = $Native$String.fromList;
   var toList = $Native$String.toList;
   var toFloat = $Native$String.toFloat;
   var toInt = $Native$String.toInt;
   var indices = $Native$String.indexes;
   var indexes = $Native$String.indexes;
   var endsWith = $Native$String.endsWith;
   var startsWith = $Native$String.startsWith;
   var contains = $Native$String.contains;
   var all = $Native$String.all;
   var any = $Native$String.any;
   var toLower = $Native$String.toLower;
   var toUpper = $Native$String.toUpper;
   var lines = $Native$String.lines;
   var words = $Native$String.words;
   var trimRight = $Native$String.trimRight;
   var trimLeft = $Native$String.trimLeft;
   var trim = $Native$String.trim;
   var padRight = $Native$String.padRight;
   var padLeft = $Native$String.padLeft;
   var pad = $Native$String.pad;
   var dropRight = $Native$String.dropRight;
   var dropLeft = $Native$String.dropLeft;
   var right = $Native$String.right;
   var left = $Native$String.left;
   var slice = $Native$String.slice;
   var repeat = $Native$String.repeat;
   var join = $Native$String.join;
   var split = $Native$String.split;
   var foldr = $Native$String.foldr;
   var foldl = $Native$String.foldl;
   var reverse = $Native$String.reverse;
   var filter = $Native$String.filter;
   var map = $Native$String.map;
   var length = $Native$String.length;
   var concat = $Native$String.concat;
   var append = $Native$String.append;
   var uncons = $Native$String.uncons;
   var cons = $Native$String.cons;
   var fromChar = function ($char) {
      return A2(cons,$char,"");
   };
   var isEmpty = $Native$String.isEmpty;
   _elm.String.values = {_op: _op
                        ,isEmpty: isEmpty
                        ,length: length
                        ,reverse: reverse
                        ,repeat: repeat
                        ,cons: cons
                        ,uncons: uncons
                        ,fromChar: fromChar
                        ,append: append
                        ,concat: concat
                        ,split: split
                        ,join: join
                        ,words: words
                        ,lines: lines
                        ,slice: slice
                        ,left: left
                        ,right: right
                        ,dropLeft: dropLeft
                        ,dropRight: dropRight
                        ,contains: contains
                        ,startsWith: startsWith
                        ,endsWith: endsWith
                        ,indexes: indexes
                        ,indices: indices
                        ,toInt: toInt
                        ,toFloat: toFloat
                        ,toList: toList
                        ,fromList: fromList
                        ,toUpper: toUpper
                        ,toLower: toLower
                        ,pad: pad
                        ,padLeft: padLeft
                        ,padRight: padRight
                        ,trim: trim
                        ,trimLeft: trimLeft
                        ,trimRight: trimRight
                        ,map: map
                        ,filter: filter
                        ,foldl: foldl
                        ,foldr: foldr
                        ,any: any
                        ,all: all};
   return _elm.String.values;
};
Elm.Svg = Elm.Svg || {};
Elm.Svg.make = function (_elm) {
   "use strict";
   _elm.Svg = _elm.Svg || {};
   if (_elm.Svg.values)
   return _elm.Svg.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Svg",
   $Html = Elm.Html.make(_elm),
   $Json$Encode = Elm.Json.Encode.make(_elm),
   $List = Elm.List.make(_elm),
   $VirtualDom = Elm.VirtualDom.make(_elm);
   var svgNamespace = A2($VirtualDom.property,
   "namespace",
   $Json$Encode.string("http://www.w3.org/2000/svg"));
   var svgNode = F3(function (name,
   attributes,
   children) {
      return A3($VirtualDom.node,
      name,
      A2($List._op["::"],
      svgNamespace,
      attributes),
      children);
   });
   var svg = F2(function (attributes,
   children) {
      return A3(svgNode,
      "svg",
      attributes,
      children);
   });
   var foreignObject = F2(function (attributes,
   children) {
      return A3(svgNode,
      "foreignObject",
      attributes,
      children);
   });
   var animate = F2(function (attributes,
   children) {
      return A3(svgNode,
      "animate",
      attributes,
      children);
   });
   var animateColor = F2(function (attributes,
   children) {
      return A3(svgNode,
      "animateColor",
      attributes,
      children);
   });
   var animateMotion = F2(function (attributes,
   children) {
      return A3(svgNode,
      "animateMotion",
      attributes,
      children);
   });
   var animateTransform = F2(function (attributes,
   children) {
      return A3(svgNode,
      "animateTransform",
      attributes,
      children);
   });
   var mpath = F2(function (attributes,
   children) {
      return A3(svgNode,
      "mpath",
      attributes,
      children);
   });
   var set = F2(function (attributes,
   children) {
      return A3(svgNode,
      "set",
      attributes,
      children);
   });
   var a = F2(function (attributes,
   children) {
      return A3(svgNode,
      "a",
      attributes,
      children);
   });
   var defs = F2(function (attributes,
   children) {
      return A3(svgNode,
      "defs",
      attributes,
      children);
   });
   var g = F2(function (attributes,
   children) {
      return A3(svgNode,
      "g",
      attributes,
      children);
   });
   var marker = F2(function (attributes,
   children) {
      return A3(svgNode,
      "marker",
      attributes,
      children);
   });
   var mask = F2(function (attributes,
   children) {
      return A3(svgNode,
      "mask",
      attributes,
      children);
   });
   var missingGlyph = F2(function (attributes,
   children) {
      return A3(svgNode,
      "missingGlyph",
      attributes,
      children);
   });
   var pattern = F2(function (attributes,
   children) {
      return A3(svgNode,
      "pattern",
      attributes,
      children);
   });
   var $switch = F2(function (attributes,
   children) {
      return A3(svgNode,
      "switch",
      attributes,
      children);
   });
   var symbol = F2(function (attributes,
   children) {
      return A3(svgNode,
      "symbol",
      attributes,
      children);
   });
   var desc = F2(function (attributes,
   children) {
      return A3(svgNode,
      "desc",
      attributes,
      children);
   });
   var metadata = F2(function (attributes,
   children) {
      return A3(svgNode,
      "metadata",
      attributes,
      children);
   });
   var title = F2(function (attributes,
   children) {
      return A3(svgNode,
      "title",
      attributes,
      children);
   });
   var feBlend = F2(function (attributes,
   children) {
      return A3(svgNode,
      "feBlend",
      attributes,
      children);
   });
   var feColorMatrix = F2(function (attributes,
   children) {
      return A3(svgNode,
      "feColorMatrix",
      attributes,
      children);
   });
   var feComponentTransfer = F2(function (attributes,
   children) {
      return A3(svgNode,
      "feComponentTransfer",
      attributes,
      children);
   });
   var feComposite = F2(function (attributes,
   children) {
      return A3(svgNode,
      "feComposite",
      attributes,
      children);
   });
   var feConvolveMatrix = F2(function (attributes,
   children) {
      return A3(svgNode,
      "feConvolveMatrix",
      attributes,
      children);
   });
   var feDiffuseLighting = F2(function (attributes,
   children) {
      return A3(svgNode,
      "feDiffuseLighting",
      attributes,
      children);
   });
   var feDisplacementMap = F2(function (attributes,
   children) {
      return A3(svgNode,
      "feDisplacementMap",
      attributes,
      children);
   });
   var feFlood = F2(function (attributes,
   children) {
      return A3(svgNode,
      "feFlood",
      attributes,
      children);
   });
   var feFuncA = F2(function (attributes,
   children) {
      return A3(svgNode,
      "feFuncA",
      attributes,
      children);
   });
   var feFuncB = F2(function (attributes,
   children) {
      return A3(svgNode,
      "feFuncB",
      attributes,
      children);
   });
   var feFuncG = F2(function (attributes,
   children) {
      return A3(svgNode,
      "feFuncG",
      attributes,
      children);
   });
   var feFuncR = F2(function (attributes,
   children) {
      return A3(svgNode,
      "feFuncR",
      attributes,
      children);
   });
   var feGaussianBlur = F2(function (attributes,
   children) {
      return A3(svgNode,
      "feGaussianBlur",
      attributes,
      children);
   });
   var feImage = F2(function (attributes,
   children) {
      return A3(svgNode,
      "feImage",
      attributes,
      children);
   });
   var feMerge = F2(function (attributes,
   children) {
      return A3(svgNode,
      "feMerge",
      attributes,
      children);
   });
   var feMergeNode = F2(function (attributes,
   children) {
      return A3(svgNode,
      "feMergeNode",
      attributes,
      children);
   });
   var feMorphology = F2(function (attributes,
   children) {
      return A3(svgNode,
      "feMorphology",
      attributes,
      children);
   });
   var feOffset = F2(function (attributes,
   children) {
      return A3(svgNode,
      "feOffset",
      attributes,
      children);
   });
   var feSpecularLighting = F2(function (attributes,
   children) {
      return A3(svgNode,
      "feSpecularLighting",
      attributes,
      children);
   });
   var feTile = F2(function (attributes,
   children) {
      return A3(svgNode,
      "feTile",
      attributes,
      children);
   });
   var feTurbulence = F2(function (attributes,
   children) {
      return A3(svgNode,
      "feTurbulence",
      attributes,
      children);
   });
   var font = F2(function (attributes,
   children) {
      return A3(svgNode,
      "font",
      attributes,
      children);
   });
   var fontFace = F2(function (attributes,
   children) {
      return A3(svgNode,
      "fontFace",
      attributes,
      children);
   });
   var fontFaceFormat = F2(function (attributes,
   children) {
      return A3(svgNode,
      "fontFaceFormat",
      attributes,
      children);
   });
   var fontFaceName = F2(function (attributes,
   children) {
      return A3(svgNode,
      "fontFaceName",
      attributes,
      children);
   });
   var fontFaceSrc = F2(function (attributes,
   children) {
      return A3(svgNode,
      "fontFaceSrc",
      attributes,
      children);
   });
   var fontFaceUri = F2(function (attributes,
   children) {
      return A3(svgNode,
      "fontFaceUri",
      attributes,
      children);
   });
   var hkern = F2(function (attributes,
   children) {
      return A3(svgNode,
      "hkern",
      attributes,
      children);
   });
   var vkern = F2(function (attributes,
   children) {
      return A3(svgNode,
      "vkern",
      attributes,
      children);
   });
   var linearGradient = F2(function (attributes,
   children) {
      return A3(svgNode,
      "linearGradient",
      attributes,
      children);
   });
   var radialGradient = F2(function (attributes,
   children) {
      return A3(svgNode,
      "radialGradient",
      attributes,
      children);
   });
   var stop = F2(function (attributes,
   children) {
      return A3(svgNode,
      "stop",
      attributes,
      children);
   });
   var circle = F2(function (attributes,
   children) {
      return A3(svgNode,
      "circle",
      attributes,
      children);
   });
   var ellipse = F2(function (attributes,
   children) {
      return A3(svgNode,
      "ellipse",
      attributes,
      children);
   });
   var image = F2(function (attributes,
   children) {
      return A3(svgNode,
      "image",
      attributes,
      children);
   });
   var line = F2(function (attributes,
   children) {
      return A3(svgNode,
      "line",
      attributes,
      children);
   });
   var path = F2(function (attributes,
   children) {
      return A3(svgNode,
      "path",
      attributes,
      children);
   });
   var polygon = F2(function (attributes,
   children) {
      return A3(svgNode,
      "polygon",
      attributes,
      children);
   });
   var polyline = F2(function (attributes,
   children) {
      return A3(svgNode,
      "polyline",
      attributes,
      children);
   });
   var rect = F2(function (attributes,
   children) {
      return A3(svgNode,
      "rect",
      attributes,
      children);
   });
   var use = F2(function (attributes,
   children) {
      return A3(svgNode,
      "use",
      attributes,
      children);
   });
   var feDistantLight = F2(function (attributes,
   children) {
      return A3(svgNode,
      "feDistantLight",
      attributes,
      children);
   });
   var fePointLight = F2(function (attributes,
   children) {
      return A3(svgNode,
      "fePointLight",
      attributes,
      children);
   });
   var feSpotLight = F2(function (attributes,
   children) {
      return A3(svgNode,
      "feSpotLight",
      attributes,
      children);
   });
   var altGlyph = F2(function (attributes,
   children) {
      return A3(svgNode,
      "altGlyph",
      attributes,
      children);
   });
   var altGlyphDef = F2(function (attributes,
   children) {
      return A3(svgNode,
      "altGlyphDef",
      attributes,
      children);
   });
   var altGlyphItem = F2(function (attributes,
   children) {
      return A3(svgNode,
      "altGlyphItem",
      attributes,
      children);
   });
   var glyph = F2(function (attributes,
   children) {
      return A3(svgNode,
      "glyph",
      attributes,
      children);
   });
   var glyphRef = F2(function (attributes,
   children) {
      return A3(svgNode,
      "glyphRef",
      attributes,
      children);
   });
   var textPath = F2(function (attributes,
   children) {
      return A3(svgNode,
      "textPath",
      attributes,
      children);
   });
   var text = F2(function (attributes,
   children) {
      return A3(svgNode,
      "text",
      attributes,
      children);
   });
   var tref = F2(function (attributes,
   children) {
      return A3(svgNode,
      "tref",
      attributes,
      children);
   });
   var tspan = F2(function (attributes,
   children) {
      return A3(svgNode,
      "tspan",
      attributes,
      children);
   });
   var clipPath = F2(function (attributes,
   children) {
      return A3(svgNode,
      "clipPath",
      attributes,
      children);
   });
   var colorProfile = F2(function (attributes,
   children) {
      return A3(svgNode,
      "colorProfile",
      attributes,
      children);
   });
   var cursor = F2(function (attributes,
   children) {
      return A3(svgNode,
      "cursor",
      attributes,
      children);
   });
   var filter = F2(function (attributes,
   children) {
      return A3(svgNode,
      "filter",
      attributes,
      children);
   });
   var script = F2(function (attributes,
   children) {
      return A3(svgNode,
      "script",
      attributes,
      children);
   });
   var style = F2(function (attributes,
   children) {
      return A3(svgNode,
      "style",
      attributes,
      children);
   });
   var view = F2(function (attributes,
   children) {
      return A3(svgNode,
      "view",
      attributes,
      children);
   });
   _elm.Svg.values = {_op: _op
                     ,svgNamespace: svgNamespace
                     ,svgNode: svgNode
                     ,svg: svg
                     ,foreignObject: foreignObject
                     ,animate: animate
                     ,animateColor: animateColor
                     ,animateMotion: animateMotion
                     ,animateTransform: animateTransform
                     ,mpath: mpath
                     ,set: set
                     ,a: a
                     ,defs: defs
                     ,g: g
                     ,marker: marker
                     ,mask: mask
                     ,missingGlyph: missingGlyph
                     ,pattern: pattern
                     ,$switch: $switch
                     ,symbol: symbol
                     ,desc: desc
                     ,metadata: metadata
                     ,title: title
                     ,feBlend: feBlend
                     ,feColorMatrix: feColorMatrix
                     ,feComponentTransfer: feComponentTransfer
                     ,feComposite: feComposite
                     ,feConvolveMatrix: feConvolveMatrix
                     ,feDiffuseLighting: feDiffuseLighting
                     ,feDisplacementMap: feDisplacementMap
                     ,feFlood: feFlood
                     ,feFuncA: feFuncA
                     ,feFuncB: feFuncB
                     ,feFuncG: feFuncG
                     ,feFuncR: feFuncR
                     ,feGaussianBlur: feGaussianBlur
                     ,feImage: feImage
                     ,feMerge: feMerge
                     ,feMergeNode: feMergeNode
                     ,feMorphology: feMorphology
                     ,feOffset: feOffset
                     ,feSpecularLighting: feSpecularLighting
                     ,feTile: feTile
                     ,feTurbulence: feTurbulence
                     ,font: font
                     ,fontFace: fontFace
                     ,fontFaceFormat: fontFaceFormat
                     ,fontFaceName: fontFaceName
                     ,fontFaceSrc: fontFaceSrc
                     ,fontFaceUri: fontFaceUri
                     ,hkern: hkern
                     ,vkern: vkern
                     ,linearGradient: linearGradient
                     ,radialGradient: radialGradient
                     ,stop: stop
                     ,circle: circle
                     ,ellipse: ellipse
                     ,image: image
                     ,line: line
                     ,path: path
                     ,polygon: polygon
                     ,polyline: polyline
                     ,rect: rect
                     ,use: use
                     ,feDistantLight: feDistantLight
                     ,fePointLight: fePointLight
                     ,feSpotLight: feSpotLight
                     ,altGlyph: altGlyph
                     ,altGlyphDef: altGlyphDef
                     ,altGlyphItem: altGlyphItem
                     ,glyph: glyph
                     ,glyphRef: glyphRef
                     ,textPath: textPath
                     ,text: text
                     ,tref: tref
                     ,tspan: tspan
                     ,clipPath: clipPath
                     ,colorProfile: colorProfile
                     ,cursor: cursor
                     ,filter: filter
                     ,script: script
                     ,style: style
                     ,view: view};
   return _elm.Svg.values;
};
Elm.Svg = Elm.Svg || {};
Elm.Svg.Attributes = Elm.Svg.Attributes || {};
Elm.Svg.Attributes.make = function (_elm) {
   "use strict";
   _elm.Svg = _elm.Svg || {};
   _elm.Svg.Attributes = _elm.Svg.Attributes || {};
   if (_elm.Svg.Attributes.values)
   return _elm.Svg.Attributes.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Svg.Attributes",
   $Svg = Elm.Svg.make(_elm),
   $VirtualDom = Elm.VirtualDom.make(_elm);
   var writingMode = function (value) {
      return A2($VirtualDom.attribute,
      "writing-mode",
      value);
   };
   var wordSpacing = function (value) {
      return A2($VirtualDom.attribute,
      "word-spacing",
      value);
   };
   var visibility = function (value) {
      return A2($VirtualDom.attribute,
      "visibility",
      value);
   };
   var unicodeBidi = function (value) {
      return A2($VirtualDom.attribute,
      "unicode-bidi",
      value);
   };
   var textRendering = function (value) {
      return A2($VirtualDom.attribute,
      "text-rendering",
      value);
   };
   var textDecoration = function (value) {
      return A2($VirtualDom.attribute,
      "text-decoration",
      value);
   };
   var textAnchor = function (value) {
      return A2($VirtualDom.attribute,
      "text-anchor",
      value);
   };
   var stroke = function (value) {
      return A2($VirtualDom.attribute,
      "stroke",
      value);
   };
   var strokeWidth = function (value) {
      return A2($VirtualDom.attribute,
      "stroke-width",
      value);
   };
   var strokeOpacity = function (value) {
      return A2($VirtualDom.attribute,
      "stroke-opacity",
      value);
   };
   var strokeMiterlimit = function (value) {
      return A2($VirtualDom.attribute,
      "stroke-miterlimit",
      value);
   };
   var strokeLinejoin = function (value) {
      return A2($VirtualDom.attribute,
      "stroke-linejoin",
      value);
   };
   var strokeLinecap = function (value) {
      return A2($VirtualDom.attribute,
      "stroke-linecap",
      value);
   };
   var strokeDashoffset = function (value) {
      return A2($VirtualDom.attribute,
      "stroke-dashoffset",
      value);
   };
   var strokeDasharray = function (value) {
      return A2($VirtualDom.attribute,
      "stroke-dasharray",
      value);
   };
   var stopOpacity = function (value) {
      return A2($VirtualDom.attribute,
      "stop-opacity",
      value);
   };
   var stopColor = function (value) {
      return A2($VirtualDom.attribute,
      "stop-color",
      value);
   };
   var shapeRendering = function (value) {
      return A2($VirtualDom.attribute,
      "shape-rendering",
      value);
   };
   var pointerEvents = function (value) {
      return A2($VirtualDom.attribute,
      "pointer-events",
      value);
   };
   var overflow = function (value) {
      return A2($VirtualDom.attribute,
      "overflow",
      value);
   };
   var opacity = function (value) {
      return A2($VirtualDom.attribute,
      "opacity",
      value);
   };
   var mask = function (value) {
      return A2($VirtualDom.attribute,
      "mask",
      value);
   };
   var markerStart = function (value) {
      return A2($VirtualDom.attribute,
      "marker-start",
      value);
   };
   var markerMid = function (value) {
      return A2($VirtualDom.attribute,
      "marker-mid",
      value);
   };
   var markerEnd = function (value) {
      return A2($VirtualDom.attribute,
      "marker-end",
      value);
   };
   var lightingColor = function (value) {
      return A2($VirtualDom.attribute,
      "lighting-color",
      value);
   };
   var letterSpacing = function (value) {
      return A2($VirtualDom.attribute,
      "letter-spacing",
      value);
   };
   var kerning = function (value) {
      return A2($VirtualDom.attribute,
      "kerning",
      value);
   };
   var imageRendering = function (value) {
      return A2($VirtualDom.attribute,
      "image-rendering",
      value);
   };
   var glyphOrientationVertical = function (value) {
      return A2($VirtualDom.attribute,
      "glyph-orientation-vertical",
      value);
   };
   var glyphOrientationHorizontal = function (value) {
      return A2($VirtualDom.attribute,
      "glyph-orientation-horizontal",
      value);
   };
   var fontWeight = function (value) {
      return A2($VirtualDom.attribute,
      "font-weight",
      value);
   };
   var fontVariant = function (value) {
      return A2($VirtualDom.attribute,
      "font-variant",
      value);
   };
   var fontStyle = function (value) {
      return A2($VirtualDom.attribute,
      "font-style",
      value);
   };
   var fontStretch = function (value) {
      return A2($VirtualDom.attribute,
      "font-stretch",
      value);
   };
   var fontSize = function (value) {
      return A2($VirtualDom.attribute,
      "font-size",
      value);
   };
   var fontSizeAdjust = function (value) {
      return A2($VirtualDom.attribute,
      "font-size-adjust",
      value);
   };
   var fontFamily = function (value) {
      return A2($VirtualDom.attribute,
      "font-family",
      value);
   };
   var floodOpacity = function (value) {
      return A2($VirtualDom.attribute,
      "flood-opacity",
      value);
   };
   var floodColor = function (value) {
      return A2($VirtualDom.attribute,
      "flood-color",
      value);
   };
   var filter = function (value) {
      return A2($VirtualDom.attribute,
      "filter",
      value);
   };
   var fill = function (value) {
      return A2($VirtualDom.attribute,
      "fill",
      value);
   };
   var fillRule = function (value) {
      return A2($VirtualDom.attribute,
      "fill-rule",
      value);
   };
   var fillOpacity = function (value) {
      return A2($VirtualDom.attribute,
      "fill-opacity",
      value);
   };
   var enableBackground = function (value) {
      return A2($VirtualDom.attribute,
      "enable-background",
      value);
   };
   var dominantBaseline = function (value) {
      return A2($VirtualDom.attribute,
      "dominant-baseline",
      value);
   };
   var display = function (value) {
      return A2($VirtualDom.attribute,
      "display",
      value);
   };
   var direction = function (value) {
      return A2($VirtualDom.attribute,
      "direction",
      value);
   };
   var cursor = function (value) {
      return A2($VirtualDom.attribute,
      "cursor",
      value);
   };
   var color = function (value) {
      return A2($VirtualDom.attribute,
      "color",
      value);
   };
   var colorRendering = function (value) {
      return A2($VirtualDom.attribute,
      "color-rendering",
      value);
   };
   var colorProfile = function (value) {
      return A2($VirtualDom.attribute,
      "color-profile",
      value);
   };
   var colorInterpolation = function (value) {
      return A2($VirtualDom.attribute,
      "color-interpolation",
      value);
   };
   var colorInterpolationFilters = function (value) {
      return A2($VirtualDom.attribute,
      "color-interpolation-filters",
      value);
   };
   var clip = function (value) {
      return A2($VirtualDom.attribute,
      "clip",
      value);
   };
   var clipRule = function (value) {
      return A2($VirtualDom.attribute,
      "clip-rule",
      value);
   };
   var clipPath = function (value) {
      return A2($VirtualDom.attribute,
      "clip-path",
      value);
   };
   var baselineShift = function (value) {
      return A2($VirtualDom.attribute,
      "baseline-shift",
      value);
   };
   var alignmentBaseline = function (value) {
      return A2($VirtualDom.attribute,
      "alignment-baseline",
      value);
   };
   var zoomAndPan = function (value) {
      return A2($VirtualDom.attribute,
      "zoomAndPan",
      value);
   };
   var z = function (value) {
      return A2($VirtualDom.attribute,
      "z",
      value);
   };
   var yChannelSelector = function (value) {
      return A2($VirtualDom.attribute,
      "yChannelSelector",
      value);
   };
   var y2 = function (value) {
      return A2($VirtualDom.attribute,
      "y2",
      value);
   };
   var y1 = function (value) {
      return A2($VirtualDom.attribute,
      "y1",
      value);
   };
   var y = function (value) {
      return A2($VirtualDom.attribute,
      "y",
      value);
   };
   var xmlSpace = function (value) {
      return A2($VirtualDom.attribute,
      "xml:space",
      value);
   };
   var xmlLang = function (value) {
      return A2($VirtualDom.attribute,
      "xml:lang",
      value);
   };
   var xmlBase = function (value) {
      return A2($VirtualDom.attribute,
      "xml:base",
      value);
   };
   var xlinkType = function (value) {
      return A2($VirtualDom.attribute,
      "xlink:type",
      value);
   };
   var xlinkTitle = function (value) {
      return A2($VirtualDom.attribute,
      "xlink:title",
      value);
   };
   var xlinkShow = function (value) {
      return A2($VirtualDom.attribute,
      "xlink:show",
      value);
   };
   var xlinkRole = function (value) {
      return A2($VirtualDom.attribute,
      "xlink:role",
      value);
   };
   var xlinkHref = function (value) {
      return A2($VirtualDom.attribute,
      "xlink:href",
      value);
   };
   var xlinkArcrole = function (value) {
      return A2($VirtualDom.attribute,
      "xlink:arcrole",
      value);
   };
   var xlinkActuate = function (value) {
      return A2($VirtualDom.attribute,
      "xlink:actuate",
      value);
   };
   var xChannelSelector = function (value) {
      return A2($VirtualDom.attribute,
      "xChannelSelector",
      value);
   };
   var x2 = function (value) {
      return A2($VirtualDom.attribute,
      "x2",
      value);
   };
   var x1 = function (value) {
      return A2($VirtualDom.attribute,
      "x1",
      value);
   };
   var xHeight = function (value) {
      return A2($VirtualDom.attribute,
      "x-height",
      value);
   };
   var x = function (value) {
      return A2($VirtualDom.attribute,
      "x",
      value);
   };
   var widths = function (value) {
      return A2($VirtualDom.attribute,
      "widths",
      value);
   };
   var width = function (value) {
      return A2($VirtualDom.attribute,
      "width",
      value);
   };
   var viewTarget = function (value) {
      return A2($VirtualDom.attribute,
      "viewTarget",
      value);
   };
   var viewBox = function (value) {
      return A2($VirtualDom.attribute,
      "viewBox",
      value);
   };
   var vertOriginY = function (value) {
      return A2($VirtualDom.attribute,
      "vert-origin-y",
      value);
   };
   var vertOriginX = function (value) {
      return A2($VirtualDom.attribute,
      "vert-origin-x",
      value);
   };
   var vertAdvY = function (value) {
      return A2($VirtualDom.attribute,
      "vert-adv-y",
      value);
   };
   var version = function (value) {
      return A2($VirtualDom.attribute,
      "version",
      value);
   };
   var values = function (value) {
      return A2($VirtualDom.attribute,
      "values",
      value);
   };
   var vMathematical = function (value) {
      return A2($VirtualDom.attribute,
      "v-mathematical",
      value);
   };
   var vIdeographic = function (value) {
      return A2($VirtualDom.attribute,
      "v-ideographic",
      value);
   };
   var vHanging = function (value) {
      return A2($VirtualDom.attribute,
      "v-hanging",
      value);
   };
   var vAlphabetic = function (value) {
      return A2($VirtualDom.attribute,
      "v-alphabetic",
      value);
   };
   var unitsPerEm = function (value) {
      return A2($VirtualDom.attribute,
      "units-per-em",
      value);
   };
   var unicodeRange = function (value) {
      return A2($VirtualDom.attribute,
      "unicode-range",
      value);
   };
   var unicode = function (value) {
      return A2($VirtualDom.attribute,
      "unicode",
      value);
   };
   var underlineThickness = function (value) {
      return A2($VirtualDom.attribute,
      "underline-thickness",
      value);
   };
   var underlinePosition = function (value) {
      return A2($VirtualDom.attribute,
      "underline-position",
      value);
   };
   var u2 = function (value) {
      return A2($VirtualDom.attribute,
      "u2",
      value);
   };
   var u1 = function (value) {
      return A2($VirtualDom.attribute,
      "u1",
      value);
   };
   var type$ = function (value) {
      return A2($VirtualDom.attribute,
      "type",
      value);
   };
   var transform = function (value) {
      return A2($VirtualDom.attribute,
      "transform",
      value);
   };
   var to = function (value) {
      return A2($VirtualDom.attribute,
      "to",
      value);
   };
   var title = function (value) {
      return A2($VirtualDom.attribute,
      "title",
      value);
   };
   var textLength = function (value) {
      return A2($VirtualDom.attribute,
      "textLength",
      value);
   };
   var targetY = function (value) {
      return A2($VirtualDom.attribute,
      "targetY",
      value);
   };
   var targetX = function (value) {
      return A2($VirtualDom.attribute,
      "targetX",
      value);
   };
   var target = function (value) {
      return A2($VirtualDom.attribute,
      "target",
      value);
   };
   var tableValues = function (value) {
      return A2($VirtualDom.attribute,
      "tableValues",
      value);
   };
   var systemLanguage = function (value) {
      return A2($VirtualDom.attribute,
      "systemLanguage",
      value);
   };
   var surfaceScale = function (value) {
      return A2($VirtualDom.attribute,
      "surfaceScale",
      value);
   };
   var style = function (value) {
      return A2($VirtualDom.attribute,
      "style",
      value);
   };
   var string = function (value) {
      return A2($VirtualDom.attribute,
      "string",
      value);
   };
   var strikethroughThickness = function (value) {
      return A2($VirtualDom.attribute,
      "strikethrough-thickness",
      value);
   };
   var strikethroughPosition = function (value) {
      return A2($VirtualDom.attribute,
      "strikethrough-position",
      value);
   };
   var stitchTiles = function (value) {
      return A2($VirtualDom.attribute,
      "stitchTiles",
      value);
   };
   var stemv = function (value) {
      return A2($VirtualDom.attribute,
      "stemv",
      value);
   };
   var stemh = function (value) {
      return A2($VirtualDom.attribute,
      "stemh",
      value);
   };
   var stdDeviation = function (value) {
      return A2($VirtualDom.attribute,
      "stdDeviation",
      value);
   };
   var startOffset = function (value) {
      return A2($VirtualDom.attribute,
      "startOffset",
      value);
   };
   var spreadMethod = function (value) {
      return A2($VirtualDom.attribute,
      "spreadMethod",
      value);
   };
   var speed = function (value) {
      return A2($VirtualDom.attribute,
      "speed",
      value);
   };
   var specularExponent = function (value) {
      return A2($VirtualDom.attribute,
      "specularExponent",
      value);
   };
   var specularConstant = function (value) {
      return A2($VirtualDom.attribute,
      "specularConstant",
      value);
   };
   var spacing = function (value) {
      return A2($VirtualDom.attribute,
      "spacing",
      value);
   };
   var slope = function (value) {
      return A2($VirtualDom.attribute,
      "slope",
      value);
   };
   var seed = function (value) {
      return A2($VirtualDom.attribute,
      "seed",
      value);
   };
   var scale = function (value) {
      return A2($VirtualDom.attribute,
      "scale",
      value);
   };
   var ry = function (value) {
      return A2($VirtualDom.attribute,
      "ry",
      value);
   };
   var rx = function (value) {
      return A2($VirtualDom.attribute,
      "rx",
      value);
   };
   var rotate = function (value) {
      return A2($VirtualDom.attribute,
      "rotate",
      value);
   };
   var result = function (value) {
      return A2($VirtualDom.attribute,
      "result",
      value);
   };
   var restart = function (value) {
      return A2($VirtualDom.attribute,
      "restart",
      value);
   };
   var requiredFeatures = function (value) {
      return A2($VirtualDom.attribute,
      "requiredFeatures",
      value);
   };
   var requiredExtensions = function (value) {
      return A2($VirtualDom.attribute,
      "requiredExtensions",
      value);
   };
   var repeatDur = function (value) {
      return A2($VirtualDom.attribute,
      "repeatDur",
      value);
   };
   var repeatCount = function (value) {
      return A2($VirtualDom.attribute,
      "repeatCount",
      value);
   };
   var renderingIntent = function (value) {
      return A2($VirtualDom.attribute,
      "rendering-intent",
      value);
   };
   var refY = function (value) {
      return A2($VirtualDom.attribute,
      "refY",
      value);
   };
   var refX = function (value) {
      return A2($VirtualDom.attribute,
      "refX",
      value);
   };
   var radius = function (value) {
      return A2($VirtualDom.attribute,
      "radius",
      value);
   };
   var r = function (value) {
      return A2($VirtualDom.attribute,
      "r",
      value);
   };
   var primitiveUnits = function (value) {
      return A2($VirtualDom.attribute,
      "primitiveUnits",
      value);
   };
   var preserveAspectRatio = function (value) {
      return A2($VirtualDom.attribute,
      "preserveAspectRatio",
      value);
   };
   var preserveAlpha = function (value) {
      return A2($VirtualDom.attribute,
      "preserveAlpha",
      value);
   };
   var pointsAtZ = function (value) {
      return A2($VirtualDom.attribute,
      "pointsAtZ",
      value);
   };
   var pointsAtY = function (value) {
      return A2($VirtualDom.attribute,
      "pointsAtY",
      value);
   };
   var pointsAtX = function (value) {
      return A2($VirtualDom.attribute,
      "pointsAtX",
      value);
   };
   var points = function (value) {
      return A2($VirtualDom.attribute,
      "points",
      value);
   };
   var pointOrder = function (value) {
      return A2($VirtualDom.attribute,
      "point-order",
      value);
   };
   var patternUnits = function (value) {
      return A2($VirtualDom.attribute,
      "patternUnits",
      value);
   };
   var patternTransform = function (value) {
      return A2($VirtualDom.attribute,
      "patternTransform",
      value);
   };
   var patternContentUnits = function (value) {
      return A2($VirtualDom.attribute,
      "patternContentUnits",
      value);
   };
   var pathLength = function (value) {
      return A2($VirtualDom.attribute,
      "pathLength",
      value);
   };
   var path = function (value) {
      return A2($VirtualDom.attribute,
      "path",
      value);
   };
   var panose1 = function (value) {
      return A2($VirtualDom.attribute,
      "panose-1",
      value);
   };
   var overlineThickness = function (value) {
      return A2($VirtualDom.attribute,
      "overline-thickness",
      value);
   };
   var overlinePosition = function (value) {
      return A2($VirtualDom.attribute,
      "overline-position",
      value);
   };
   var origin = function (value) {
      return A2($VirtualDom.attribute,
      "origin",
      value);
   };
   var orientation = function (value) {
      return A2($VirtualDom.attribute,
      "orientation",
      value);
   };
   var orient = function (value) {
      return A2($VirtualDom.attribute,
      "orient",
      value);
   };
   var order = function (value) {
      return A2($VirtualDom.attribute,
      "order",
      value);
   };
   var operator = function (value) {
      return A2($VirtualDom.attribute,
      "operator",
      value);
   };
   var offset = function (value) {
      return A2($VirtualDom.attribute,
      "offset",
      value);
   };
   var numOctaves = function (value) {
      return A2($VirtualDom.attribute,
      "numOctaves",
      value);
   };
   var name = function (value) {
      return A2($VirtualDom.attribute,
      "name",
      value);
   };
   var mode = function (value) {
      return A2($VirtualDom.attribute,
      "mode",
      value);
   };
   var min = function (value) {
      return A2($VirtualDom.attribute,
      "min",
      value);
   };
   var method = function (value) {
      return A2($VirtualDom.attribute,
      "method",
      value);
   };
   var media = function (value) {
      return A2($VirtualDom.attribute,
      "media",
      value);
   };
   var max = function (value) {
      return A2($VirtualDom.attribute,
      "max",
      value);
   };
   var mathematical = function (value) {
      return A2($VirtualDom.attribute,
      "mathematical",
      value);
   };
   var maskUnits = function (value) {
      return A2($VirtualDom.attribute,
      "maskUnits",
      value);
   };
   var maskContentUnits = function (value) {
      return A2($VirtualDom.attribute,
      "maskContentUnits",
      value);
   };
   var markerWidth = function (value) {
      return A2($VirtualDom.attribute,
      "markerWidth",
      value);
   };
   var markerUnits = function (value) {
      return A2($VirtualDom.attribute,
      "markerUnits",
      value);
   };
   var markerHeight = function (value) {
      return A2($VirtualDom.attribute,
      "markerHeight",
      value);
   };
   var local = function (value) {
      return A2($VirtualDom.attribute,
      "local",
      value);
   };
   var limitingConeAngle = function (value) {
      return A2($VirtualDom.attribute,
      "limitingConeAngle",
      value);
   };
   var lengthAdjust = function (value) {
      return A2($VirtualDom.attribute,
      "lengthAdjust",
      value);
   };
   var lang = function (value) {
      return A2($VirtualDom.attribute,
      "lang",
      value);
   };
   var keyTimes = function (value) {
      return A2($VirtualDom.attribute,
      "keyTimes",
      value);
   };
   var keySplines = function (value) {
      return A2($VirtualDom.attribute,
      "keySplines",
      value);
   };
   var keyPoints = function (value) {
      return A2($VirtualDom.attribute,
      "keyPoints",
      value);
   };
   var kernelUnitLength = function (value) {
      return A2($VirtualDom.attribute,
      "kernelUnitLength",
      value);
   };
   var kernelMatrix = function (value) {
      return A2($VirtualDom.attribute,
      "kernelMatrix",
      value);
   };
   var k4 = function (value) {
      return A2($VirtualDom.attribute,
      "k4",
      value);
   };
   var k3 = function (value) {
      return A2($VirtualDom.attribute,
      "k3",
      value);
   };
   var k2 = function (value) {
      return A2($VirtualDom.attribute,
      "k2",
      value);
   };
   var k1 = function (value) {
      return A2($VirtualDom.attribute,
      "k1",
      value);
   };
   var k = function (value) {
      return A2($VirtualDom.attribute,
      "k",
      value);
   };
   var intercept = function (value) {
      return A2($VirtualDom.attribute,
      "intercept",
      value);
   };
   var in2 = function (value) {
      return A2($VirtualDom.attribute,
      "in2",
      value);
   };
   var in$ = function (value) {
      return A2($VirtualDom.attribute,
      "in",
      value);
   };
   var ideographic = function (value) {
      return A2($VirtualDom.attribute,
      "ideographic",
      value);
   };
   var id = function (value) {
      return A2($VirtualDom.attribute,
      "id",
      value);
   };
   var horizOriginY = function (value) {
      return A2($VirtualDom.attribute,
      "horiz-origin-y",
      value);
   };
   var horizOriginX = function (value) {
      return A2($VirtualDom.attribute,
      "horiz-origin-x",
      value);
   };
   var horizAdvX = function (value) {
      return A2($VirtualDom.attribute,
      "horiz-adv-x",
      value);
   };
   var height = function (value) {
      return A2($VirtualDom.attribute,
      "height",
      value);
   };
   var hanging = function (value) {
      return A2($VirtualDom.attribute,
      "hanging",
      value);
   };
   var gradientUnits = function (value) {
      return A2($VirtualDom.attribute,
      "gradientUnits",
      value);
   };
   var gradientTransform = function (value) {
      return A2($VirtualDom.attribute,
      "gradientTransform",
      value);
   };
   var glyphRef = function (value) {
      return A2($VirtualDom.attribute,
      "glyphRef",
      value);
   };
   var glyphName = function (value) {
      return A2($VirtualDom.attribute,
      "glyph-name",
      value);
   };
   var g2 = function (value) {
      return A2($VirtualDom.attribute,
      "g2",
      value);
   };
   var g1 = function (value) {
      return A2($VirtualDom.attribute,
      "g1",
      value);
   };
   var fy = function (value) {
      return A2($VirtualDom.attribute,
      "fy",
      value);
   };
   var fx = function (value) {
      return A2($VirtualDom.attribute,
      "fx",
      value);
   };
   var from = function (value) {
      return A2($VirtualDom.attribute,
      "from",
      value);
   };
   var format = function (value) {
      return A2($VirtualDom.attribute,
      "format",
      value);
   };
   var filterUnits = function (value) {
      return A2($VirtualDom.attribute,
      "filterUnits",
      value);
   };
   var filterRes = function (value) {
      return A2($VirtualDom.attribute,
      "filterRes",
      value);
   };
   var externalResourcesRequired = function (value) {
      return A2($VirtualDom.attribute,
      "externalResourcesRequired",
      value);
   };
   var exponent = function (value) {
      return A2($VirtualDom.attribute,
      "exponent",
      value);
   };
   var end = function (value) {
      return A2($VirtualDom.attribute,
      "end",
      value);
   };
   var elevation = function (value) {
      return A2($VirtualDom.attribute,
      "elevation",
      value);
   };
   var edgeMode = function (value) {
      return A2($VirtualDom.attribute,
      "edgeMode",
      value);
   };
   var dy = function (value) {
      return A2($VirtualDom.attribute,
      "dy",
      value);
   };
   var dx = function (value) {
      return A2($VirtualDom.attribute,
      "dx",
      value);
   };
   var dur = function (value) {
      return A2($VirtualDom.attribute,
      "dur",
      value);
   };
   var divisor = function (value) {
      return A2($VirtualDom.attribute,
      "divisor",
      value);
   };
   var diffuseConstant = function (value) {
      return A2($VirtualDom.attribute,
      "diffuseConstant",
      value);
   };
   var descent = function (value) {
      return A2($VirtualDom.attribute,
      "descent",
      value);
   };
   var decelerate = function (value) {
      return A2($VirtualDom.attribute,
      "decelerate",
      value);
   };
   var d = function (value) {
      return A2($VirtualDom.attribute,
      "d",
      value);
   };
   var cy = function (value) {
      return A2($VirtualDom.attribute,
      "cy",
      value);
   };
   var cx = function (value) {
      return A2($VirtualDom.attribute,
      "cx",
      value);
   };
   var contentStyleType = function (value) {
      return A2($VirtualDom.attribute,
      "contentStyleType",
      value);
   };
   var contentScriptType = function (value) {
      return A2($VirtualDom.attribute,
      "contentScriptType",
      value);
   };
   var clipPathUnits = function (value) {
      return A2($VirtualDom.attribute,
      "clipPathUnits",
      value);
   };
   var $class = function (value) {
      return A2($VirtualDom.attribute,
      "class",
      value);
   };
   var capHeight = function (value) {
      return A2($VirtualDom.attribute,
      "cap-height",
      value);
   };
   var calcMode = function (value) {
      return A2($VirtualDom.attribute,
      "calcMode",
      value);
   };
   var by = function (value) {
      return A2($VirtualDom.attribute,
      "by",
      value);
   };
   var bias = function (value) {
      return A2($VirtualDom.attribute,
      "bias",
      value);
   };
   var begin = function (value) {
      return A2($VirtualDom.attribute,
      "begin",
      value);
   };
   var bbox = function (value) {
      return A2($VirtualDom.attribute,
      "bbox",
      value);
   };
   var baseProfile = function (value) {
      return A2($VirtualDom.attribute,
      "baseProfile",
      value);
   };
   var baseFrequency = function (value) {
      return A2($VirtualDom.attribute,
      "baseFrequency",
      value);
   };
   var azimuth = function (value) {
      return A2($VirtualDom.attribute,
      "azimuth",
      value);
   };
   var autoReverse = function (value) {
      return A2($VirtualDom.attribute,
      "autoReverse",
      value);
   };
   var attributeType = function (value) {
      return A2($VirtualDom.attribute,
      "attributeType",
      value);
   };
   var attributeName = function (value) {
      return A2($VirtualDom.attribute,
      "attributeName",
      value);
   };
   var ascent = function (value) {
      return A2($VirtualDom.attribute,
      "ascent",
      value);
   };
   var arabicForm = function (value) {
      return A2($VirtualDom.attribute,
      "arabic-form",
      value);
   };
   var amplitude = function (value) {
      return A2($VirtualDom.attribute,
      "amplitude",
      value);
   };
   var allowReorder = function (value) {
      return A2($VirtualDom.attribute,
      "allowReorder",
      value);
   };
   var alphabetic = function (value) {
      return A2($VirtualDom.attribute,
      "alphabetic",
      value);
   };
   var additive = function (value) {
      return A2($VirtualDom.attribute,
      "additive",
      value);
   };
   var accumulate = function (value) {
      return A2($VirtualDom.attribute,
      "accumulate",
      value);
   };
   var accelerate = function (value) {
      return A2($VirtualDom.attribute,
      "accelerate",
      value);
   };
   var accentHeight = function (value) {
      return A2($VirtualDom.attribute,
      "accent-height",
      value);
   };
   _elm.Svg.Attributes.values = {_op: _op
                                ,accentHeight: accentHeight
                                ,accelerate: accelerate
                                ,accumulate: accumulate
                                ,additive: additive
                                ,alphabetic: alphabetic
                                ,allowReorder: allowReorder
                                ,amplitude: amplitude
                                ,arabicForm: arabicForm
                                ,ascent: ascent
                                ,attributeName: attributeName
                                ,attributeType: attributeType
                                ,autoReverse: autoReverse
                                ,azimuth: azimuth
                                ,baseFrequency: baseFrequency
                                ,baseProfile: baseProfile
                                ,bbox: bbox
                                ,begin: begin
                                ,bias: bias
                                ,by: by
                                ,calcMode: calcMode
                                ,capHeight: capHeight
                                ,$class: $class
                                ,clipPathUnits: clipPathUnits
                                ,contentScriptType: contentScriptType
                                ,contentStyleType: contentStyleType
                                ,cx: cx
                                ,cy: cy
                                ,d: d
                                ,decelerate: decelerate
                                ,descent: descent
                                ,diffuseConstant: diffuseConstant
                                ,divisor: divisor
                                ,dur: dur
                                ,dx: dx
                                ,dy: dy
                                ,edgeMode: edgeMode
                                ,elevation: elevation
                                ,end: end
                                ,exponent: exponent
                                ,externalResourcesRequired: externalResourcesRequired
                                ,filterRes: filterRes
                                ,filterUnits: filterUnits
                                ,format: format
                                ,from: from
                                ,fx: fx
                                ,fy: fy
                                ,g1: g1
                                ,g2: g2
                                ,glyphName: glyphName
                                ,glyphRef: glyphRef
                                ,gradientTransform: gradientTransform
                                ,gradientUnits: gradientUnits
                                ,hanging: hanging
                                ,height: height
                                ,horizAdvX: horizAdvX
                                ,horizOriginX: horizOriginX
                                ,horizOriginY: horizOriginY
                                ,id: id
                                ,ideographic: ideographic
                                ,in$: in$
                                ,in2: in2
                                ,intercept: intercept
                                ,k: k
                                ,k1: k1
                                ,k2: k2
                                ,k3: k3
                                ,k4: k4
                                ,kernelMatrix: kernelMatrix
                                ,kernelUnitLength: kernelUnitLength
                                ,keyPoints: keyPoints
                                ,keySplines: keySplines
                                ,keyTimes: keyTimes
                                ,lang: lang
                                ,lengthAdjust: lengthAdjust
                                ,limitingConeAngle: limitingConeAngle
                                ,local: local
                                ,markerHeight: markerHeight
                                ,markerUnits: markerUnits
                                ,markerWidth: markerWidth
                                ,maskContentUnits: maskContentUnits
                                ,maskUnits: maskUnits
                                ,mathematical: mathematical
                                ,max: max
                                ,media: media
                                ,method: method
                                ,min: min
                                ,mode: mode
                                ,name: name
                                ,numOctaves: numOctaves
                                ,offset: offset
                                ,operator: operator
                                ,order: order
                                ,orient: orient
                                ,orientation: orientation
                                ,origin: origin
                                ,overlinePosition: overlinePosition
                                ,overlineThickness: overlineThickness
                                ,panose1: panose1
                                ,path: path
                                ,pathLength: pathLength
                                ,patternContentUnits: patternContentUnits
                                ,patternTransform: patternTransform
                                ,patternUnits: patternUnits
                                ,pointOrder: pointOrder
                                ,points: points
                                ,pointsAtX: pointsAtX
                                ,pointsAtY: pointsAtY
                                ,pointsAtZ: pointsAtZ
                                ,preserveAlpha: preserveAlpha
                                ,preserveAspectRatio: preserveAspectRatio
                                ,primitiveUnits: primitiveUnits
                                ,r: r
                                ,radius: radius
                                ,refX: refX
                                ,refY: refY
                                ,renderingIntent: renderingIntent
                                ,repeatCount: repeatCount
                                ,repeatDur: repeatDur
                                ,requiredExtensions: requiredExtensions
                                ,requiredFeatures: requiredFeatures
                                ,restart: restart
                                ,result: result
                                ,rotate: rotate
                                ,rx: rx
                                ,ry: ry
                                ,scale: scale
                                ,seed: seed
                                ,slope: slope
                                ,spacing: spacing
                                ,specularConstant: specularConstant
                                ,specularExponent: specularExponent
                                ,speed: speed
                                ,spreadMethod: spreadMethod
                                ,startOffset: startOffset
                                ,stdDeviation: stdDeviation
                                ,stemh: stemh
                                ,stemv: stemv
                                ,stitchTiles: stitchTiles
                                ,strikethroughPosition: strikethroughPosition
                                ,strikethroughThickness: strikethroughThickness
                                ,string: string
                                ,style: style
                                ,surfaceScale: surfaceScale
                                ,systemLanguage: systemLanguage
                                ,tableValues: tableValues
                                ,target: target
                                ,targetX: targetX
                                ,targetY: targetY
                                ,textLength: textLength
                                ,title: title
                                ,to: to
                                ,transform: transform
                                ,type$: type$
                                ,u1: u1
                                ,u2: u2
                                ,underlinePosition: underlinePosition
                                ,underlineThickness: underlineThickness
                                ,unicode: unicode
                                ,unicodeRange: unicodeRange
                                ,unitsPerEm: unitsPerEm
                                ,vAlphabetic: vAlphabetic
                                ,vHanging: vHanging
                                ,vIdeographic: vIdeographic
                                ,vMathematical: vMathematical
                                ,values: values
                                ,version: version
                                ,vertAdvY: vertAdvY
                                ,vertOriginX: vertOriginX
                                ,vertOriginY: vertOriginY
                                ,viewBox: viewBox
                                ,viewTarget: viewTarget
                                ,width: width
                                ,widths: widths
                                ,x: x
                                ,xHeight: xHeight
                                ,x1: x1
                                ,x2: x2
                                ,xChannelSelector: xChannelSelector
                                ,xlinkActuate: xlinkActuate
                                ,xlinkArcrole: xlinkArcrole
                                ,xlinkHref: xlinkHref
                                ,xlinkRole: xlinkRole
                                ,xlinkShow: xlinkShow
                                ,xlinkTitle: xlinkTitle
                                ,xlinkType: xlinkType
                                ,xmlBase: xmlBase
                                ,xmlLang: xmlLang
                                ,xmlSpace: xmlSpace
                                ,y: y
                                ,y1: y1
                                ,y2: y2
                                ,yChannelSelector: yChannelSelector
                                ,z: z
                                ,zoomAndPan: zoomAndPan
                                ,alignmentBaseline: alignmentBaseline
                                ,baselineShift: baselineShift
                                ,clipPath: clipPath
                                ,clipRule: clipRule
                                ,clip: clip
                                ,colorInterpolationFilters: colorInterpolationFilters
                                ,colorInterpolation: colorInterpolation
                                ,colorProfile: colorProfile
                                ,colorRendering: colorRendering
                                ,color: color
                                ,cursor: cursor
                                ,direction: direction
                                ,display: display
                                ,dominantBaseline: dominantBaseline
                                ,enableBackground: enableBackground
                                ,fillOpacity: fillOpacity
                                ,fillRule: fillRule
                                ,fill: fill
                                ,filter: filter
                                ,floodColor: floodColor
                                ,floodOpacity: floodOpacity
                                ,fontFamily: fontFamily
                                ,fontSizeAdjust: fontSizeAdjust
                                ,fontSize: fontSize
                                ,fontStretch: fontStretch
                                ,fontStyle: fontStyle
                                ,fontVariant: fontVariant
                                ,fontWeight: fontWeight
                                ,glyphOrientationHorizontal: glyphOrientationHorizontal
                                ,glyphOrientationVertical: glyphOrientationVertical
                                ,imageRendering: imageRendering
                                ,kerning: kerning
                                ,letterSpacing: letterSpacing
                                ,lightingColor: lightingColor
                                ,markerEnd: markerEnd
                                ,markerMid: markerMid
                                ,markerStart: markerStart
                                ,mask: mask
                                ,opacity: opacity
                                ,overflow: overflow
                                ,pointerEvents: pointerEvents
                                ,shapeRendering: shapeRendering
                                ,stopColor: stopColor
                                ,stopOpacity: stopOpacity
                                ,strokeDasharray: strokeDasharray
                                ,strokeDashoffset: strokeDashoffset
                                ,strokeLinecap: strokeLinecap
                                ,strokeLinejoin: strokeLinejoin
                                ,strokeMiterlimit: strokeMiterlimit
                                ,strokeOpacity: strokeOpacity
                                ,strokeWidth: strokeWidth
                                ,stroke: stroke
                                ,textAnchor: textAnchor
                                ,textDecoration: textDecoration
                                ,textRendering: textRendering
                                ,unicodeBidi: unicodeBidi
                                ,visibility: visibility
                                ,wordSpacing: wordSpacing
                                ,writingMode: writingMode};
   return _elm.Svg.Attributes.values;
};
Elm.Svg = Elm.Svg || {};
Elm.Svg.Events = Elm.Svg.Events || {};
Elm.Svg.Events.make = function (_elm) {
   "use strict";
   _elm.Svg = _elm.Svg || {};
   _elm.Svg.Events = _elm.Svg.Events || {};
   if (_elm.Svg.Events.values)
   return _elm.Svg.Events.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Svg.Events",
   $Basics = Elm.Basics.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Svg = Elm.Svg.make(_elm),
   $VirtualDom = Elm.VirtualDom.make(_elm);
   var on = $VirtualDom.on;
   var messageOn = F2(function (name,
   msg) {
      return A3(on,
      name,
      $Json$Decode.value,
      $Basics.always(msg));
   });
   var onBegin = messageOn("begin");
   var onEnd = messageOn("end");
   var onRepeat = messageOn("repeat");
   var onAbort = messageOn("abort");
   var onError = messageOn("error");
   var onResize = messageOn("resize");
   var onScroll = messageOn("scroll");
   var onLoad = messageOn("load");
   var onUnload = messageOn("unload");
   var onZoom = messageOn("zoom");
   var onActivate = messageOn("activate");
   var onClick = messageOn("click");
   var onFocusIn = messageOn("focusin");
   var onFocusOut = messageOn("focusout");
   var onMouseDown = messageOn("mousedown");
   var onMouseMove = messageOn("mousemove");
   var onMouseOut = messageOn("mouseout");
   var onMouseOver = messageOn("mouseover");
   var onMouseUp = messageOn("mouseup");
   _elm.Svg.Events.values = {_op: _op
                            ,on: on
                            ,messageOn: messageOn
                            ,onBegin: onBegin
                            ,onEnd: onEnd
                            ,onRepeat: onRepeat
                            ,onAbort: onAbort
                            ,onError: onError
                            ,onResize: onResize
                            ,onScroll: onScroll
                            ,onLoad: onLoad
                            ,onUnload: onUnload
                            ,onZoom: onZoom
                            ,onActivate: onActivate
                            ,onClick: onClick
                            ,onFocusIn: onFocusIn
                            ,onFocusOut: onFocusOut
                            ,onMouseDown: onMouseDown
                            ,onMouseMove: onMouseMove
                            ,onMouseOut: onMouseOut
                            ,onMouseOver: onMouseOver
                            ,onMouseUp: onMouseUp};
   return _elm.Svg.Events.values;
};
Elm.Svg = Elm.Svg || {};
Elm.Svg.Lazy = Elm.Svg.Lazy || {};
Elm.Svg.Lazy.make = function (_elm) {
   "use strict";
   _elm.Svg = _elm.Svg || {};
   _elm.Svg.Lazy = _elm.Svg.Lazy || {};
   if (_elm.Svg.Lazy.values)
   return _elm.Svg.Lazy.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Svg.Lazy",
   $Svg = Elm.Svg.make(_elm),
   $VirtualDom = Elm.VirtualDom.make(_elm);
   var lazy3 = $VirtualDom.lazy3;
   var lazy2 = $VirtualDom.lazy2;
   var lazy = $VirtualDom.lazy;
   _elm.Svg.Lazy.values = {_op: _op
                          ,lazy: lazy
                          ,lazy2: lazy2
                          ,lazy3: lazy3};
   return _elm.Svg.Lazy.values;
};
Elm.Sync = Elm.Sync || {};
Elm.Sync.make = function (_elm) {
   "use strict";
   _elm.Sync = _elm.Sync || {};
   if (_elm.Sync.values)
   return _elm.Sync.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Sync",
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Eval = Elm.Eval.make(_elm),
   $Lang = Elm.Lang.make(_elm),
   $LangParser = Elm.LangParser.make(_elm),
   $LangSvg = Elm.LangSvg.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Set = Elm.Set.make(_elm),
   $String = Elm.String.make(_elm),
   $Utils = Elm.Utils.make(_elm);
   var zoneAssignments = $Dict.map(F2(function (i,
   _v0) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return A3($List.foldl,
              F2(function (_v4,acc) {
                 return function () {
                    switch (_v4.ctor)
                    {case "_Tuple2":
                       return function () {
                            switch (_v4._1.ctor)
                            {case "Just":
                               switch (_v4._1._0.ctor)
                                 {case "_Tuple2":
                                    return A3($Dict.insert,
                                      _v4._0,
                                      _v4._1._0._0,
                                      acc);}
                                 break;
                               case "Nothing": return acc;}
                            _U.badCase($moduleName,
                            "between lines 784 and 787");
                         }();}
                    _U.badCase($moduleName,
                    "between lines 784 and 787");
                 }();
              }),
              $Dict.empty,
              _v0._1);}
         _U.badCase($moduleName,
         "between lines 783 and 787");
      }();
   }));
   var tryToBeSmart = false;
   var LiveInfo = F3(function (a,
   b,
   c) {
      return {_: {}
             ,assignments: b
             ,initSubst: c
             ,triggers: a};
   });
   var strLoc_ = function (l) {
      return function () {
         var _ = l;
         var mx = function () {
            switch (_.ctor)
            {case "_Tuple3": return _._2;}
            _U.badCase($moduleName,
            "on line 647, column 18 to 19");
         }();
         return _U.eq(mx,
         "") ? $Lang.strLoc(l) : mx;
      }();
   };
   var strLocs = function ($) {
      return $Utils.braces($Utils.commas($List.map(strLoc_)($)));
   };
   var strRow = function (_v16) {
      return function () {
         switch (_v16.ctor)
         {case "_Tuple2":
            return function () {
                 switch (_v16._1.ctor)
                 {case "Just":
                    switch (_v16._1._0.ctor)
                      {case "_Tuple2":
                         return A2($Basics._op["++"],
                           A3($String.padRight,
                           18,
                           _U.chr(" "),
                           _v16._0),
                           A2($Basics._op["++"],
                           A3($String.padRight,
                           25,
                           _U.chr(" "),
                           _U.eq(_v16._1._0._0,
                           _L.fromArray([])) ? "" : strLocs(_v16._1._0._0)),
                           $Utils.spaces(A2($List.map,
                           strLocs,
                           _v16._1._0._1))));}
                      break;
                    case "Nothing":
                    return A3($String.padRight,
                      18,
                      _U.chr(" "),
                      _v16._0);}
                 _U.badCase($moduleName,
                 "between lines 637 and 642");
              }();}
         _U.badCase($moduleName,
         "between lines 637 and 642");
      }();
   };
   var strTable = function (d) {
      return $String.join("\n\n")($List.map(function (_v24) {
         return function () {
            switch (_v24.ctor)
            {case "_Tuple2":
               switch (_v24._1.ctor)
                 {case "_Tuple2":
                    return function () {
                         var s1 = A2($Basics._op["++"],
                         A2($LangSvg.addi,
                         "Shape ",
                         _v24._0),
                         A2($Basics._op["++"],
                         " ",
                         $Utils.parens(_v24._1._0)));
                         var sRows = A2($List.map,
                         strRow,
                         _v24._1._1);
                         return $Utils.lines(A2($List._op["::"],
                         s1,
                         sRows));
                      }();}
                 break;}
            _U.badCase($moduleName,
            "between lines 632 and 634");
         }();
      })($Dict.toList(d)));
   };
   var scoreOfLocs = function (locs) {
      return function () {
         var foo = F2(function (_v30,
         acc) {
            return function () {
               switch (_v30.ctor)
               {case "_Tuple3":
                  return function () {
                       var _ = A2($Utils.assert,
                       "scoreOfLocs",
                       _U.eq(_v30._1,$Lang.unann));
                       return _U.eq(_v30._2,
                       "") ? acc : acc + 1;
                    }();}
               _U.badCase($moduleName,
               "between lines 620 and 622");
            }();
         });
         return -1 * A3($List.foldl,
         foo,
         0,
         locs);
      }();
   };
   var getCount = F2(function (set,
   dict) {
      return A2($Maybe.withDefault,
      0,
      A2($Dict.get,set,dict));
   });
   var updateCount = F2(function (set,
   dict) {
      return A3($Dict.insert,
      set,
      1 + A2(getCount,set,dict),
      dict);
   });
   var assignTriggersV2 = function (d1) {
      return function () {
         var f = F3(function (i,
         _v35,
         _v36) {
            return function () {
               switch (_v36.ctor)
               {case "_Tuple2":
                  return function () {
                       switch (_v35.ctor)
                       {case "_Tuple2":
                          return function () {
                               var g = F2(function (_v43,
                               _v44) {
                                  return function () {
                                     switch (_v44.ctor)
                                     {case "_Tuple2":
                                        return function () {
                                             switch (_v43.ctor)
                                             {case "_Tuple2":
                                                switch (_v43._1.ctor)
                                                  {case "_Tuple2":
                                                     return function () {
                                                          var rankedSets = _v43._1._1;
                                                          var maybeChosenSet = A3($List.foldl,
                                                          F2(function (thisSet,
                                                          acc) {
                                                             return function () {
                                                                switch (acc.ctor)
                                                                {case "Just":
                                                                   return _U.cmp(A2(getCount,
                                                                     acc._0,
                                                                     _v44._0),
                                                                     A2(getCount,
                                                                     thisSet,
                                                                     _v44._0)) < 0 ? acc : $Maybe.Just(thisSet);
                                                                   case "Nothing":
                                                                   return $Maybe.Just(thisSet);}
                                                                _U.badCase($moduleName,
                                                                "between lines 576 and 580");
                                                             }();
                                                          }),
                                                          $Maybe.Nothing,
                                                          rankedSets);
                                                          return function () {
                                                             switch (maybeChosenSet.ctor)
                                                             {case "Just":
                                                                return {ctor: "_Tuple2"
                                                                       ,_0: A2(updateCount,
                                                                       maybeChosenSet._0,
                                                                       _v44._0)
                                                                       ,_1: A2($List._op["::"],
                                                                       {ctor: "_Tuple2"
                                                                       ,_0: _v43._0
                                                                       ,_1: $Maybe.Just({ctor: "_Tuple2"
                                                                                        ,_0: maybeChosenSet._0
                                                                                        ,_1: rankedSets})},
                                                                       _v44._1)};
                                                                case "Nothing":
                                                                return {ctor: "_Tuple2"
                                                                       ,_0: _v44._0
                                                                       ,_1: A2($List._op["::"],
                                                                       {ctor: "_Tuple2"
                                                                       ,_0: _v43._0
                                                                       ,_1: $Maybe.Nothing},
                                                                       _v44._1)};}
                                                             _U.badCase($moduleName,
                                                             "between lines 581 and 585");
                                                          }();
                                                       }();}
                                                  break;}
                                             _U.badCase($moduleName,
                                             "between lines 573 and 585");
                                          }();}
                                     _U.badCase($moduleName,
                                     "between lines 573 and 585");
                                  }();
                               });
                               var $ = A3($List.foldl,
                               g,
                               {ctor: "_Tuple2"
                               ,_0: _v36._0
                               ,_1: _L.fromArray([])},
                               _v35._1),
                               dictSetSeen = $._0,
                               zoneLists$ = $._1;
                               return {ctor: "_Tuple2"
                                      ,_0: dictSetSeen
                                      ,_1: A3($Dict.insert,
                                      i,
                                      {ctor: "_Tuple2"
                                      ,_0: _v35._0
                                      ,_1: $List.reverse(zoneLists$)},
                                      _v36._1)};
                            }();}
                       _U.badCase($moduleName,
                       "between lines 571 and 587");
                    }();}
               _U.badCase($moduleName,
               "between lines 571 and 587");
            }();
         });
         return $Basics.snd(A3($Dict.foldl,
         f,
         {ctor: "_Tuple2"
         ,_0: $Dict.empty
         ,_1: $Dict.empty},
         d1));
      }();
   };
   var assignTriggers = assignTriggersV2;
   var getTriggerType = F2(function (numAttrs,
   locs) {
      return function () {
         var n = $List.length(locs);
         return _U.eq(n,
         numAttrs) ? {ctor: "_Tuple0"} : _U.eq(n,
         1) ? {ctor: "_Tuple0"} : _U.badIf($moduleName,
         "between lines 551 and 552");
      }();
   });
   var assignTriggersV1 = function (d1) {
      return function () {
         var f = F3(function (i,
         _v57,
         _v58) {
            return function () {
               switch (_v58.ctor)
               {case "_Tuple2":
                  return function () {
                       switch (_v57.ctor)
                       {case "_Tuple2":
                          return function () {
                               var g = F2(function (_v65,
                               _v66) {
                                  return function () {
                                     switch (_v66.ctor)
                                     {case "_Tuple2":
                                        return function () {
                                             switch (_v65.ctor)
                                             {case "_Tuple2":
                                                switch (_v65._1.ctor)
                                                  {case "_Tuple2":
                                                     return function () {
                                                          var rankedSets = _v65._1._1;
                                                          var pred = function ($) {
                                                             return $Basics.not(A2($Basics.flip,
                                                             $Set.member,
                                                             _v66._0)($));
                                                          };
                                                          return function () {
                                                             var _v75 = {ctor: "_Tuple2"
                                                                        ,_0: A2($Utils.findFirst,
                                                                        pred,
                                                                        rankedSets)
                                                                        ,_1: rankedSets};
                                                             switch (_v75.ctor)
                                                             {case "_Tuple2":
                                                                switch (_v75._0.ctor)
                                                                  {case "Just":
                                                                     return function () {
                                                                          var _ = A2(getTriggerType,
                                                                          _v65._1._0,
                                                                          _v75._0._0);
                                                                          var setSeen3 = A2($Set.insert,
                                                                          _v75._0._0,
                                                                          _v66._0);
                                                                          var acc$ = A2($List._op["::"],
                                                                          {ctor: "_Tuple2"
                                                                          ,_0: _v65._0
                                                                          ,_1: $Maybe.Just({ctor: "_Tuple2"
                                                                                           ,_0: _v75._0._0
                                                                                           ,_1: A2($Utils.removeFirst,
                                                                                           _v75._0._0,
                                                                                           rankedSets)})},
                                                                          _v66._1);
                                                                          return {ctor: "_Tuple2"
                                                                                 ,_0: setSeen3
                                                                                 ,_1: acc$};
                                                                       }();
                                                                     case "Nothing":
                                                                     switch (_v75._1.ctor)
                                                                       {case "::":
                                                                          return function () {
                                                                               var _ = A2(getTriggerType,
                                                                               _v65._1._0,
                                                                               _v75._1._0);
                                                                               return {ctor: "_Tuple2"
                                                                                      ,_0: _v66._0
                                                                                      ,_1: A2($List._op["::"],
                                                                                      {ctor: "_Tuple2"
                                                                                      ,_0: _v65._0
                                                                                      ,_1: $Maybe.Just({ctor: "_Tuple2"
                                                                                                       ,_0: _v75._1._0
                                                                                                       ,_1: _v75._1._1})},
                                                                                      _v66._1)};
                                                                            }();
                                                                          case "[]":
                                                                          return {ctor: "_Tuple2"
                                                                                 ,_0: _v66._0
                                                                                 ,_1: A2($List._op["::"],
                                                                                 {ctor: "_Tuple2"
                                                                                 ,_0: _v65._0
                                                                                 ,_1: $Maybe.Nothing},
                                                                                 _v66._1)};}
                                                                       break;}
                                                                  break;}
                                                             _U.badCase($moduleName,
                                                             "between lines 601 and 611");
                                                          }();
                                                       }();}
                                                  break;}
                                             _U.badCase($moduleName,
                                             "between lines 599 and 611");
                                          }();}
                                     _U.badCase($moduleName,
                                     "between lines 599 and 611");
                                  }();
                               });
                               var $ = A3($List.foldl,
                               g,
                               {ctor: "_Tuple2"
                               ,_0: _v58._0
                               ,_1: _L.fromArray([])},
                               _v57._1),
                               setSeen = $._0,
                               zoneLists$ = $._1;
                               return {ctor: "_Tuple2"
                                      ,_0: setSeen
                                      ,_1: A3($Dict.insert,
                                      i,
                                      {ctor: "_Tuple2"
                                      ,_0: _v57._0
                                      ,_1: $List.reverse(zoneLists$)},
                                      _v58._1)};
                            }();}
                       _U.badCase($moduleName,
                       "between lines 597 and 613");
                    }();}
               _U.badCase($moduleName,
               "between lines 597 and 613");
            }();
         });
         return $Basics.snd(A3($Dict.foldl,
         f,
         {ctor: "_Tuple2"
         ,_0: $Set.empty
         ,_1: $Dict.empty},
         d1));
      }();
   };
   var getZones = F2(function (kind,
   extra) {
      return function () {
         var xy = function (i) {
            return _L.fromArray([A2($LangSvg.addi,
                                "x",
                                i)
                                ,A2($LangSvg.addi,"y",i)]);
         };
         var pt = function (i) {
            return {ctor: "_Tuple2"
                   ,_0: A2($LangSvg.addi,"Point",i)
                   ,_1: xy(i)};
         };
         var edge = F2(function (n,i) {
            return _U.cmp(i,
            n) < 0 ? {ctor: "_Tuple2"
                     ,_0: A2($LangSvg.addi,"Edge",i)
                     ,_1: A2($Basics._op["++"],
                     xy(i),
                     xy(i + 1))} : _U.eq(i,
            n) ? {ctor: "_Tuple2"
                 ,_0: A2($LangSvg.addi,"Edge",i)
                 ,_1: A2($Basics._op["++"],
                 xy(i),
                 xy(1))} : _U.badIf($moduleName,
            "between lines 529 and 530");
         });
         var interior = function (n) {
            return {ctor: "_Tuple2"
                   ,_0: "Interior"
                   ,_1: A2($List.concatMap,
                   xy,
                   _L.range(1,n))};
         };
         return function () {
            var _v81 = {ctor: "_Tuple2"
                       ,_0: kind
                       ,_1: extra};
            switch (_v81.ctor)
            {case "_Tuple2":
               switch (_v81._0)
                 {case "path":
                    switch (_v81._1.ctor)
                      {case "NumsPath":
                         return A2($List.map,
                           pt,
                           _L.range(1,
                           _v81._1._0.numPoints));}
                      break;
                    case "polygon":
                    switch (_v81._1.ctor)
                      {case "NumPoints":
                         return A2($Basics._op["++"],
                           A2($List.map,
                           pt,
                           _L.range(1,_v81._1._0)),
                           A2($Basics._op["++"],
                           A2($List.map,
                           edge(_v81._1._0),
                           _L.range(1,_v81._1._0)),
                           _L.fromArray([interior(_v81._1._0)])));}
                      break;
                    case "polyline":
                    switch (_v81._1.ctor)
                      {case "NumPoints":
                         return A2($Basics._op["++"],
                           A2($List.map,
                           pt,
                           _L.range(1,_v81._1._0)),
                           A2($List.map,
                           edge(_v81._1._0),
                           _L.range(1,_v81._1._0 - 1)));}
                      break;}
                 break;}
            return A2($Utils.fromJust_,
            A2($Basics._op["++"],
            "Sync.getZones ",
            kind),
            A2($Utils.maybeFind,
            kind,
            $LangSvg.zones));
         }();
      }();
   });
   var allowOverConstrained = true;
   var createLocLists = function (sets) {
      return function () {
         var removeEmpties = $List.filter(function ($) {
            return F2(function (x,y) {
               return !_U.eq(x,y);
            })(0)($Utils.setCardinal($));
         });
         var foo = $Utils.cartProdWithDiff(removeEmpties(sets));
         var bar = $Basics.not(allowOverConstrained) ? _L.fromArray([]) : $List.map($Utils.singleton)($Set.toList($Utils.intersectMany(sets)));
         return A2($Basics._op["++"],
         foo,
         bar);
      }();
   };
   var NumsPath = function (a) {
      return {ctor: "NumsPath"
             ,_0: a};
   };
   var NumPoints = function (a) {
      return {ctor: "NumPoints"
             ,_0: a};
   };
   var None = {ctor: "None"};
   var nodeToAttrLocs_ = F2(function (v,
   _v87) {
      return function () {
         switch (_v87.ctor)
         {case "_Tuple2":
            return function () {
                 switch (v.ctor)
                 {case "VList":
                    switch (v._0.ctor)
                      {case "::":
                         switch (v._0._0.ctor)
                           {case "VBase":
                              switch (v._0._0._0.ctor)
                                {case "String":
                                   switch (v._0._0._0._0)
                                     {case "TEXT":
                                        switch (v._0._1.ctor)
                                          {case "::":
                                             switch (v._0._1._0.ctor)
                                               {case "VBase":
                                                  switch (v._0._1._0._0.ctor)
                                                    {case "String":
                                                       switch (v._0._1._1.ctor)
                                                         {case "[]":
                                                            return {ctor: "_Tuple2"
                                                                   ,_0: 1 + _v87._0
                                                                   ,_1: A3($Dict.insert,
                                                                   1,
                                                                   {ctor: "_Tuple3"
                                                                   ,_0: "DUMMYTEXT"
                                                                   ,_1: None
                                                                   ,_2: $Dict.empty},
                                                                   _v87._1)};}
                                                         break;}
                                                    break;}
                                               break;}
                                          break;}
                                     switch (v._0._1.ctor)
                                     {case "::":
                                        switch (v._0._1._0.ctor)
                                          {case "VList":
                                             switch (v._0._1._1.ctor)
                                               {case "::":
                                                  switch (v._0._1._1._0.ctor)
                                                    {case "VList":
                                                       switch (v._0._1._1._1.ctor)
                                                         {case "[]":
                                                            return function () {
                                                                 var processAttr = F2(function (v$,
                                                                 _v107) {
                                                                    return function () {
                                                                       switch (_v107.ctor)
                                                                       {case "_Tuple2":
                                                                          return function () {
                                                                               switch (v$.ctor)
                                                                               {case "VList":
                                                                                  switch (v$._0.ctor)
                                                                                    {case "::":
                                                                                       switch (v$._0._0.ctor)
                                                                                         {case "VBase":
                                                                                            switch (v$._0._0._0.ctor)
                                                                                              {case "String":
                                                                                                 switch (v$._0._1.ctor)
                                                                                                   {case "::":
                                                                                                      switch (v$._0._1._0.ctor)
                                                                                                        {case "VConst":
                                                                                                           switch (v$._0._1._0._0.ctor)
                                                                                                             {case "_Tuple2":
                                                                                                                switch (v$._0._1._1.ctor)
                                                                                                                  {case "[]":
                                                                                                                     return {ctor: "_Tuple2"
                                                                                                                            ,_0: _v107._0
                                                                                                                            ,_1: A3($Dict.insert,
                                                                                                                            v$._0._0._0._0,
                                                                                                                            v$._0._1._0._0._1,
                                                                                                                            _v107._1)};}
                                                                                                                  break;}
                                                                                                             break;}
                                                                                                        break;}
                                                                                                   switch (v$._0._0._0._0)
                                                                                                   {case "d":
                                                                                                      switch (v$._0._1.ctor)
                                                                                                        {case "::":
                                                                                                           switch (v$._0._1._0.ctor)
                                                                                                             {case "VList":
                                                                                                                switch (v$._0._1._1.ctor)
                                                                                                                  {case "[]":
                                                                                                                     return function () {
                                                                                                                          var addPt = F2(function (_v128,
                                                                                                                          dict) {
                                                                                                                             return function () {
                                                                                                                                switch (_v128.ctor)
                                                                                                                                {case "_Tuple2":
                                                                                                                                   switch (_v128._1.ctor)
                                                                                                                                     {case "_Tuple2":
                                                                                                                                        return function () {
                                                                                                                                             switch (_v128._0.ctor)
                                                                                                                                             {case "Just":
                                                                                                                                                return A2($Dict.insert,
                                                                                                                                                  A2($LangSvg.addi,
                                                                                                                                                  "y",
                                                                                                                                                  _v128._0._0),
                                                                                                                                                  $Basics.snd(_v128._1._1))(A2($Dict.insert,
                                                                                                                                                  A2($LangSvg.addi,
                                                                                                                                                  "x",
                                                                                                                                                  _v128._0._0),
                                                                                                                                                  $Basics.snd(_v128._1._0))(dict));
                                                                                                                                                case "Nothing":
                                                                                                                                                return dict;}
                                                                                                                                             _U.badCase($moduleName,
                                                                                                                                             "between lines 441 and 445");
                                                                                                                                          }();}
                                                                                                                                     break;}
                                                                                                                                _U.badCase($moduleName,
                                                                                                                                "between lines 441 and 445");
                                                                                                                             }();
                                                                                                                          });
                                                                                                                          var addPts = F2(function (pts,
                                                                                                                          dict) {
                                                                                                                             return A3($List.foldl,
                                                                                                                             addPt,
                                                                                                                             dict,
                                                                                                                             pts);
                                                                                                                          });
                                                                                                                          var $ = $LangSvg.valsToPath2(v$._0._1._0._0),
                                                                                                                          cmds = $._0,
                                                                                                                          counts = $._1;
                                                                                                                          var dAttrs$ = A3($List.foldl,
                                                                                                                          F2(function (c,
                                                                                                                          acc) {
                                                                                                                             return function () {
                                                                                                                                switch (c.ctor)
                                                                                                                                {case "CmdA":
                                                                                                                                   return addPt(c._6)(acc);
                                                                                                                                   case "CmdC":
                                                                                                                                   return addPts(_L.fromArray([c._1
                                                                                                                                                              ,c._2
                                                                                                                                                              ,c._3]))(acc);
                                                                                                                                   case "CmdHV":
                                                                                                                                   return acc;
                                                                                                                                   case "CmdMLT":
                                                                                                                                   return addPt(c._1)(acc);
                                                                                                                                   case "CmdSQ":
                                                                                                                                   return addPts(_L.fromArray([c._1
                                                                                                                                                              ,c._2]))(acc);
                                                                                                                                   case "CmdZ":
                                                                                                                                   return acc;}
                                                                                                                                _U.badCase($moduleName,
                                                                                                                                "between lines 449 and 455");
                                                                                                                             }();
                                                                                                                          }),
                                                                                                                          _v107._1,
                                                                                                                          cmds);
                                                                                                                          return {ctor: "_Tuple2"
                                                                                                                                 ,_0: NumsPath(counts)
                                                                                                                                 ,_1: dAttrs$};
                                                                                                                       }();}
                                                                                                                  break;}
                                                                                                             break;}
                                                                                                        break;
                                                                                                      case "points":
                                                                                                      switch (v$._0._1.ctor)
                                                                                                        {case "::":
                                                                                                           switch (v$._0._1._0.ctor)
                                                                                                             {case "VList":
                                                                                                                switch (v$._0._1._1.ctor)
                                                                                                                  {case "[]":
                                                                                                                     return function () {
                                                                                                                          var acc$ = A3($Utils.foldli,
                                                                                                                          F2(function (_v156,
                                                                                                                          acc) {
                                                                                                                             return function () {
                                                                                                                                switch (_v156.ctor)
                                                                                                                                {case "_Tuple2":
                                                                                                                                   return function () {
                                                                                                                                        switch (_v156._1.ctor)
                                                                                                                                        {case "VList":
                                                                                                                                           switch (_v156._1._0.ctor)
                                                                                                                                             {case "::":
                                                                                                                                                switch (_v156._1._0._0.ctor)
                                                                                                                                                  {case "VConst":
                                                                                                                                                     switch (_v156._1._0._0._0.ctor)
                                                                                                                                                       {case "_Tuple2":
                                                                                                                                                          switch (_v156._1._0._1.ctor)
                                                                                                                                                            {case "::":
                                                                                                                                                               switch (_v156._1._0._1._0.ctor)
                                                                                                                                                                 {case "VConst":
                                                                                                                                                                    switch (_v156._1._0._1._0._0.ctor)
                                                                                                                                                                      {case "_Tuple2":
                                                                                                                                                                         switch (_v156._1._0._1._1.ctor)
                                                                                                                                                                           {case "[]":
                                                                                                                                                                              return function () {
                                                                                                                                                                                   var $ = {ctor: "_Tuple2"
                                                                                                                                                                                           ,_0: A2($LangSvg.addi,
                                                                                                                                                                                           "x",
                                                                                                                                                                                           _v156._0)
                                                                                                                                                                                           ,_1: A2($LangSvg.addi,
                                                                                                                                                                                           "y",
                                                                                                                                                                                           _v156._0)},
                                                                                                                                                                                   ax = $._0,
                                                                                                                                                                                   ay = $._1;
                                                                                                                                                                                   return A2($Dict.insert,
                                                                                                                                                                                   ay,
                                                                                                                                                                                   _v156._1._0._1._0._0._1)(A2($Dict.insert,
                                                                                                                                                                                   ax,
                                                                                                                                                                                   _v156._1._0._0._0._1)(acc));
                                                                                                                                                                                }();}
                                                                                                                                                                           break;}
                                                                                                                                                                      break;}
                                                                                                                                                                 break;}
                                                                                                                                                            break;}
                                                                                                                                                       break;}
                                                                                                                                                  break;}
                                                                                                                                             break;}
                                                                                                                                        _U.badCase($moduleName,
                                                                                                                                        "between lines 432 and 436");
                                                                                                                                     }();}
                                                                                                                                _U.badCase($moduleName,
                                                                                                                                "between lines 432 and 436");
                                                                                                                             }();
                                                                                                                          }),
                                                                                                                          _v107._1,
                                                                                                                          v$._0._1._0._0);
                                                                                                                          return {ctor: "_Tuple2"
                                                                                                                                 ,_0: NumPoints($List.length(v$._0._1._0._0))
                                                                                                                                 ,_1: acc$};
                                                                                                                       }();}
                                                                                                                  break;}
                                                                                                             break;}
                                                                                                        break;}
                                                                                                   break;}
                                                                                              break;}
                                                                                         break;}
                                                                                    break;}
                                                                               return {ctor: "_Tuple2"
                                                                                      ,_0: _v107._0
                                                                                      ,_1: _v107._1};
                                                                            }();}
                                                                       _U.badCase($moduleName,
                                                                       "between lines 424 and 464");
                                                                    }();
                                                                 });
                                                                 var $ = A3($List.foldl,
                                                                 processAttr,
                                                                 {ctor: "_Tuple2"
                                                                 ,_0: None
                                                                 ,_1: $Dict.empty},
                                                                 v._0._1._0._0),
                                                                 extra = $._0,
                                                                 attrs = $._1;
                                                                 var $ = A3($List.foldl,
                                                                 nodeToAttrLocs_,
                                                                 {ctor: "_Tuple2"
                                                                 ,_0: _v87._0
                                                                 ,_1: _v87._1},
                                                                 v._0._1._1._0._0),
                                                                 nextId$ = $._0,
                                                                 dShapes$ = $._1;
                                                                 return {ctor: "_Tuple2"
                                                                        ,_0: nextId$ + 1
                                                                        ,_1: A3($Dict.insert,
                                                                        nextId$,
                                                                        {ctor: "_Tuple3"
                                                                        ,_0: v._0._0._0._0
                                                                        ,_1: extra
                                                                        ,_2: attrs},
                                                                        dShapes$)};
                                                              }();}
                                                         break;}
                                                    break;}
                                               break;}
                                          break;}
                                     break;}
                                break;}
                           break;}
                      break;}
                 return $Debug.crash(A2($Basics._op["++"],
                 "Sync.nodeToAttrLocs_: ",
                 $Lang.strVal(v)));
              }();}
         _U.badCase($moduleName,
         "between lines 416 and 473");
      }();
   });
   var nodeToAttrLocs = function ($) {
      return $Basics.snd(A2($Basics.flip,
      nodeToAttrLocs_,
      {ctor: "_Tuple2"
      ,_0: 1
      ,_1: $Dict.empty})($));
   };
   var addComments = false;
   var comment = F2(function (s,
   e) {
      return addComments ? A2($Lang.EComment,
      s,
      e) : e;
   });
   var idNewShape = function (i) {
      return A2($Basics._op["++"],
      "newShape",
      $Basics.toString(i));
   };
   var eNewShape = function (i) {
      return $Lang.EVar(idNewShape(i));
   };
   var idOldShapes = "oldCanvas";
   var eOldShapes = $Lang.EVar(idOldShapes);
   var stripSvg = function (_v172) {
      return function () {
         switch (_v172.ctor)
         {case "VList":
            switch (_v172._0.ctor)
              {case "::":
                 switch (_v172._0._0.ctor)
                   {case "VBase":
                      switch (_v172._0._0._0.ctor)
                        {case "String":
                           switch (_v172._0._0._0._0)
                             {case "svg":
                                switch (_v172._0._1.ctor)
                                  {case "::":
                                     switch (_v172._0._1._0.ctor)
                                       {case "VList":
                                          switch (_v172._0._1._1.ctor)
                                            {case "::":
                                               switch (_v172._0._1._1._0.ctor)
                                                 {case "VList":
                                                    switch (_v172._0._1._1._1.ctor)
                                                      {case "[]":
                                                         return {ctor: "_Tuple2"
                                                                ,_0: _v172._0._1._0._0
                                                                ,_1: _v172._0._1._1._0._0};}
                                                      break;}
                                                 break;}
                                            break;}
                                       break;}
                                  break;}
                             break;}
                        break;}
                   break;}
              break;}
         _U.badCase($moduleName,
         "on line 327, column 66 to 74");
      }();
   };
   var inferStructuralUpdate = F3(function (eOld,
   v,
   v$) {
      return function () {
         var $ = stripSvg(v),
         attrs1 = $._0,
         children1 = $._1;
         var $ = stripSvg(v$),
         attrs2 = $._0,
         children2 = $._1;
         var _ = A2($Utils.assert,
         "Sync.inferStruct",
         _U.eq(attrs1,attrs2));
         var diff = function () {
            var foo = F2(function (_v185,
            acc) {
               return function () {
                  switch (_v185.ctor)
                  {case "_Tuple2":
                     switch (_v185._1.ctor)
                       {case "_Tuple2":
                          return _U.eq(_v185._1._0,
                            _v185._1._1) ? acc : A2($List._op["::"],
                            {ctor: "_Tuple2"
                            ,_0: _v185._0
                            ,_1: _v185._1._1},
                            acc);}
                       break;}
                  _U.badCase($moduleName,
                  "between lines 348 and 349");
               }();
            });
            return $List.reverse(A3($Utils.foldli,
            foo,
            _L.fromArray([]),
            A2($Utils.zip,
            children1,
            children2)));
         }();
         var eNewCanvas = function () {
            var es = A2($List.map,
            function (_v191) {
               return function () {
                  switch (_v191.ctor)
                  {case "_Tuple2":
                     return function () {
                          var n = $Basics.toFloat(_v191._0);
                          return A2($Lang.ePair,
                          A2($Lang.EConst,
                          n,
                          $Lang.dummyLoc),
                          eNewShape(_v191._0));
                       }();}
                  _U.badCase($moduleName,
                  "between lines 355 and 356");
               }();
            },
            diff);
            return A2($Lang.EApp,
            $Lang.EVar("updateCanvas"),
            _L.fromArray([eOldShapes
                         ,A2($Lang.EList,
                         es,
                         $Maybe.Nothing)]));
         }();
         var bindings = A2($List.map,
         function (_v195) {
            return function () {
               switch (_v195.ctor)
               {case "_Tuple2":
                  return function () {
                       var ei = A2($Utils.fromOk,
                       "Sync.addNew",
                       $LangParser.parseE($Lang.strVal(_v195._1)));
                       return {ctor: "_Tuple2"
                              ,_0: idNewShape(_v195._0)
                              ,_1: ei};
                    }();}
               _U.badCase($moduleName,
               "between lines 362 and 363");
            }();
         },
         diff);
         var eNew_ = comment(" Here\'s your original program...")(comment("")($Lang.eLets(_L.fromArray([{ctor: "_Tuple2"
                                                                                                        ,_0: idOldShapes
                                                                                                        ,_1: eOld}]))(comment("")(comment(" ... and here are the hard-coded updates:")(comment("")($Lang.eLets(bindings)(comment("")(comment(" Refactor if you\'d like!")(comment("")(eNewCanvas))))))))));
         var eNew = A2($Utils.fromOk,
         "Sync.inferStruct",
         $LangParser.parseE($Lang.sExp(eNew_)));
         return {ctor: "_Tuple2"
                ,_0: eNew
                ,_1: $Eval.run(eNew)};
      }();
   });
   var leafToStar = function (v) {
      return function () {
         switch (v.ctor)
         {case "VConst":
            return $Lang.VBase($Lang.Star);}
         return v;
      }();
   };
   var getFillers = function ($) {
      return $List.map(function ($) {
         return $Basics.snd($Basics.snd($));
      })($Dict.toList($));
   };
   var largeInt = 99999999;
   var compareVals = function (_v201) {
      return function () {
         switch (_v201.ctor)
         {case "_Tuple2":
            return function () {
                 var _v205 = {ctor: "_Tuple2"
                             ,_0: _v201._0
                             ,_1: _v201._1};
                 switch (_v205.ctor)
                 {case "_Tuple2":
                    switch (_v205._0.ctor)
                      {case "VConst":
                         switch (_v205._1.ctor)
                           {case "VConst":
                              return $Basics.abs($Basics.fst(_v205._0._0) - $Basics.fst(_v205._1._0));}
                           break;
                         case "VList":
                         switch (_v205._1.ctor)
                           {case "VList":
                              return function () {
                                   var _v212 = A2($Utils.maybeZip,
                                   _v205._0._0,
                                   _v205._1._0);
                                   switch (_v212.ctor)
                                   {case "Just":
                                      return $Utils.sum(A2($List.map,
                                        compareVals,
                                        _v212._0));
                                      case "Nothing":
                                      return largeInt;}
                                   _U.badCase($moduleName,
                                   "between lines 275 and 278");
                                }();}
                           break;}
                      break;}
                 return _U.eq(_v201._0,
                 _v201._1) ? 0 : largeInt;
              }();}
         _U.badCase($moduleName,
         "between lines 273 and 279");
      }();
   };
   var simpleSolve = F2(function (subst,
   _v214) {
      return function () {
         switch (_v214.ctor)
         {case "_Tuple2":
            return function () {
                 var walkTrace = function (t) {
                    return function () {
                       switch (t.ctor)
                       {case "TrLoc":
                          switch (t._0.ctor)
                            {case "_Tuple3":
                               return function () {
                                    var _v225 = A2($Dict.get,
                                    t._0._0,
                                    subst);
                                    switch (_v225.ctor)
                                    {case "Just":
                                       return $Maybe.Just({ctor: "_Tuple2"
                                                          ,_0: _v225._0
                                                          ,_1: 0});
                                       case "Nothing":
                                       return $Maybe.Just({ctor: "_Tuple2"
                                                          ,_0: 0
                                                          ,_1: 1});}
                                    _U.badCase($moduleName,
                                    "between lines 255 and 258");
                                 }();}
                            break;
                          case "TrOp": switch (t._0.ctor)
                            {case "Plus":
                               return function () {
                                    var foo = F2(function (mx,
                                    macc) {
                                       return function () {
                                          var _v227 = {ctor: "_Tuple2"
                                                      ,_0: mx
                                                      ,_1: macc};
                                          switch (_v227.ctor)
                                          {case "_Tuple2":
                                             switch (_v227._0.ctor)
                                               {case "Just":
                                                  switch (_v227._0._0.ctor)
                                                    {case "_Tuple2":
                                                       switch (_v227._1.ctor)
                                                         {case "Just":
                                                            switch (_v227._1._0.ctor)
                                                              {case "_Tuple2":
                                                                 return $Maybe.Just({ctor: "_Tuple2"
                                                                                    ,_0: _v227._0._0._0 + _v227._1._0._0
                                                                                    ,_1: _v227._0._0._1 + _v227._1._0._1});}
                                                              break;}
                                                         break;}
                                                    break;}
                                               break;}
                                          return $Maybe.Nothing;
                                       }();
                                    });
                                    return A3($List.foldl,
                                    foo,
                                    $Maybe.Just({ctor: "_Tuple2"
                                                ,_0: 0
                                                ,_1: 0}),
                                    A2($List.map,walkTrace,t._1));
                                 }();}
                            break;}
                       return $Maybe.Nothing;
                    }();
                 };
                 return A2($Utils.mapMaybe,
                 function (_v236) {
                    return function () {
                       switch (_v236.ctor)
                       {case "_Tuple2":
                          return (_v214._0 - _v236._0) / _v236._1;}
                       _U.badCase($moduleName,
                       "on line 269, column 26 to 47");
                    }();
                 },
                 walkTrace(_v214._1));
              }();}
         _U.badCase($moduleName,
         "between lines 253 and 270");
      }();
   });
   var maybeFloat = function (n) {
      return function () {
         var thresh = 1000;
         return $Basics.isNaN(n) || $Basics.isInfinite(n) ? A2($Debug.log,
         "maybeFloat Nothing",
         $Maybe.Nothing) : _U.cmp($Basics.abs(n),
         thresh) > 0 ? A2($Debug.log,
         "maybeFloat (above thresh)",
         $Maybe.Nothing) : $Maybe.Just(n);
      }();
   };
   var solveR = F3(function (op,
   n,
   i) {
      return function () {
         switch (op.ctor)
         {case "Div":
            return maybeFloat(i / n);
            case "Minus":
            return maybeFloat(i - n);
            case "Mult":
            return maybeFloat(n / i);
            case "Plus":
            return maybeFloat(n - i);}
         _U.badCase($moduleName,
         "between lines 238 and 242");
      }();
   });
   var solveL = F3(function (op,
   n,
   j) {
      return function () {
         switch (op.ctor)
         {case "Div":
            return maybeFloat(j * n);
            case "Minus":
            return maybeFloat(j + n);
            case "Mult":
            return maybeFloat(n / j);
            case "Plus":
            return maybeFloat(n - j);}
         _U.badCase($moduleName,
         "between lines 245 and 249");
      }();
   });
   var isNumBinop = F2(function (x,
   y) {
      return !_U.eq(x,y);
   })($Lang.Lt);
   var evalLoc = F2(function (subst,
   tr) {
      return function () {
         switch (tr.ctor)
         {case "TrLoc":
            switch (tr._0.ctor)
              {case "_Tuple3":
                 return $Maybe.Just(A2($Dict.get,
                   tr._0._0,
                   subst));}
              break;
            case "TrOp":
            return $Maybe.Nothing;}
         _U.badCase($moduleName,
         "between lines 178 and 180");
      }();
   });
   var evalTrace = F2(function (subst,
   t) {
      return function () {
         switch (t.ctor)
         {case "TrLoc":
            switch (t._0.ctor)
              {case "_Tuple3":
                 return A2($Dict.get,
                   t._0._0,
                   subst);}
              break;
            case "TrOp":
            return A2($Utils.mapMaybe,
              $Eval.evalDelta(t._0),
              $Utils.projJusts(A2($List.map,
              evalTrace(subst),
              t._1)));}
         _U.badCase($moduleName,
         "between lines 166 and 171");
      }();
   });
   var solveTopDown = F2(function (subst,
   _v256) {
      return function () {
         switch (_v256.ctor)
         {case "_Tuple2":
            return function () {
                 switch (_v256._1.ctor)
                 {case "TrLoc":
                    switch (_v256._1._0.ctor)
                      {case "_Tuple3":
                         return function () {
                              var _v275 = A2($Dict.get,
                              _v256._1._0._0,
                              subst);
                              switch (_v275.ctor)
                              {case "Just":
                                 return $Maybe.Nothing;
                                 case "Nothing":
                                 return $Maybe.Just(_v256._0);}
                              _U.badCase($moduleName,
                              "between lines 185 and 189");
                           }();}
                      break;
                    case "TrOp":
                    switch (_v256._1._1.ctor)
                      {case "::":
                         switch (_v256._1._1._1.ctor)
                           {case "::":
                              switch (_v256._1._1._1._1.ctor)
                                {case "[]": return function () {
                                        var left = {ctor: "_Tuple2"
                                                   ,_0: A2(evalTrace,
                                                   subst,
                                                   _v256._1._1._0)
                                                   ,_1: A2(evalLoc,
                                                   subst,
                                                   _v256._1._1._1._0)};
                                        var right = {ctor: "_Tuple2"
                                                    ,_0: A2(evalLoc,
                                                    subst,
                                                    _v256._1._1._0)
                                                    ,_1: A2(evalTrace,
                                                    subst,
                                                    _v256._1._1._1._0)};
                                        return function () {
                                           var _v277 = {ctor: "_Tuple3"
                                                       ,_0: isNumBinop(_v256._1._0)
                                                       ,_1: left
                                                       ,_2: right};
                                           switch (_v277.ctor)
                                           {case "_Tuple3":
                                              switch (_v277._0)
                                                {case true:
                                                   switch (_v277._1.ctor)
                                                     {case "_Tuple2":
                                                        switch (_v277._1._0.ctor)
                                                          {case "Just":
                                                             switch (_v277._1._1.ctor)
                                                               {case "Just":
                                                                  switch (_v277._1._1._0.ctor)
                                                                    {case "Nothing":
                                                                       return A3(solveR,
                                                                         _v256._1._0,
                                                                         _v256._0,
                                                                         _v277._1._0._0);}
                                                                    break;
                                                                  case "Nothing":
                                                                  return A2($Utils.bindMaybe,
                                                                    function (n) {
                                                                       return A2(solveTopDown,
                                                                       subst,
                                                                       {ctor: "_Tuple2"
                                                                       ,_0: n
                                                                       ,_1: _v256._1._1._1._0});
                                                                    },
                                                                    A3(solveR,
                                                                    _v256._1._0,
                                                                    _v256._0,
                                                                    _v277._1._0._0));}
                                                               break;}
                                                          break;}
                                                     switch (_v277._2.ctor)
                                                     {case "_Tuple2":
                                                        switch (_v277._2._0.ctor)
                                                          {case "Just":
                                                             switch (_v277._2._0._0.ctor)
                                                               {case "Nothing":
                                                                  switch (_v277._2._1.ctor)
                                                                    {case "Just":
                                                                       return A3(solveL,
                                                                         _v256._1._0,
                                                                         _v256._0,
                                                                         _v277._2._1._0);}
                                                                    break;}
                                                               break;
                                                             case "Nothing":
                                                             switch (_v277._2._1.ctor)
                                                               {case "Just":
                                                                  return A2($Utils.bindMaybe,
                                                                    function (n) {
                                                                       return A2(solveTopDown,
                                                                       subst,
                                                                       {ctor: "_Tuple2"
                                                                       ,_0: n
                                                                       ,_1: _v256._1._1._0});
                                                                    },
                                                                    A3(solveL,
                                                                    _v256._1._0,
                                                                    _v256._0,
                                                                    _v277._2._1._0));}
                                                               break;}
                                                          break;}
                                                     break;}
                                                break;}
                                           return function () {
                                              var _ = $Debug.log("Sync.solve")($Lang.strTrace(_v256._1));
                                              return $Maybe.Nothing;
                                           }();
                                        }();
                                     }();}
                                break;}
                           break;}
                      switch (_v256._1._0.ctor)
                      {case "Cos":
                         switch (_v256._1._1.ctor)
                           {case "::":
                              switch (_v256._1._1._1.ctor)
                                {case "[]": return function () {
                                        var _v290 = A2(evalTrace,
                                        subst,
                                        _v256._1._1._0);
                                        switch (_v290.ctor)
                                        {case "Just":
                                           return maybeFloat($Basics.acos(_v290._0));
                                           case "Nothing":
                                           return $Maybe.Nothing;}
                                        _U.badCase($moduleName,
                                        "between lines 216 and 220");
                                     }();}
                                break;}
                           break;
                         case "Sin":
                         switch (_v256._1._1.ctor)
                           {case "::":
                              switch (_v256._1._1._1.ctor)
                                {case "[]": return function () {
                                        var _v292 = A2(evalTrace,
                                        subst,
                                        _v256._1._1._0);
                                        switch (_v292.ctor)
                                        {case "Just":
                                           return maybeFloat($Basics.asin(_v292._0));
                                           case "Nothing":
                                           return $Maybe.Nothing;}
                                        _U.badCase($moduleName,
                                        "between lines 221 and 225");
                                     }();}
                                break;}
                           break;}
                      break;}
                 return function () {
                    var _ = A2($Debug.log,
                    "TODO solveTopDown",
                    _v256._1);
                    return $Maybe.Nothing;
                 }();
              }();}
         _U.badCase($moduleName,
         "between lines 182 and 227");
      }();
   });
   var evalTr = F2(function (subst,
   tr) {
      return A2($Utils.fromJust_,
      "evalTr",
      A2(evalTrace,subst,tr));
   });
   var solve = F2(function (subst,
   eqn) {
      return A2($Utils.plusMaybe,
      A2(solveTopDown,subst,eqn),
      A2(simpleSolve,subst,eqn));
   });
   var combine = function (solutions) {
      return function () {
         var f = F2(function (_v294,
         msubst) {
            return function () {
               switch (_v294.ctor)
               {case "_Tuple2":
                  return function () {
                       var g = function (subst) {
                          return function () {
                             var _v298 = A2($Dict.get,
                             _v294._0,
                             subst);
                             switch (_v298.ctor)
                             {case "Just":
                                return _U.eq(_v298._0,
                                  _v294._1) ? $Maybe.Just(A3($Dict.insert,
                                  _v294._0,
                                  _v294._1,
                                  subst)) : $Maybe.Nothing;
                                case "Nothing":
                                return $Maybe.Just(A3($Dict.insert,
                                  _v294._0,
                                  _v294._1,
                                  subst));}
                             _U.badCase($moduleName,
                             "between lines 149 and 153");
                          }();
                       };
                       return A2($Utils.bindMaybe,
                       g,
                       msubst);
                    }();}
               _U.badCase($moduleName,
               "between lines 148 and 154");
            }();
         });
         return A3($List.foldl,
         f,
         $Maybe.Just($Dict.empty),
         solutions);
      }();
   };
   var locsOfTrace = function (opts) {
      return function () {
         var frozenByDefault = $Basics.not(opts.thawedByDefault);
         var foo = function (t) {
            return function () {
               switch (t.ctor)
               {case "TrLoc":
                  return function () {
                       var _ = t._0;
                       var b = function () {
                          switch (_.ctor)
                          {case "_Tuple3": return _._1;}
                          _U.badCase($moduleName,
                          "on line 121, column 21 to 22");
                       }();
                       return $LangParser.isPreludeLoc(t._0) ? $Set.empty : _U.eq(b,
                       $Lang.frozen) ? $Set.empty : _U.eq(b,
                       $Lang.unann) && frozenByDefault ? $Set.empty : $Set.singleton(t._0);
                    }();
                  case "TrOp":
                  return A3($List.foldl,
                    $Set.union,
                    $Set.empty,
                    A2($List.map,foo,t._1));}
               _U.badCase($moduleName,
               "between lines 119 and 127");
            }();
         };
         return foo;
      }();
   };
   var solveOneLeaf = F3(function (opts,
   s,
   _v308) {
      return function () {
         switch (_v308.ctor)
         {case "VConst":
            switch (_v308._0.ctor)
              {case "_Tuple2":
                 return A2($List.filterMap,
                   function (k) {
                      return function () {
                         var s$ = A2($Dict.remove,
                         k,
                         s);
                         return A2($Utils.mapMaybe,
                         function (n) {
                            return {ctor: "_Tuple2"
                                   ,_0: k
                                   ,_1: n};
                         },
                         A2(solve,
                         s$,
                         {ctor: "_Tuple2"
                         ,_0: _v308._0._0
                         ,_1: _v308._0._1}));
                      }();
                   },
                   $List.map($Utils.fst3)($Set.toList(A2(locsOfTrace,
                   opts,
                   _v308._0._1))));}
              break;}
         _U.badCase($moduleName,
         "between lines 132 and 135");
      }();
   });
   var inferSubsts = F3(function (opts,
   s0,
   vs) {
      return $List.filterMap($Basics.identity)($List.map($Utils.mapMaybe(function (s$) {
         return A2($Dict.union,s$,s0);
      }))($List.map(combine)($Utils.oneOfEach(A2($List.map,
      A2(solveOneLeaf,opts,s0),
      vs)))));
   });
   var shapeToZoneInfo = F2(function (opts,
   _v313) {
      return function () {
         switch (_v313.ctor)
         {case "_Tuple3":
            return function () {
                 var zones = A2(getZones,
                 _v313._0,
                 _v313._1);
                 var f = F2(function (_v318,
                 acc) {
                    return function () {
                       switch (_v318.ctor)
                       {case "_Tuple2":
                          return function () {
                               var numAttrs = $List.length(_v318._1);
                               var sets = createLocLists($List.map(function (a) {
                                  return function () {
                                     var _v322 = A2($Dict.get,
                                     a,
                                     _v313._2);
                                     switch (_v322.ctor)
                                     {case "Just":
                                        return A2(locsOfTrace,
                                          opts,
                                          _v322._0);
                                        case "Nothing":
                                        return $Set.empty;}
                                     _U.badCase($moduleName,
                                     "between lines 503 and 505");
                                  }();
                               })(_v318._1));
                               return A2($List._op["::"],
                               {ctor: "_Tuple2"
                               ,_0: _v318._0
                               ,_1: {ctor: "_Tuple2"
                                    ,_0: numAttrs
                                    ,_1: sets}},
                               acc);
                            }();}
                       _U.badCase($moduleName,
                       "between lines 499 and 507");
                    }();
                 });
                 return A3($List.foldr,
                 f,
                 _L.fromArray([]),
                 zones);
              }();}
         _U.badCase($moduleName,
         "between lines 497 and 509");
      }();
   });
   var shapesToZoneTable = F2(function (opts,
   d0) {
      return function () {
         var foo = F3(function (i,
         stuff,
         acc) {
            return function () {
               var _ = stuff;
               var kind = function () {
                  switch (_.ctor)
                  {case "_Tuple3": return _._0;}
                  _U.badCase($moduleName,
                  "on line 489, column 22 to 27");
               }();
               return A3($Dict.insert,
               i,
               {ctor: "_Tuple2"
               ,_0: kind
               ,_1: A2(shapeToZoneInfo,
               opts,
               stuff)},
               acc);
            }();
         });
         return A3($Dict.foldl,
         foo,
         $Dict.empty,
         d0);
      }();
   });
   var whichLoc = F6(function (opts,
   d0,
   d2,
   i,
   z,
   attr) {
      return function () {
         var trLocs = function (m) {
            return function () {
               switch (m.ctor)
               {case "Just":
                  return A2(locsOfTrace,
                    opts,
                    m._0);
                  case "Nothing":
                  return $Set.empty;}
               _U.badCase($moduleName,
               "between lines 761 and 763");
            }();
         }($Dict.get(attr)($Utils.thd3(A3($Utils.justGet_,
         "%4",
         i,
         d0))));
         var zoneLocs = $Set.fromList($Basics.fst($Utils.fromJust_("guaranteed not to fail b/c of check in makeTriggers")($Utils.fromJust($Utils.maybeFind(z)($Basics.snd(A3($Utils.justGet_,
         "%6",
         i,
         d2)))))));
         return function () {
            var _v330 = $Set.toList(A2($Set.intersect,
            trLocs,
            zoneLocs));
            switch (_v330.ctor)
            {case "::":
               switch (_v330._0.ctor)
                 {case "_Tuple3":
                    switch (_v330._1.ctor)
                      {case "[]":
                         return $Maybe.Just(_v330._0._0);}
                      break;}
                 break;
               case "[]":
               return $Maybe.Nothing;}
            return $Debug.crash("whichLoc");
         }();
      }();
   });
   var makeTrigger = F8(function (opts,
   e,
   d0,
   d2,
   subst,
   i,
   zone,
   newAttrs) {
      return function () {
         var $ = function () {
            var f = F2(function (_v336,
            _v337) {
               return function () {
                  switch (_v337.ctor)
                  {case "_Tuple2":
                     return function () {
                          switch (_v336.ctor)
                          {case "_Tuple2":
                             return function () {
                                  var _v344 = A6(whichLoc,
                                  opts,
                                  d0,
                                  d2,
                                  i,
                                  zone,
                                  _v336._0);
                                  switch (_v344.ctor)
                                  {case "Just":
                                     return function () {
                                          var subst$ = A2($Dict.remove,
                                          _v344._0,
                                          subst);
                                          var tr = A3($Utils.justGet_,
                                          "%2",
                                          _v336._0,
                                          $Utils.thd3(A3($Utils.justGet_,
                                          "%3",
                                          i,
                                          d0)));
                                          return function () {
                                             var _v346 = A2(solve,
                                             subst$,
                                             {ctor: "_Tuple2"
                                             ,_0: _v336._1
                                             ,_1: tr});
                                             switch (_v346.ctor)
                                             {case "Just":
                                                return {ctor: "_Tuple2"
                                                       ,_0: A3($Dict.insert,
                                                       _v344._0,
                                                       _v346._0,
                                                       _v337._0)
                                                       ,_1: A2($Set.insert,
                                                       _v344._0,
                                                       _v337._1)};
                                                case "Nothing":
                                                return {ctor: "_Tuple2"
                                                       ,_0: _v337._0
                                                       ,_1: _v337._1};}
                                             _U.badCase($moduleName,
                                             "between lines 711 and 717");
                                          }();
                                       }();
                                     case "Nothing":
                                     return {ctor: "_Tuple2"
                                            ,_0: _v337._0
                                            ,_1: _v337._1};}
                                  _U.badCase($moduleName,
                                  "between lines 706 and 717");
                               }();}
                          _U.badCase($moduleName,
                          "between lines 706 and 717");
                       }();}
                  _U.badCase($moduleName,
                  "between lines 706 and 717");
               }();
            });
            return A3($List.foldl,
            f,
            {ctor: "_Tuple2"
            ,_0: subst
            ,_1: $Set.empty},
            newAttrs);
         }(),
         subst$ = $._0,
         changedLocs = $._1;
         var g = F3(function (i,
         _v348,
         acc) {
            return function () {
               switch (_v348.ctor)
               {case "_Tuple3":
                  return function () {
                       var h = F3(function (attr,
                       tr,
                       acc) {
                          return function () {
                             var locs = A2($Set.map,
                             $Utils.fst3,
                             A2(locsOfTrace,opts,tr));
                             return $Utils.setIsEmpty(A2($Set.intersect,
                             locs,
                             changedLocs)) ? acc : A3($Dict.insert,
                             attr,
                             A2(evalTr,subst$,tr),
                             acc);
                          }();
                       });
                       var di$ = tryToBeSmart ? A3($Dict.foldl,
                       h,
                       $Dict.empty,
                       _v348._2) : $Dict.empty;
                       return $Utils.dictIsEmpty(di$) ? acc : A3($Dict.insert,
                       i,
                       di$,
                       acc);
                    }();}
               _U.badCase($moduleName,
               "between lines 723 and 750");
            }();
         });
         var e$ = A2($Lang.applySubst,
         subst$,
         e);
         return {ctor: "_Tuple2"
                ,_0: e$
                ,_1: A3($Dict.foldl,
                g,
                $Dict.empty,
                d0)};
      }();
   });
   var makeTriggers = F5(function (subst,
   opts,
   e,
   d0,
   d2) {
      return function () {
         var f = F2(function (i,
         _v353) {
            return function () {
               switch (_v353.ctor)
               {case "_Tuple2":
                  return function () {
                       var g = function (_v357) {
                          return function () {
                             switch (_v357.ctor)
                             {case "_Tuple2":
                                return $Dict.insert(_v357._0)(function () {
                                     switch (_v357._1.ctor)
                                     {case "Just":
                                        return $Maybe.Just(A7(makeTrigger,
                                          opts,
                                          e,
                                          d0,
                                          d2,
                                          subst,
                                          i,
                                          _v357._0));
                                        case "Nothing":
                                        return $Maybe.Nothing;}
                                     _U.badCase($moduleName,
                                     "between lines 682 and 684");
                                  }());}
                             _U.badCase($moduleName,
                             "between lines 681 and 684");
                          }();
                       };
                       return A3($List.foldl,
                       g,
                       $Dict.empty,
                       _v353._1);
                    }();}
               _U.badCase($moduleName,
               "between lines 680 and 685");
            }();
         });
         return A2($Dict.map,f,d2);
      }();
   });
   var prepareLiveUpdates = F3(function (opts,
   e,
   v) {
      return function () {
         var d0 = nodeToAttrLocs(v);
         var d1 = A2(shapesToZoneTable,
         opts,
         d0);
         var d2 = assignTriggers(d1);
         var initSubst = $LangParser.substOf(e);
         return {_: {}
                ,assignments: zoneAssignments(d2)
                ,initSubst: initSubst
                ,triggers: A5(makeTriggers,
                initSubst,
                opts,
                e,
                d0,
                d2)};
      }();
   });
   var eqV = function (_v363) {
      return function () {
         switch (_v363.ctor)
         {case "_Tuple2":
            return function () {
                 var _v367 = {ctor: "_Tuple2"
                             ,_0: _v363._0
                             ,_1: _v363._1};
                 switch (_v367.ctor)
                 {case "_Tuple2":
                    switch (_v367._0.ctor)
                      {case "VConst":
                         switch (_v367._1.ctor)
                           {case "VConst":
                              return _U.eq($Basics.fst(_v367._0._0),
                                $Basics.fst(_v367._1._0));}
                           break;
                         case "VList":
                         switch (_v367._1.ctor)
                           {case "VList":
                              return function () {
                                   var _v374 = A2($Utils.maybeZip,
                                   _v367._0._0,
                                   _v367._1._0);
                                   switch (_v374.ctor)
                                   {case "Just":
                                      return A2($List.all,
                                        eqV,
                                        _v374._0);
                                      case "Nothing": return false;}
                                   _U.badCase($moduleName,
                                   "between lines 65 and 68");
                                }();}
                           break;}
                      break;}
                 return _U.eq(_v363._0,_v363._1);
              }();}
         _U.badCase($moduleName,
         "between lines 62 and 68");
      }();
   };
   var Diff = F2(function (a,b) {
      return {ctor: "Diff"
             ,_0: a
             ,_1: b};
   });
   var Same = function (a) {
      return {ctor: "Same",_0: a};
   };
   var fillHole_ = F3(function ($new,
   vc,
   subst) {
      return function () {
         switch (vc.ctor)
         {case "VBase": return vc;
            case "VClosure": return vc;
            case "VConst": return vc;
            case "VHole":
            return function () {
                 var _v385 = A2($Dict.get,
                 vc._0,
                 subst);
                 switch (_v385.ctor)
                 {case "Just":
                    switch (_v385._0.ctor)
                      {case "_Tuple2":
                         return $new ? _v385._0._1 : _v385._0._0;}
                      break;}
                 _U.badCase($moduleName,
                 "between lines 39 and 41");
              }();
            case "VList":
            return $Lang.VList(A2($List.map,
              function (v) {
                 return A3(fillHole_,
                 $new,
                 v,
                 subst);
              },
              vc._0));}
         _U.badCase($moduleName,
         "between lines 38 and 44");
      }();
   });
   var fillHole = fillHole_(true);
   var multiLeafDiffs = true;
   var diff_ = F3(function (k,
   v1,
   v2) {
      return function () {
         var _v389 = {ctor: "_Tuple2"
                     ,_0: v1
                     ,_1: v2};
         switch (_v389.ctor)
         {case "_Tuple2":
            switch (_v389._0.ctor)
              {case "VBase":
                 switch (_v389._0._0.ctor)
                   {case "Star":
                      switch (_v389._1.ctor)
                        {case "VConst":
                           return $Maybe.Just({ctor: "_Tuple2"
                                              ,_0: k
                                              ,_1: Same(v2)});}
                        break;}
                   break;
                 case "VConst":
                 switch (_v389._0._0.ctor)
                   {case "_Tuple2":
                      switch (_v389._1.ctor)
                        {case "VConst":
                           switch (_v389._1._0.ctor)
                             {case "_Tuple2":
                                return _U.eq(_v389._0._0._0,
                                  _v389._1._0._0) ? $Maybe.Just({ctor: "_Tuple2"
                                                                ,_0: k
                                                                ,_1: Same($Lang.VConst({ctor: "_Tuple2"
                                                                                       ,_0: _v389._0._0._0
                                                                                       ,_1: _v389._0._0._1}))}) : function () {
                                     var d = A2($Dict.singleton,
                                     k,
                                     {ctor: "_Tuple2"
                                     ,_0: v1
                                     ,_1: $Lang.VConst({ctor: "_Tuple2"
                                                       ,_0: _v389._1._0._0
                                                       ,_1: _v389._0._0._1})});
                                     return $Maybe.Just({ctor: "_Tuple2"
                                                        ,_0: k + 1
                                                        ,_1: A2(Diff,
                                                        $Lang.VHole(k),
                                                        d)});
                                  }();}
                             break;}
                        break;}
                   break;
                 case "VList":
                 switch (_v389._1.ctor)
                   {case "VList":
                      return function () {
                           var _v402 = A2($Utils.maybeZip,
                           _v389._0._0,
                           _v389._1._0);
                           switch (_v402.ctor)
                           {case "Just":
                              return A3($List.foldr,
                                F2(function (_v404,acc) {
                                   return function () {
                                      switch (_v404.ctor)
                                      {case "_Tuple2":
                                         return function () {
                                              switch (acc.ctor)
                                              {case "Just":
                                                 switch (acc._0.ctor)
                                                   {case "_Tuple2":
                                                      switch (acc._0._1.ctor)
                                                        {case "Diff":
                                                           switch (acc._0._1._0.ctor)
                                                             {case "VList":
                                                                return function () {
                                                                     var _v417 = A3(diff_,
                                                                     acc._0._0,
                                                                     _v404._0,
                                                                     _v404._1);
                                                                     switch (_v417.ctor)
                                                                     {case "Just":
                                                                        switch (_v417._0.ctor)
                                                                          {case "_Tuple2":
                                                                             switch (_v417._0._1.ctor)
                                                                               {case "Diff":
                                                                                  return $Basics.not(multiLeafDiffs) ? $Maybe.Nothing : function () {
                                                                                       var d = A2($Dict.union,
                                                                                       acc._0._1._1,
                                                                                       _v417._0._1._1);
                                                                                       return $Maybe.Just({ctor: "_Tuple2"
                                                                                                          ,_0: _v417._0._0
                                                                                                          ,_1: A2(Diff,
                                                                                                          $Lang.VList(A2($List._op["::"],
                                                                                                          _v417._0._1._0,
                                                                                                          acc._0._1._0._0)),
                                                                                                          d)});
                                                                                    }();
                                                                                  case "Same":
                                                                                  return $Maybe.Just({ctor: "_Tuple2"
                                                                                                     ,_0: _v417._0._0
                                                                                                     ,_1: A2(Diff,
                                                                                                     $Lang.VList(A2($List._op["::"],
                                                                                                     _v417._0._1._0,
                                                                                                     acc._0._1._0._0)),
                                                                                                     acc._0._1._1)});}
                                                                               break;}
                                                                          break;
                                                                        case "Nothing":
                                                                        return $Maybe.Nothing;}
                                                                     _U.badCase($moduleName,
                                                                     "between lines 96 and 104");
                                                                  }();}
                                                             return $Debug.crash("diff_: error?");
                                                           case "Same":
                                                           switch (acc._0._1._0.ctor)
                                                             {case "VList":
                                                                return function () {
                                                                     var _v424 = A3(diff_,
                                                                     acc._0._0,
                                                                     _v404._0,
                                                                     _v404._1);
                                                                     switch (_v424.ctor)
                                                                     {case "Just":
                                                                        switch (_v424._0.ctor)
                                                                          {case "_Tuple2":
                                                                             switch (_v424._0._1.ctor)
                                                                               {case "Diff":
                                                                                  return $Maybe.Just({ctor: "_Tuple2"
                                                                                                     ,_0: _v424._0._0
                                                                                                     ,_1: A2(Diff,
                                                                                                     $Lang.VList(A2($List._op["::"],
                                                                                                     _v424._0._1._0,
                                                                                                     acc._0._1._0._0)),
                                                                                                     _v424._0._1._1)});
                                                                                  case "Same":
                                                                                  return $Maybe.Just({ctor: "_Tuple2"
                                                                                                     ,_0: _v424._0._0
                                                                                                     ,_1: Same($Lang.VList(A2($List._op["::"],
                                                                                                     _v424._0._1._0,
                                                                                                     acc._0._1._0._0)))});}
                                                                               break;}
                                                                          break;
                                                                        case "Nothing":
                                                                        return $Maybe.Nothing;}
                                                                     _U.badCase($moduleName,
                                                                     "between lines 91 and 95");
                                                                  }();}
                                                             break;}
                                                        break;}
                                                   break;
                                                 case "Nothing":
                                                 return $Maybe.Nothing;}
                                              _U.badCase($moduleName,
                                              "between lines 88 and 106");
                                           }();}
                                      _U.badCase($moduleName,
                                      "between lines 88 and 106");
                                   }();
                                }),
                                $Maybe.Just({ctor: "_Tuple2"
                                            ,_0: k
                                            ,_1: Same($Lang.VList(_L.fromArray([])))}),
                                _v402._0);
                              case "Nothing":
                              return $Maybe.Nothing;}
                           _U.badCase($moduleName,
                           "between lines 84 and 107");
                        }();}
                   break;}
              break;}
         return _U.eq(v1,
         v2) ? $Maybe.Just({ctor: "_Tuple2"
                           ,_0: k
                           ,_1: Same(v1)}) : $Maybe.Nothing;
      }();
   });
   var diff = F2(function (v1,v2) {
      return function () {
         var res = A3(diff_,0,v1,v2);
         return function () {
            switch (res.ctor)
            {case "Just":
               switch (res._0.ctor)
                 {case "_Tuple2":
                    switch (res._0._1.ctor)
                      {case "Diff":
                         return function () {
                              var $ = {ctor: "_Tuple2"
                                      ,_0: A3(fillHole_,
                                      false,
                                      res._0._1._0,
                                      res._0._1._1)
                                      ,_1: A3(fillHole_,
                                      true,
                                      res._0._1._0,
                                      res._0._1._1)},
                              v1$ = $._0,
                              v2$ = $._1;
                              return eqV({ctor: "_Tuple2"
                                         ,_0: v1
                                         ,_1: v1$}) && eqV({ctor: "_Tuple2"
                                                           ,_0: v2
                                                           ,_1: v2$}) ? $Maybe.Just(A2(Diff,
                              res._0._1._0,
                              res._0._1._1)) : function () {
                                 var f = function (_v437) {
                                    return function () {
                                       switch (_v437.ctor)
                                       {case "_Tuple2":
                                          switch (_v437._1.ctor)
                                            {case "_Tuple2":
                                               return _L.fromArray([$Basics.toString(_v437._0)
                                                                   ,$Lang.strVal(_v437._1._0)
                                                                   ,$Lang.strVal(_v437._1._1)]);}
                                            break;}
                                       _U.badCase($moduleName,
                                       "on line 56, column 38 to 76");
                                    }();
                                 };
                                 return $Debug.crash($Utils.lines(A2($List._op["::"],
                                 "bad diff",
                                 A2($List._op["::"],
                                 $Lang.strVal(res._0._1._0),
                                 A2($List.concatMap,
                                 f,
                                 $Dict.toList(res._0._1._1))))));
                              }();
                           }();}
                      break;}
                 break;}
            return A2($Utils.mapMaybe,
            $Basics.snd,
            res);
         }();
      }();
   });
   var diffNoCheck = F2(function (v1,
   v2) {
      return A2($Utils.mapMaybe,
      $Basics.snd,
      A3(diff_,0,v1,v2));
   });
   var inferLocalUpdates = F4(function (opts,
   e,
   v,
   v$) {
      return function () {
         var _v443 = A2(diff,v,v$);
         switch (_v443.ctor)
         {case "Just":
            switch (_v443._0.ctor)
              {case "Diff":
                 return function () {
                      var newNew = getFillers(_v443._0._1);
                      var subst0 = $LangParser.substOf(e);
                      var substs = A3(inferSubsts,
                      opts,
                      subst0,
                      newNew);
                      var res = $List.sortBy($Basics.snd)(A2($List.filterMap,
                      function (s) {
                         return function () {
                            var e1 = A2($Lang.applySubst,
                            s,
                            e);
                            var v1 = $Eval.run(e1);
                            var vcStar = A2($Lang.mapVal,
                            leafToStar,
                            _v443._0._0);
                            return function () {
                               var _v448 = A2(diffNoCheck,
                               A2(fillHole,vcStar,_v443._0._1),
                               v1);
                               switch (_v448.ctor)
                               {case "Just":
                                  switch (_v448._0.ctor)
                                    {case "Diff":
                                       return function () {
                                            var oldNew = getFillers(_v448._0._1);
                                            return !_U.eq(newNew,
                                            oldNew) ? $Maybe.Nothing : function () {
                                               var n = compareVals({ctor: "_Tuple2"
                                                                   ,_0: v
                                                                   ,_1: v1});
                                               return $Maybe.Just({ctor: "_Tuple2"
                                                                  ,_0: {ctor: "_Tuple2"
                                                                       ,_0: e1
                                                                       ,_1: v1}
                                                                  ,_1: n});
                                            }();
                                         }();
                                       case "Same":
                                       return function () {
                                            var n = compareVals({ctor: "_Tuple2"
                                                                ,_0: v
                                                                ,_1: v1});
                                            return $Maybe.Just({ctor: "_Tuple2"
                                                               ,_0: {ctor: "_Tuple2"
                                                                    ,_0: e1
                                                                    ,_1: v1}
                                                               ,_1: n});
                                         }();}
                                    break;
                                  case "Nothing":
                                  return $Debug.crash("sync: shouldn\'t happen?");}
                               _U.badCase($moduleName,
                               "between lines 308 and 319");
                            }();
                         }();
                      },
                      substs));
                      return _U.eq(res,
                      _L.fromArray([])) ? $Result.Err("bad change 2") : $Result.Ok(res);
                   }();
                 case "Same":
                 return $Result.Ok(_L.fromArray([]));}
              break;
            case "Nothing":
            return $Result.Err("bad change");}
         _U.badCase($moduleName,
         "between lines 294 and 322");
      }();
   });
   var defaultOptions = {_: {}
                        ,thawedByDefault: true};
   var printZoneTable = function (v) {
      return function () {
         var so = defaultOptions;
         return strTable(assignTriggers(shapesToZoneTable(so)(nodeToAttrLocs(v))));
      }();
   };
   var Options = function (a) {
      return {_: {}
             ,thawedByDefault: a};
   };
   _elm.Sync.values = {_op: _op
                      ,defaultOptions: defaultOptions
                      ,inferLocalUpdates: inferLocalUpdates
                      ,inferStructuralUpdate: inferStructuralUpdate
                      ,prepareLiveUpdates: prepareLiveUpdates
                      ,printZoneTable: printZoneTable
                      ,tryToBeSmart: tryToBeSmart
                      ,Options: Options
                      ,LiveInfo: LiveInfo};
   return _elm.Sync.values;
};
Elm.Task = Elm.Task || {};
Elm.Task.make = function (_elm) {
   "use strict";
   _elm.Task = _elm.Task || {};
   if (_elm.Task.values)
   return _elm.Task.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Task",
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Native$Task = Elm.Native.Task.make(_elm),
   $Result = Elm.Result.make(_elm);
   var sleep = $Native$Task.sleep;
   var spawn = $Native$Task.spawn;
   var ThreadID = function (a) {
      return {ctor: "ThreadID"
             ,_0: a};
   };
   var onError = $Native$Task.catch_;
   var andThen = $Native$Task.andThen;
   var fail = $Native$Task.fail;
   var mapError = F2(function (f,
   promise) {
      return A2(onError,
      promise,
      function (err) {
         return fail(f(err));
      });
   });
   var succeed = $Native$Task.succeed;
   var map = F2(function (func,
   promiseA) {
      return A2(andThen,
      promiseA,
      function (a) {
         return succeed(func(a));
      });
   });
   var map2 = F3(function (func,
   promiseA,
   promiseB) {
      return A2(andThen,
      promiseA,
      function (a) {
         return A2(andThen,
         promiseB,
         function (b) {
            return succeed(A2(func,a,b));
         });
      });
   });
   var map3 = F4(function (func,
   promiseA,
   promiseB,
   promiseC) {
      return A2(andThen,
      promiseA,
      function (a) {
         return A2(andThen,
         promiseB,
         function (b) {
            return A2(andThen,
            promiseC,
            function (c) {
               return succeed(A3(func,
               a,
               b,
               c));
            });
         });
      });
   });
   var map4 = F5(function (func,
   promiseA,
   promiseB,
   promiseC,
   promiseD) {
      return A2(andThen,
      promiseA,
      function (a) {
         return A2(andThen,
         promiseB,
         function (b) {
            return A2(andThen,
            promiseC,
            function (c) {
               return A2(andThen,
               promiseD,
               function (d) {
                  return succeed(A4(func,
                  a,
                  b,
                  c,
                  d));
               });
            });
         });
      });
   });
   var map5 = F6(function (func,
   promiseA,
   promiseB,
   promiseC,
   promiseD,
   promiseE) {
      return A2(andThen,
      promiseA,
      function (a) {
         return A2(andThen,
         promiseB,
         function (b) {
            return A2(andThen,
            promiseC,
            function (c) {
               return A2(andThen,
               promiseD,
               function (d) {
                  return A2(andThen,
                  promiseE,
                  function (e) {
                     return succeed(A5(func,
                     a,
                     b,
                     c,
                     d,
                     e));
                  });
               });
            });
         });
      });
   });
   var andMap = F2(function (promiseFunc,
   promiseValue) {
      return A2(andThen,
      promiseFunc,
      function (func) {
         return A2(andThen,
         promiseValue,
         function (value) {
            return succeed(func(value));
         });
      });
   });
   var sequence = function (promises) {
      return function () {
         switch (promises.ctor)
         {case "::": return A3(map2,
              F2(function (x,y) {
                 return A2($List._op["::"],
                 x,
                 y);
              }),
              promises._0,
              sequence(promises._1));
            case "[]":
            return succeed(_L.fromArray([]));}
         _U.badCase($moduleName,
         "between lines 101 and 106");
      }();
   };
   var toMaybe = function (task) {
      return A2(onError,
      A2(map,$Maybe.Just,task),
      function (_v3) {
         return function () {
            return succeed($Maybe.Nothing);
         }();
      });
   };
   var fromMaybe = F2(function ($default,
   maybe) {
      return function () {
         switch (maybe.ctor)
         {case "Just":
            return succeed(maybe._0);
            case "Nothing":
            return fail($default);}
         _U.badCase($moduleName,
         "between lines 139 and 141");
      }();
   });
   var toResult = function (task) {
      return A2(onError,
      A2(map,$Result.Ok,task),
      function (msg) {
         return succeed($Result.Err(msg));
      });
   };
   var fromResult = function (result) {
      return function () {
         switch (result.ctor)
         {case "Err":
            return fail(result._0);
            case "Ok":
            return succeed(result._0);}
         _U.badCase($moduleName,
         "between lines 151 and 153");
      }();
   };
   var Task = {ctor: "Task"};
   _elm.Task.values = {_op: _op
                      ,succeed: succeed
                      ,fail: fail
                      ,map: map
                      ,map2: map2
                      ,map3: map3
                      ,map4: map4
                      ,map5: map5
                      ,andMap: andMap
                      ,sequence: sequence
                      ,andThen: andThen
                      ,onError: onError
                      ,mapError: mapError
                      ,toMaybe: toMaybe
                      ,fromMaybe: fromMaybe
                      ,toResult: toResult
                      ,fromResult: fromResult
                      ,spawn: spawn
                      ,sleep: sleep};
   return _elm.Task.values;
};
Elm.Text = Elm.Text || {};
Elm.Text.make = function (_elm) {
   "use strict";
   _elm.Text = _elm.Text || {};
   if (_elm.Text.values)
   return _elm.Text.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Text",
   $Color = Elm.Color.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Native$Text = Elm.Native.Text.make(_elm);
   var line = $Native$Text.line;
   var italic = $Native$Text.italic;
   var bold = $Native$Text.bold;
   var color = $Native$Text.color;
   var height = $Native$Text.height;
   var link = $Native$Text.link;
   var monospace = $Native$Text.monospace;
   var typeface = $Native$Text.typeface;
   var style = $Native$Text.style;
   var append = $Native$Text.append;
   var fromString = $Native$Text.fromString;
   var empty = fromString("");
   var concat = function (texts) {
      return A3($List.foldr,
      append,
      empty,
      texts);
   };
   var join = F2(function (seperator,
   texts) {
      return concat(A2($List.intersperse,
      seperator,
      texts));
   });
   var defaultStyle = {_: {}
                      ,bold: false
                      ,color: $Color.black
                      ,height: $Maybe.Nothing
                      ,italic: false
                      ,line: $Maybe.Nothing
                      ,typeface: _L.fromArray([])};
   var Style = F6(function (a,
   b,
   c,
   d,
   e,
   f) {
      return {_: {}
             ,bold: d
             ,color: c
             ,height: b
             ,italic: e
             ,line: f
             ,typeface: a};
   });
   var Through = {ctor: "Through"};
   var Over = {ctor: "Over"};
   var Under = {ctor: "Under"};
   var Text = {ctor: "Text"};
   _elm.Text.values = {_op: _op
                      ,fromString: fromString
                      ,empty: empty
                      ,append: append
                      ,concat: concat
                      ,join: join
                      ,link: link
                      ,style: style
                      ,defaultStyle: defaultStyle
                      ,typeface: typeface
                      ,monospace: monospace
                      ,height: height
                      ,color: color
                      ,bold: bold
                      ,italic: italic
                      ,line: line
                      ,Style: Style
                      ,Under: Under
                      ,Over: Over
                      ,Through: Through};
   return _elm.Text.values;
};
Elm.Transform2D = Elm.Transform2D || {};
Elm.Transform2D.make = function (_elm) {
   "use strict";
   _elm.Transform2D = _elm.Transform2D || {};
   if (_elm.Transform2D.values)
   return _elm.Transform2D.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Transform2D",
   $Native$Transform2D = Elm.Native.Transform2D.make(_elm);
   var multiply = $Native$Transform2D.multiply;
   var rotation = $Native$Transform2D.rotation;
   var matrix = $Native$Transform2D.matrix;
   var translation = F2(function (x,
   y) {
      return A6(matrix,
      1,
      0,
      0,
      1,
      x,
      y);
   });
   var scale = function (s) {
      return A6(matrix,
      s,
      0,
      0,
      s,
      0,
      0);
   };
   var scaleX = function (x) {
      return A6(matrix,
      x,
      0,
      0,
      1,
      0,
      0);
   };
   var scaleY = function (y) {
      return A6(matrix,
      1,
      0,
      0,
      y,
      0,
      0);
   };
   var identity = $Native$Transform2D.identity;
   var Transform2D = {ctor: "Transform2D"};
   _elm.Transform2D.values = {_op: _op
                             ,identity: identity
                             ,matrix: matrix
                             ,multiply: multiply
                             ,rotation: rotation
                             ,translation: translation
                             ,scale: scale
                             ,scaleX: scaleX
                             ,scaleY: scaleY};
   return _elm.Transform2D.values;
};
Elm.Utils = Elm.Utils || {};
Elm.Utils.make = function (_elm) {
   "use strict";
   _elm.Utils = _elm.Utils || {};
   if (_elm.Utils.values)
   return _elm.Utils.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Utils",
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Set = Elm.Set.make(_elm),
   $String = Elm.String.make(_elm);
   var setCardinal = function ($) {
      return $List.length($Set.toList($));
   };
   var dictIsEmpty = function ($) {
      return F2(function (x,y) {
         return _U.eq(x,y);
      })(_L.fromArray([]))($Dict.toList($));
   };
   var setIsEmpty = function ($) {
      return F2(function (x,y) {
         return _U.eq(x,y);
      })(_L.fromArray([]))($Set.toList($));
   };
   var mapThd3 = F2(function (f,
   _v0) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple3":
            return {ctor: "_Tuple3"
                   ,_0: _v0._0
                   ,_1: _v0._1
                   ,_2: f(_v0._2)};}
         _U.badCase($moduleName,
         "on line 181, column 22 to 31");
      }();
   });
   var thd3 = function (_v5) {
      return function () {
         switch (_v5.ctor)
         {case "_Tuple3": return _v5._2;}
         _U.badCase($moduleName,
         "on line 179, column 16 to 17");
      }();
   };
   var snd3 = function (_v10) {
      return function () {
         switch (_v10.ctor)
         {case "_Tuple3":
            return _v10._1;}
         _U.badCase($moduleName,
         "on line 178, column 16 to 17");
      }();
   };
   var fst3 = function (_v15) {
      return function () {
         switch (_v15.ctor)
         {case "_Tuple3":
            return _v15._0;}
         _U.badCase($moduleName,
         "on line 177, column 16 to 17");
      }();
   };
   var mapSnd = F2(function (f,
   _v20) {
      return function () {
         switch (_v20.ctor)
         {case "_Tuple2":
            return {ctor: "_Tuple2"
                   ,_0: _v20._0
                   ,_1: f(_v20._1)};}
         _U.badCase($moduleName,
         "on line 175, column 19 to 25");
      }();
   });
   var projJusts = A2($List.foldr,
   F2(function (mx,acc) {
      return function () {
         var _v24 = {ctor: "_Tuple2"
                    ,_0: mx
                    ,_1: acc};
         switch (_v24.ctor)
         {case "_Tuple2":
            switch (_v24._0.ctor)
              {case "Just":
                 switch (_v24._1.ctor)
                   {case "Just":
                      return $Maybe.Just(A2($List._op["::"],
                        _v24._0._0,
                        _v24._1._0));}
                   break;}
              break;}
         return $Maybe.Nothing;
      }();
   }),
   $Maybe.Just(_L.fromArray([])));
   var plusMaybe = F2(function (mx,
   my) {
      return function () {
         switch (mx.ctor)
         {case "Just": return mx;
            case "Nothing": return my;}
         _U.badCase($moduleName,
         "on line 165, column 19 to 59");
      }();
   });
   var bindMaybe = F2(function (f,
   mx) {
      return function () {
         switch (mx.ctor)
         {case "Just": return f(mx._0);
            case "Nothing":
            return $Maybe.Nothing;}
         _U.badCase($moduleName,
         "on line 162, column 18 to 64");
      }();
   });
   var mapMaybe = F2(function (f,
   mx) {
      return function () {
         switch (mx.ctor)
         {case "Just":
            return $Maybe.Just(f(mx._0));
            case "Nothing":
            return $Maybe.Nothing;}
         _U.badCase($moduleName,
         "on line 159, column 17 to 70");
      }();
   });
   var fromOk = F2(function (s,
   mx) {
      return function () {
         switch (mx.ctor)
         {case "Err":
            return $Debug.crash(A2($Basics._op["++"],
              "fromOk [",
              A2($Basics._op["++"],
              s,
              A2($Basics._op["++"],
              "]: ",
              mx._0))));
            case "Ok": return mx._0;}
         _U.badCase($moduleName,
         "between lines 145 and 147");
      }();
   });
   var fromOk_ = fromOk("");
   var fromJust_ = F2(function (s,
   mx) {
      return function () {
         switch (mx.ctor)
         {case "Just": return mx._0;
            case "Nothing":
            return $Debug.crash(A2($Basics._op["++"],
              "Utils.fromJust_: ",
              s));}
         _U.badCase($moduleName,
         "between lines 141 and 143");
      }();
   });
   var justGet = F2(function (k,
   d) {
      return fromJust_("Utils.justGet")(A2($Dict.get,
      k,
      d));
   });
   var justGet_ = F3(function (s,
   k,
   d) {
      return fromJust_(A2($Basics._op["++"],
      "Utils.justGet ",
      s))(A2($Dict.get,k,d));
   });
   var head_ = function ($) {
      return fromJust_("Utils.head_")($List.head($));
   };
   var tail_ = function ($) {
      return fromJust_("Utils.tail_")($List.tail($));
   };
   var fromJust = function (m) {
      return function () {
         switch (m.ctor)
         {case "Just": return m._0;
            case "Nothing":
            return $Debug.crash("Utils.fromJust: Nothing");}
         _U.badCase($moduleName,
         "between lines 137 and 139");
      }();
   };
   var assert = F2(function (s,b) {
      return b ? {ctor: "_Tuple0"} : $Debug.crash(A2($Basics._op["++"],
      "assert error: ",
      s));
   });
   var lift_2_2 = F3(function (f,
   _v42,
   _v43) {
      return function () {
         switch (_v43.ctor)
         {case "_Tuple2":
            return function () {
                 switch (_v42.ctor)
                 {case "_Tuple2":
                    return {ctor: "_Tuple2"
                           ,_0: A2(f,_v42._0,_v43._0)
                           ,_1: A2(f,_v42._1,_v43._1)};}
                 _U.badCase($moduleName,
                 "on line 133, column 27 to 39");
              }();}
         _U.badCase($moduleName,
         "on line 133, column 27 to 39");
      }();
   });
   var sum = A2($List.foldl,
   F2(function (x,y) {
      return x + y;
   }),
   0);
   var lines = $String.join("\n");
   var commas = $String.join(", ");
   var spaces = $String.join(" ");
   var delimit = F3(function (a,
   b,
   s) {
      return $String.concat(_L.fromArray([a
                                         ,s
                                         ,b]));
   });
   var parens = A2(delimit,
   "(",
   ")");
   var bracks = A2(delimit,
   "[",
   "]");
   var braces = A2(delimit,
   "{",
   "}");
   var geti = function (i) {
      return function ($) {
         return fromJust_("Utils.geti")($List.head($List.drop(i - 1)($)));
      };
   };
   var adjacentPairs = F2(function (includeLast,
   _v50) {
      return function () {
         switch (_v50.ctor)
         {case "::": return function () {
                 var f = F2(function (xi,
                 _v54) {
                    return function () {
                       switch (_v54.ctor)
                       {case "_Tuple2":
                          return {ctor: "_Tuple2"
                                 ,_0: xi
                                 ,_1: A2($List._op["::"],
                                 {ctor: "_Tuple2"
                                 ,_0: _v54._0
                                 ,_1: xi},
                                 _v54._1)};}
                       _U.badCase($moduleName,
                       "on line 112, column 27 to 48");
                    }();
                 });
                 var $ = A3($List.foldl,
                 f,
                 {ctor: "_Tuple2"
                 ,_0: _v50._0
                 ,_1: _L.fromArray([])},
                 _v50._1),
                 xn = $._0,
                 pairs = $._1;
                 return includeLast ? $List.reverse(A2($List._op["::"],
                 {ctor: "_Tuple2"
                 ,_0: xn
                 ,_1: _v50._0},
                 pairs)) : $List.reverse(pairs);
              }();}
         _U.badCase($moduleName,
         "between lines 112 and 115");
      }();
   });
   var removeFirst = F2(function (x,
   ys) {
      return function () {
         switch (ys.ctor)
         {case "::": return _U.eq(x,
              ys._0) ? ys._1 : A2($List._op["::"],
              ys._0,
              A2(removeFirst,x,ys._1));
            case "[]":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 106 and 108");
      }();
   });
   var findFirst = F2(function (p,
   xs) {
      return function () {
         switch (xs.ctor)
         {case "::":
            return p(xs._0) ? $Maybe.Just(xs._0) : A2(findFirst,
              p,
              xs._1);
            case "[]":
            return $Maybe.Nothing;}
         _U.badCase($moduleName,
         "between lines 100 and 103");
      }();
   });
   var intersectMany = function (_v64) {
      return function () {
         switch (_v64.ctor)
         {case "::":
            return A3($List.foldl,
              $Set.intersect,
              _v64._0,
              _v64._1);}
         _U.badCase($moduleName,
         "on line 86, column 29 to 62");
      }();
   };
   var oneOfEach = function (xss) {
      return function () {
         switch (xss.ctor)
         {case "::":
            return A2($List.concatMap,
              function (x) {
                 return A2($List.map,
                 F2(function (x,y) {
                    return A2($List._op["::"],
                    x,
                    y);
                 })(x),
                 oneOfEach(xss._1));
              },
              xss._0);
            case "[]":
            return _L.fromArray([_L.fromArray([])]);}
         _U.badCase($moduleName,
         "between lines 72 and 74");
      }();
   };
   var splitString = F2(function (n,
   s) {
      return {ctor: "_Tuple2"
             ,_0: A2($String.left,n,s)
             ,_1: A2($String.dropLeft,n,s)};
   });
   var munchString = F2(function (prefix,
   s) {
      return function () {
         var $ = A2(splitString,
         $String.length(prefix),
         s),
         pre = $._0,
         suf = $._1;
         return _U.eq(pre,
         prefix) ? $Maybe.Just(suf) : $Maybe.Nothing;
      }();
   });
   var split = F2(function (n,xs) {
      return {ctor: "_Tuple2"
             ,_0: A2($List.take,n,xs)
             ,_1: A2($List.drop,n,xs)};
   });
   var singleton = function (x) {
      return _L.fromArray([x]);
   };
   var reverse2 = function (_v71) {
      return function () {
         switch (_v71.ctor)
         {case "_Tuple2":
            return {ctor: "_Tuple2"
                   ,_0: $List.reverse(_v71._0)
                   ,_1: $List.reverse(_v71._1)};}
         _U.badCase($moduleName,
         "on line 54, column 21 to 53");
      }();
   };
   var maybeZip = F2(function (xs,
   ys) {
      return function () {
         var _v75 = {ctor: "_Tuple2"
                    ,_0: xs
                    ,_1: ys};
         switch (_v75.ctor)
         {case "_Tuple2":
            switch (_v75._0.ctor)
              {case "::":
                 switch (_v75._1.ctor)
                   {case "::": return function () {
                           var _v82 = A2(maybeZip,
                           _v75._0._1,
                           _v75._1._1);
                           switch (_v82.ctor)
                           {case "Just":
                              return $Maybe.Just(A2($List._op["::"],
                                {ctor: "_Tuple2"
                                ,_0: _v75._0._0
                                ,_1: _v75._1._0},
                                _v82._0));
                              case "Nothing":
                              return $Maybe.Nothing;}
                           _U.badCase($moduleName,
                           "between lines 36 and 39");
                        }();}
                   break;
                 case "[]": switch (_v75._1.ctor)
                   {case "[]":
                      return $Maybe.Just(_L.fromArray([]));}
                   break;}
              break;}
         return $Maybe.Nothing;
      }();
   });
   var zip = F2(function (xs,ys) {
      return function () {
         var _v84 = {ctor: "_Tuple2"
                    ,_0: xs
                    ,_1: ys};
         switch (_v84.ctor)
         {case "_Tuple2":
            switch (_v84._0.ctor)
              {case "::":
                 switch (_v84._1.ctor)
                   {case "::":
                      return A2($List._op["::"],
                        {ctor: "_Tuple2"
                        ,_0: _v84._0._0
                        ,_1: _v84._1._0},
                        A2(zip,_v84._0._1,_v84._1._1));}
                   break;}
              break;}
         return _L.fromArray([]);
      }();
   });
   var mapi = F2(function (f,xs) {
      return function () {
         var n = $List.length(xs);
         return A2($List.map,
         f,
         A2(zip,_L.range(1,n),xs));
      }();
   });
   var foldli = F3(function (f,
   init,
   xs) {
      return function () {
         var n = $List.length(xs);
         return A3($List.foldl,
         f,
         init,
         A2(zip,_L.range(1,n),xs));
      }();
   });
   var foldri = F3(function (f,
   init,
   xs) {
      return $List.reverse(A3(foldli,
      f,
      init,
      xs));
   });
   var manySetDiffs = function (sets) {
      return A2(mapi,
      function (_v91) {
         return function () {
            switch (_v91.ctor)
            {case "_Tuple2":
               return A3(foldli,
                 F2(function (_v95,acc) {
                    return function () {
                       switch (_v95.ctor)
                       {case "_Tuple2":
                          return _U.eq(_v91._0,
                            _v95._0) ? acc : A2($Set.diff,
                            acc,
                            _v95._1);}
                       _U.badCase($moduleName,
                       "between lines 92 and 93");
                    }();
                 }),
                 _v91._1,
                 sets);}
            _U.badCase($moduleName,
            "between lines 91 and 94");
         }();
      },
      sets);
   };
   var cartProdWithDiff = function ($) {
      return oneOfEach($List.map($Set.toList)(manySetDiffs($)));
   };
   var update = F2(function (_v99,
   vals) {
      return function () {
         switch (_v99.ctor)
         {case "_Tuple2":
            return function () {
                 switch (vals.ctor)
                 {case "::":
                    switch (vals._0.ctor)
                      {case "_Tuple2":
                         return _U.eq(vals._0._0,
                           _v99._0) ? A2($List._op["::"],
                           {ctor: "_Tuple2"
                           ,_0: vals._0._0
                           ,_1: _v99._1},
                           vals._1) : A2($List._op["::"],
                           {ctor: "_Tuple2"
                           ,_0: vals._0._0
                           ,_1: vals._0._1},
                           A2(update,
                           {ctor: "_Tuple2"
                           ,_0: _v99._0
                           ,_1: _v99._1},
                           vals._1));}
                      break;
                    case "[]":
                    return _L.fromArray([]);}
                 _U.badCase($moduleName,
                 "between lines 23 and 27");
              }();}
         _U.badCase($moduleName,
         "between lines 23 and 27");
      }();
   });
   var maybeFind = F2(function (k,
   l) {
      return function () {
         switch (l.ctor)
         {case "::": switch (l._0.ctor)
              {case "_Tuple2": return _U.eq(k,
                   l._0._0) ? $Maybe.Just(l._0._1) : A2(maybeFind,
                   k,
                   l._1);}
              break;
            case "[]":
            return $Maybe.Nothing;}
         _U.badCase($moduleName,
         "between lines 9 and 12");
      }();
   });
   var find = F3(function (err,
   d,
   k) {
      return function () {
         var _v113 = A2(maybeFind,
         k,
         d);
         switch (_v113.ctor)
         {case "Just": return _v113._0;
            case "Nothing":
            return $Debug.crash(A2($Basics._op["++"],
              "Utils.find: ",
              err));}
         _U.badCase($moduleName,
         "between lines 15 and 17");
      }();
   });
   var find_ = find("");
   _elm.Utils.values = {_op: _op
                       ,maybeFind: maybeFind
                       ,find: find
                       ,find_: find_
                       ,update: update
                       ,zip: zip
                       ,maybeZip: maybeZip
                       ,mapi: mapi
                       ,foldli: foldli
                       ,foldri: foldri
                       ,reverse2: reverse2
                       ,singleton: singleton
                       ,split: split
                       ,splitString: splitString
                       ,munchString: munchString
                       ,oneOfEach: oneOfEach
                       ,cartProdWithDiff: cartProdWithDiff
                       ,intersectMany: intersectMany
                       ,manySetDiffs: manySetDiffs
                       ,findFirst: findFirst
                       ,removeFirst: removeFirst
                       ,adjacentPairs: adjacentPairs
                       ,geti: geti
                       ,delimit: delimit
                       ,parens: parens
                       ,bracks: bracks
                       ,braces: braces
                       ,spaces: spaces
                       ,commas: commas
                       ,lines: lines
                       ,sum: sum
                       ,lift_2_2: lift_2_2
                       ,assert: assert
                       ,fromJust: fromJust
                       ,fromJust_: fromJust_
                       ,fromOk: fromOk
                       ,fromOk_: fromOk_
                       ,justGet: justGet
                       ,justGet_: justGet_
                       ,head_: head_
                       ,tail_: tail_
                       ,mapMaybe: mapMaybe
                       ,bindMaybe: bindMaybe
                       ,plusMaybe: plusMaybe
                       ,projJusts: projJusts
                       ,mapSnd: mapSnd
                       ,fst3: fst3
                       ,snd3: snd3
                       ,thd3: thd3
                       ,mapThd3: mapThd3
                       ,setIsEmpty: setIsEmpty
                       ,dictIsEmpty: dictIsEmpty
                       ,setCardinal: setCardinal};
   return _elm.Utils.values;
};
Elm.VirtualDom = Elm.VirtualDom || {};
Elm.VirtualDom.make = function (_elm) {
   "use strict";
   _elm.VirtualDom = _elm.VirtualDom || {};
   if (_elm.VirtualDom.values)
   return _elm.VirtualDom.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "VirtualDom",
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $Native$VirtualDom = Elm.Native.VirtualDom.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var lazy3 = $Native$VirtualDom.lazy3;
   var lazy2 = $Native$VirtualDom.lazy2;
   var lazy = $Native$VirtualDom.lazy;
   var on = $Native$VirtualDom.on;
   var attribute = $Native$VirtualDom.attribute;
   var property = $Native$VirtualDom.property;
   var Property = {ctor: "Property"};
   var fromElement = $Native$VirtualDom.fromElement;
   var toElement = $Native$VirtualDom.toElement;
   var text = $Native$VirtualDom.text;
   var node = $Native$VirtualDom.node;
   var Node = {ctor: "Node"};
   _elm.VirtualDom.values = {_op: _op
                            ,Node: Node
                            ,node: node
                            ,text: text
                            ,toElement: toElement
                            ,fromElement: fromElement
                            ,Property: Property
                            ,property: property
                            ,attribute: attribute
                            ,on: on
                            ,lazy: lazy
                            ,lazy2: lazy2
                            ,lazy3: lazy3};
   return _elm.VirtualDom.values;
};
Elm.Window = Elm.Window || {};
Elm.Window.make = function (_elm) {
   "use strict";
   _elm.Window = _elm.Window || {};
   if (_elm.Window.values)
   return _elm.Window.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Window",
   $Basics = Elm.Basics.make(_elm),
   $Native$Window = Elm.Native.Window.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var dimensions = $Native$Window.dimensions;
   var width = A2($Signal.map,
   $Basics.fst,
   dimensions);
   var height = A2($Signal.map,
   $Basics.snd,
   dimensions);
   _elm.Window.values = {_op: _op
                        ,dimensions: dimensions
                        ,width: width
                        ,height: height};
   return _elm.Window.values;
};
